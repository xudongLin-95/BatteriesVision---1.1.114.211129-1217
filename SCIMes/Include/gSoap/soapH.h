/* soapH.h
   Generated by gSOAP 2.8.108 for mes_cc2_1.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__UnBindSFCResponse_DEFINED
#define SOAP_TYPE__ns1__UnBindSFCResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnBindSFCResponse(struct soap*, const char*, int, const _ns1__UnBindSFCResponse *, const char*);
SOAP_FMAC3 _ns1__UnBindSFCResponse * SOAP_FMAC4 soap_in__ns1__UnBindSFCResponse(struct soap*, const char*, _ns1__UnBindSFCResponse *, const char*);
SOAP_FMAC1 _ns1__UnBindSFCResponse * SOAP_FMAC2 soap_instantiate__ns1__UnBindSFCResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnBindSFCResponse * soap_new__ns1__UnBindSFCResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UnBindSFCResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnBindSFCResponse * soap_new_req__ns1__UnBindSFCResponse(
	struct soap *soap)
{
	_ns1__UnBindSFCResponse *_p = ::soap_new__ns1__UnBindSFCResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UnBindSFCResponse * soap_new_set__ns1__UnBindSFCResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *UnBindSFCResult)
{
	_ns1__UnBindSFCResponse *_p = ::soap_new__ns1__UnBindSFCResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnBindSFCResponse::UnBindSFCResult = UnBindSFCResult;
	}
	return _p;
}

inline int soap_write__ns1__UnBindSFCResponse(struct soap *soap, _ns1__UnBindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__UnBindSFCResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UnBindSFCResponse(struct soap *soap, const char *URL, _ns1__UnBindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__UnBindSFCResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__UnBindSFCResponse(struct soap *soap, const char *URL, _ns1__UnBindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__UnBindSFCResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UnBindSFCResponse(struct soap *soap, const char *URL, _ns1__UnBindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__UnBindSFCResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnBindSFCResponse * SOAP_FMAC4 soap_get__ns1__UnBindSFCResponse(struct soap*, _ns1__UnBindSFCResponse *, const char*, const char*);

inline int soap_read__ns1__UnBindSFCResponse(struct soap *soap, _ns1__UnBindSFCResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__UnBindSFCResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UnBindSFCResponse(struct soap *soap, const char *URL, _ns1__UnBindSFCResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__UnBindSFCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__UnBindSFCResponse(struct soap *soap, _ns1__UnBindSFCResponse *p)
{
	if (::soap_read__ns1__UnBindSFCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__UnBindSFC_DEFINED
#define SOAP_TYPE__ns1__UnBindSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UnBindSFC(struct soap*, const char*, int, const _ns1__UnBindSFC *, const char*);
SOAP_FMAC3 _ns1__UnBindSFC * SOAP_FMAC4 soap_in__ns1__UnBindSFC(struct soap*, const char*, _ns1__UnBindSFC *, const char*);
SOAP_FMAC1 _ns1__UnBindSFC * SOAP_FMAC2 soap_instantiate__ns1__UnBindSFC(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UnBindSFC * soap_new__ns1__UnBindSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UnBindSFC(soap, n, NULL, NULL, NULL);
}

inline _ns1__UnBindSFC * soap_new_req__ns1__UnBindSFC(
	struct soap *soap)
{
	_ns1__UnBindSFC *_p = ::soap_new__ns1__UnBindSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UnBindSFC * soap_new_set__ns1__UnBindSFC(
	struct soap *soap,
	ns1__UnBindSFCByScadaDTO *model)
{
	_ns1__UnBindSFC *_p = ::soap_new__ns1__UnBindSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UnBindSFC::model = model;
	}
	return _p;
}

inline int soap_write__ns1__UnBindSFC(struct soap *soap, _ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFC", p->soap_type() == SOAP_TYPE__ns1__UnBindSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UnBindSFC(struct soap *soap, const char *URL, _ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFC", p->soap_type() == SOAP_TYPE__ns1__UnBindSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__UnBindSFC(struct soap *soap, const char *URL, _ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFC", p->soap_type() == SOAP_TYPE__ns1__UnBindSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UnBindSFC(struct soap *soap, const char *URL, _ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFC", p->soap_type() == SOAP_TYPE__ns1__UnBindSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UnBindSFC * SOAP_FMAC4 soap_get__ns1__UnBindSFC(struct soap*, _ns1__UnBindSFC *, const char*, const char*);

inline int soap_read__ns1__UnBindSFC(struct soap *soap, _ns1__UnBindSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__UnBindSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UnBindSFC(struct soap *soap, const char *URL, _ns1__UnBindSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__UnBindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__UnBindSFC(struct soap *soap, _ns1__UnBindSFC *p)
{
	if (::soap_read__ns1__UnBindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ToolLifeResponse_DEFINED
#define SOAP_TYPE__ns1__ToolLifeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ToolLifeResponse(struct soap*, const char*, int, const _ns1__ToolLifeResponse *, const char*);
SOAP_FMAC3 _ns1__ToolLifeResponse * SOAP_FMAC4 soap_in__ns1__ToolLifeResponse(struct soap*, const char*, _ns1__ToolLifeResponse *, const char*);
SOAP_FMAC1 _ns1__ToolLifeResponse * SOAP_FMAC2 soap_instantiate__ns1__ToolLifeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ToolLifeResponse * soap_new__ns1__ToolLifeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ToolLifeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ToolLifeResponse * soap_new_req__ns1__ToolLifeResponse(
	struct soap *soap)
{
	_ns1__ToolLifeResponse *_p = ::soap_new__ns1__ToolLifeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ToolLifeResponse * soap_new_set__ns1__ToolLifeResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *ToolLifeResult)
{
	_ns1__ToolLifeResponse *_p = ::soap_new__ns1__ToolLifeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ToolLifeResponse::ToolLifeResult = ToolLifeResult;
	}
	return _p;
}

inline int soap_write__ns1__ToolLifeResponse(struct soap *soap, _ns1__ToolLifeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLifeResponse", p->soap_type() == SOAP_TYPE__ns1__ToolLifeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ToolLifeResponse(struct soap *soap, const char *URL, _ns1__ToolLifeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLifeResponse", p->soap_type() == SOAP_TYPE__ns1__ToolLifeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ToolLifeResponse(struct soap *soap, const char *URL, _ns1__ToolLifeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLifeResponse", p->soap_type() == SOAP_TYPE__ns1__ToolLifeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ToolLifeResponse(struct soap *soap, const char *URL, _ns1__ToolLifeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLifeResponse", p->soap_type() == SOAP_TYPE__ns1__ToolLifeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ToolLifeResponse * SOAP_FMAC4 soap_get__ns1__ToolLifeResponse(struct soap*, _ns1__ToolLifeResponse *, const char*, const char*);

inline int soap_read__ns1__ToolLifeResponse(struct soap *soap, _ns1__ToolLifeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ToolLifeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ToolLifeResponse(struct soap *soap, const char *URL, _ns1__ToolLifeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ToolLifeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ToolLifeResponse(struct soap *soap, _ns1__ToolLifeResponse *p)
{
	if (::soap_read__ns1__ToolLifeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ToolLife_DEFINED
#define SOAP_TYPE__ns1__ToolLife_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ToolLife(struct soap*, const char*, int, const _ns1__ToolLife *, const char*);
SOAP_FMAC3 _ns1__ToolLife * SOAP_FMAC4 soap_in__ns1__ToolLife(struct soap*, const char*, _ns1__ToolLife *, const char*);
SOAP_FMAC1 _ns1__ToolLife * SOAP_FMAC2 soap_instantiate__ns1__ToolLife(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ToolLife * soap_new__ns1__ToolLife(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ToolLife(soap, n, NULL, NULL, NULL);
}

inline _ns1__ToolLife * soap_new_req__ns1__ToolLife(
	struct soap *soap)
{
	_ns1__ToolLife *_p = ::soap_new__ns1__ToolLife(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ToolLife * soap_new_set__ns1__ToolLife(
	struct soap *soap,
	ns1__ToolLife *model)
{
	_ns1__ToolLife *_p = ::soap_new__ns1__ToolLife(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ToolLife::model = model;
	}
	return _p;
}

inline int soap_write__ns1__ToolLife(struct soap *soap, _ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE__ns1__ToolLife ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ToolLife(struct soap *soap, const char *URL, _ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE__ns1__ToolLife ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ToolLife(struct soap *soap, const char *URL, _ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE__ns1__ToolLife ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ToolLife(struct soap *soap, const char *URL, _ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE__ns1__ToolLife ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ToolLife * SOAP_FMAC4 soap_get__ns1__ToolLife(struct soap*, _ns1__ToolLife *, const char*, const char*);

inline int soap_read__ns1__ToolLife(struct soap *soap, _ns1__ToolLife *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ToolLife(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ToolLife(struct soap *soap, const char *URL, _ns1__ToolLife *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ToolLife(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ToolLife(struct soap *soap, _ns1__ToolLife *p)
{
	if (::soap_read__ns1__ToolLife(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ToolBindResponse_DEFINED
#define SOAP_TYPE__ns1__ToolBindResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ToolBindResponse(struct soap*, const char*, int, const _ns1__ToolBindResponse *, const char*);
SOAP_FMAC3 _ns1__ToolBindResponse * SOAP_FMAC4 soap_in__ns1__ToolBindResponse(struct soap*, const char*, _ns1__ToolBindResponse *, const char*);
SOAP_FMAC1 _ns1__ToolBindResponse * SOAP_FMAC2 soap_instantiate__ns1__ToolBindResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ToolBindResponse * soap_new__ns1__ToolBindResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ToolBindResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ToolBindResponse * soap_new_req__ns1__ToolBindResponse(
	struct soap *soap)
{
	_ns1__ToolBindResponse *_p = ::soap_new__ns1__ToolBindResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ToolBindResponse * soap_new_set__ns1__ToolBindResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *ToolBindResult)
{
	_ns1__ToolBindResponse *_p = ::soap_new__ns1__ToolBindResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ToolBindResponse::ToolBindResult = ToolBindResult;
	}
	return _p;
}

inline int soap_write__ns1__ToolBindResponse(struct soap *soap, _ns1__ToolBindResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBindResponse", p->soap_type() == SOAP_TYPE__ns1__ToolBindResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ToolBindResponse(struct soap *soap, const char *URL, _ns1__ToolBindResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBindResponse", p->soap_type() == SOAP_TYPE__ns1__ToolBindResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ToolBindResponse(struct soap *soap, const char *URL, _ns1__ToolBindResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBindResponse", p->soap_type() == SOAP_TYPE__ns1__ToolBindResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ToolBindResponse(struct soap *soap, const char *URL, _ns1__ToolBindResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBindResponse", p->soap_type() == SOAP_TYPE__ns1__ToolBindResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ToolBindResponse * SOAP_FMAC4 soap_get__ns1__ToolBindResponse(struct soap*, _ns1__ToolBindResponse *, const char*, const char*);

inline int soap_read__ns1__ToolBindResponse(struct soap *soap, _ns1__ToolBindResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ToolBindResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ToolBindResponse(struct soap *soap, const char *URL, _ns1__ToolBindResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ToolBindResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ToolBindResponse(struct soap *soap, _ns1__ToolBindResponse *p)
{
	if (::soap_read__ns1__ToolBindResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ToolBind_DEFINED
#define SOAP_TYPE__ns1__ToolBind_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ToolBind(struct soap*, const char*, int, const _ns1__ToolBind *, const char*);
SOAP_FMAC3 _ns1__ToolBind * SOAP_FMAC4 soap_in__ns1__ToolBind(struct soap*, const char*, _ns1__ToolBind *, const char*);
SOAP_FMAC1 _ns1__ToolBind * SOAP_FMAC2 soap_instantiate__ns1__ToolBind(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ToolBind * soap_new__ns1__ToolBind(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ToolBind(soap, n, NULL, NULL, NULL);
}

inline _ns1__ToolBind * soap_new_req__ns1__ToolBind(
	struct soap *soap)
{
	_ns1__ToolBind *_p = ::soap_new__ns1__ToolBind(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ToolBind * soap_new_set__ns1__ToolBind(
	struct soap *soap,
	ns1__ToolBind *model)
{
	_ns1__ToolBind *_p = ::soap_new__ns1__ToolBind(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ToolBind::model = model;
	}
	return _p;
}

inline int soap_write__ns1__ToolBind(struct soap *soap, _ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE__ns1__ToolBind ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ToolBind(struct soap *soap, const char *URL, _ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE__ns1__ToolBind ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ToolBind(struct soap *soap, const char *URL, _ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE__ns1__ToolBind ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ToolBind(struct soap *soap, const char *URL, _ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE__ns1__ToolBind ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ToolBind * SOAP_FMAC4 soap_get__ns1__ToolBind(struct soap*, _ns1__ToolBind *, const char*, const char*);

inline int soap_read__ns1__ToolBind(struct soap *soap, _ns1__ToolBind *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ToolBind(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ToolBind(struct soap *soap, const char *URL, _ns1__ToolBind *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ToolBind(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ToolBind(struct soap *soap, _ns1__ToolBind *p)
{
	if (::soap_read__ns1__ToolBind(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__StateResponse_DEFINED
#define SOAP_TYPE__ns1__StateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StateResponse(struct soap*, const char*, int, const _ns1__StateResponse *, const char*);
SOAP_FMAC3 _ns1__StateResponse * SOAP_FMAC4 soap_in__ns1__StateResponse(struct soap*, const char*, _ns1__StateResponse *, const char*);
SOAP_FMAC1 _ns1__StateResponse * SOAP_FMAC2 soap_instantiate__ns1__StateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StateResponse * soap_new__ns1__StateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__StateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__StateResponse * soap_new_req__ns1__StateResponse(
	struct soap *soap)
{
	_ns1__StateResponse *_p = ::soap_new__ns1__StateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__StateResponse * soap_new_set__ns1__StateResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *StateResult)
{
	_ns1__StateResponse *_p = ::soap_new__ns1__StateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__StateResponse::StateResult = StateResult;
	}
	return _p;
}

inline int soap_write__ns1__StateResponse(struct soap *soap, _ns1__StateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateResponse", p->soap_type() == SOAP_TYPE__ns1__StateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__StateResponse(struct soap *soap, const char *URL, _ns1__StateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateResponse", p->soap_type() == SOAP_TYPE__ns1__StateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__StateResponse(struct soap *soap, const char *URL, _ns1__StateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateResponse", p->soap_type() == SOAP_TYPE__ns1__StateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__StateResponse(struct soap *soap, const char *URL, _ns1__StateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateResponse", p->soap_type() == SOAP_TYPE__ns1__StateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__StateResponse * SOAP_FMAC4 soap_get__ns1__StateResponse(struct soap*, _ns1__StateResponse *, const char*, const char*);

inline int soap_read__ns1__StateResponse(struct soap *soap, _ns1__StateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__StateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__StateResponse(struct soap *soap, const char *URL, _ns1__StateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__StateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__StateResponse(struct soap *soap, _ns1__StateResponse *p)
{
	if (::soap_read__ns1__StateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__State_DEFINED
#define SOAP_TYPE__ns1__State_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__State(struct soap*, const char*, int, const _ns1__State *, const char*);
SOAP_FMAC3 _ns1__State * SOAP_FMAC4 soap_in__ns1__State(struct soap*, const char*, _ns1__State *, const char*);
SOAP_FMAC1 _ns1__State * SOAP_FMAC2 soap_instantiate__ns1__State(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__State * soap_new__ns1__State(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__State(soap, n, NULL, NULL, NULL);
}

inline _ns1__State * soap_new_req__ns1__State(
	struct soap *soap)
{
	_ns1__State *_p = ::soap_new__ns1__State(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__State * soap_new_set__ns1__State(
	struct soap *soap,
	ns1__State *model)
{
	_ns1__State *_p = ::soap_new__ns1__State(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__State::model = model;
	}
	return _p;
}

inline int soap_write__ns1__State(struct soap *soap, _ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE__ns1__State ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__State(struct soap *soap, const char *URL, _ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE__ns1__State ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__State(struct soap *soap, const char *URL, _ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE__ns1__State ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__State(struct soap *soap, const char *URL, _ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE__ns1__State ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__State * SOAP_FMAC4 soap_get__ns1__State(struct soap*, _ns1__State *, const char*, const char*);

inline int soap_read__ns1__State(struct soap *soap, _ns1__State *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__State(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__State(struct soap *soap, const char *URL, _ns1__State *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__State(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__State(struct soap *soap, _ns1__State *p)
{
	if (::soap_read__ns1__State(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__RecipeVersionExamineResponse_DEFINED
#define SOAP_TYPE__ns1__RecipeVersionExamineResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RecipeVersionExamineResponse(struct soap*, const char*, int, const _ns1__RecipeVersionExamineResponse *, const char*);
SOAP_FMAC3 _ns1__RecipeVersionExamineResponse * SOAP_FMAC4 soap_in__ns1__RecipeVersionExamineResponse(struct soap*, const char*, _ns1__RecipeVersionExamineResponse *, const char*);
SOAP_FMAC1 _ns1__RecipeVersionExamineResponse * SOAP_FMAC2 soap_instantiate__ns1__RecipeVersionExamineResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RecipeVersionExamineResponse * soap_new__ns1__RecipeVersionExamineResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RecipeVersionExamineResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RecipeVersionExamineResponse * soap_new_req__ns1__RecipeVersionExamineResponse(
	struct soap *soap)
{
	_ns1__RecipeVersionExamineResponse *_p = ::soap_new__ns1__RecipeVersionExamineResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RecipeVersionExamineResponse * soap_new_set__ns1__RecipeVersionExamineResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *RecipeVersionExamineResult)
{
	_ns1__RecipeVersionExamineResponse *_p = ::soap_new__ns1__RecipeVersionExamineResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RecipeVersionExamineResponse::RecipeVersionExamineResult = RecipeVersionExamineResult;
	}
	return _p;
}

inline int soap_write__ns1__RecipeVersionExamineResponse(struct soap *soap, _ns1__RecipeVersionExamineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamineResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamineResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RecipeVersionExamineResponse(struct soap *soap, const char *URL, _ns1__RecipeVersionExamineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamineResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamineResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__RecipeVersionExamineResponse(struct soap *soap, const char *URL, _ns1__RecipeVersionExamineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamineResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamineResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RecipeVersionExamineResponse(struct soap *soap, const char *URL, _ns1__RecipeVersionExamineResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamineResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamineResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RecipeVersionExamineResponse * SOAP_FMAC4 soap_get__ns1__RecipeVersionExamineResponse(struct soap*, _ns1__RecipeVersionExamineResponse *, const char*, const char*);

inline int soap_read__ns1__RecipeVersionExamineResponse(struct soap *soap, _ns1__RecipeVersionExamineResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__RecipeVersionExamineResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RecipeVersionExamineResponse(struct soap *soap, const char *URL, _ns1__RecipeVersionExamineResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__RecipeVersionExamineResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__RecipeVersionExamineResponse(struct soap *soap, _ns1__RecipeVersionExamineResponse *p)
{
	if (::soap_read__ns1__RecipeVersionExamineResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__RecipeVersionExamine_DEFINED
#define SOAP_TYPE__ns1__RecipeVersionExamine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RecipeVersionExamine(struct soap*, const char*, int, const _ns1__RecipeVersionExamine *, const char*);
SOAP_FMAC3 _ns1__RecipeVersionExamine * SOAP_FMAC4 soap_in__ns1__RecipeVersionExamine(struct soap*, const char*, _ns1__RecipeVersionExamine *, const char*);
SOAP_FMAC1 _ns1__RecipeVersionExamine * SOAP_FMAC2 soap_instantiate__ns1__RecipeVersionExamine(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RecipeVersionExamine * soap_new__ns1__RecipeVersionExamine(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RecipeVersionExamine(soap, n, NULL, NULL, NULL);
}

inline _ns1__RecipeVersionExamine * soap_new_req__ns1__RecipeVersionExamine(
	struct soap *soap)
{
	_ns1__RecipeVersionExamine *_p = ::soap_new__ns1__RecipeVersionExamine(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RecipeVersionExamine * soap_new_set__ns1__RecipeVersionExamine(
	struct soap *soap,
	ns1__RecipeVersionExamine *model)
{
	_ns1__RecipeVersionExamine *_p = ::soap_new__ns1__RecipeVersionExamine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RecipeVersionExamine::model = model;
	}
	return _p;
}

inline int soap_write__ns1__RecipeVersionExamine(struct soap *soap, _ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RecipeVersionExamine(struct soap *soap, const char *URL, _ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__RecipeVersionExamine(struct soap *soap, const char *URL, _ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RecipeVersionExamine(struct soap *soap, const char *URL, _ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE__ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RecipeVersionExamine * SOAP_FMAC4 soap_get__ns1__RecipeVersionExamine(struct soap*, _ns1__RecipeVersionExamine *, const char*, const char*);

inline int soap_read__ns1__RecipeVersionExamine(struct soap *soap, _ns1__RecipeVersionExamine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__RecipeVersionExamine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RecipeVersionExamine(struct soap *soap, const char *URL, _ns1__RecipeVersionExamine *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__RecipeVersionExamine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__RecipeVersionExamine(struct soap *soap, _ns1__RecipeVersionExamine *p)
{
	if (::soap_read__ns1__RecipeVersionExamine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecipeListResponse_DEFINED
#define SOAP_TYPE__ns1__GetRecipeListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecipeListResponse(struct soap*, const char*, int, const _ns1__GetRecipeListResponse *, const char*);
SOAP_FMAC3 _ns1__GetRecipeListResponse * SOAP_FMAC4 soap_in__ns1__GetRecipeListResponse(struct soap*, const char*, _ns1__GetRecipeListResponse *, const char*);
SOAP_FMAC1 _ns1__GetRecipeListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRecipeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecipeListResponse * soap_new__ns1__GetRecipeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRecipeListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecipeListResponse * soap_new_req__ns1__GetRecipeListResponse(
	struct soap *soap)
{
	_ns1__GetRecipeListResponse *_p = ::soap_new__ns1__GetRecipeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRecipeListResponse * soap_new_set__ns1__GetRecipeListResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *GetRecipeListResult)
{
	_ns1__GetRecipeListResponse *_p = ::soap_new__ns1__GetRecipeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecipeListResponse::GetRecipeListResult = GetRecipeListResult;
	}
	return _p;
}

inline int soap_write__ns1__GetRecipeListResponse(struct soap *soap, _ns1__GetRecipeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeListResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRecipeListResponse(struct soap *soap, const char *URL, _ns1__GetRecipeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeListResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetRecipeListResponse(struct soap *soap, const char *URL, _ns1__GetRecipeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeListResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRecipeListResponse(struct soap *soap, const char *URL, _ns1__GetRecipeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeListResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecipeListResponse * SOAP_FMAC4 soap_get__ns1__GetRecipeListResponse(struct soap*, _ns1__GetRecipeListResponse *, const char*, const char*);

inline int soap_read__ns1__GetRecipeListResponse(struct soap *soap, _ns1__GetRecipeListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetRecipeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRecipeListResponse(struct soap *soap, const char *URL, _ns1__GetRecipeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetRecipeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetRecipeListResponse(struct soap *soap, _ns1__GetRecipeListResponse *p)
{
	if (::soap_read__ns1__GetRecipeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecipeList_DEFINED
#define SOAP_TYPE__ns1__GetRecipeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecipeList(struct soap*, const char*, int, const _ns1__GetRecipeList *, const char*);
SOAP_FMAC3 _ns1__GetRecipeList * SOAP_FMAC4 soap_in__ns1__GetRecipeList(struct soap*, const char*, _ns1__GetRecipeList *, const char*);
SOAP_FMAC1 _ns1__GetRecipeList * SOAP_FMAC2 soap_instantiate__ns1__GetRecipeList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecipeList * soap_new__ns1__GetRecipeList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRecipeList(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecipeList * soap_new_req__ns1__GetRecipeList(
	struct soap *soap)
{
	_ns1__GetRecipeList *_p = ::soap_new__ns1__GetRecipeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRecipeList * soap_new_set__ns1__GetRecipeList(
	struct soap *soap,
	ns1__RecipeListGet *model)
{
	_ns1__GetRecipeList *_p = ::soap_new__ns1__GetRecipeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecipeList::model = model;
	}
	return _p;
}

inline int soap_write__ns1__GetRecipeList(struct soap *soap, _ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeList", p->soap_type() == SOAP_TYPE__ns1__GetRecipeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRecipeList(struct soap *soap, const char *URL, _ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeList", p->soap_type() == SOAP_TYPE__ns1__GetRecipeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetRecipeList(struct soap *soap, const char *URL, _ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeList", p->soap_type() == SOAP_TYPE__ns1__GetRecipeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRecipeList(struct soap *soap, const char *URL, _ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeList", p->soap_type() == SOAP_TYPE__ns1__GetRecipeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecipeList * SOAP_FMAC4 soap_get__ns1__GetRecipeList(struct soap*, _ns1__GetRecipeList *, const char*, const char*);

inline int soap_read__ns1__GetRecipeList(struct soap *soap, _ns1__GetRecipeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetRecipeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRecipeList(struct soap *soap, const char *URL, _ns1__GetRecipeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetRecipeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetRecipeList(struct soap *soap, _ns1__GetRecipeList *p)
{
	if (::soap_read__ns1__GetRecipeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecipeResponse_DEFINED
#define SOAP_TYPE__ns1__GetRecipeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecipeResponse(struct soap*, const char*, int, const _ns1__GetRecipeResponse *, const char*);
SOAP_FMAC3 _ns1__GetRecipeResponse * SOAP_FMAC4 soap_in__ns1__GetRecipeResponse(struct soap*, const char*, _ns1__GetRecipeResponse *, const char*);
SOAP_FMAC1 _ns1__GetRecipeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRecipeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecipeResponse * soap_new__ns1__GetRecipeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRecipeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecipeResponse * soap_new_req__ns1__GetRecipeResponse(
	struct soap *soap)
{
	_ns1__GetRecipeResponse *_p = ::soap_new__ns1__GetRecipeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRecipeResponse * soap_new_set__ns1__GetRecipeResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfRecipeGetForEqu *GetRecipeResult)
{
	_ns1__GetRecipeResponse *_p = ::soap_new__ns1__GetRecipeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecipeResponse::GetRecipeResult = GetRecipeResult;
	}
	return _p;
}

inline int soap_write__ns1__GetRecipeResponse(struct soap *soap, _ns1__GetRecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRecipeResponse(struct soap *soap, const char *URL, _ns1__GetRecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetRecipeResponse(struct soap *soap, const char *URL, _ns1__GetRecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRecipeResponse(struct soap *soap, const char *URL, _ns1__GetRecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipeResponse", p->soap_type() == SOAP_TYPE__ns1__GetRecipeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecipeResponse * SOAP_FMAC4 soap_get__ns1__GetRecipeResponse(struct soap*, _ns1__GetRecipeResponse *, const char*, const char*);

inline int soap_read__ns1__GetRecipeResponse(struct soap *soap, _ns1__GetRecipeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetRecipeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRecipeResponse(struct soap *soap, const char *URL, _ns1__GetRecipeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetRecipeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetRecipeResponse(struct soap *soap, _ns1__GetRecipeResponse *p)
{
	if (::soap_read__ns1__GetRecipeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GetRecipe_DEFINED
#define SOAP_TYPE__ns1__GetRecipe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRecipe(struct soap*, const char*, int, const _ns1__GetRecipe *, const char*);
SOAP_FMAC3 _ns1__GetRecipe * SOAP_FMAC4 soap_in__ns1__GetRecipe(struct soap*, const char*, _ns1__GetRecipe *, const char*);
SOAP_FMAC1 _ns1__GetRecipe * SOAP_FMAC2 soap_instantiate__ns1__GetRecipe(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRecipe * soap_new__ns1__GetRecipe(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRecipe(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRecipe * soap_new_req__ns1__GetRecipe(
	struct soap *soap)
{
	_ns1__GetRecipe *_p = ::soap_new__ns1__GetRecipe(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRecipe * soap_new_set__ns1__GetRecipe(
	struct soap *soap,
	ns1__RecipeGet *model)
{
	_ns1__GetRecipe *_p = ::soap_new__ns1__GetRecipe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRecipe::model = model;
	}
	return _p;
}

inline int soap_write__ns1__GetRecipe(struct soap *soap, _ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipe", p->soap_type() == SOAP_TYPE__ns1__GetRecipe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRecipe(struct soap *soap, const char *URL, _ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipe", p->soap_type() == SOAP_TYPE__ns1__GetRecipe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetRecipe(struct soap *soap, const char *URL, _ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipe", p->soap_type() == SOAP_TYPE__ns1__GetRecipe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRecipe(struct soap *soap, const char *URL, _ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRecipe", p->soap_type() == SOAP_TYPE__ns1__GetRecipe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRecipe * SOAP_FMAC4 soap_get__ns1__GetRecipe(struct soap*, _ns1__GetRecipe *, const char*, const char*);

inline int soap_read__ns1__GetRecipe(struct soap *soap, _ns1__GetRecipe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetRecipe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRecipe(struct soap *soap, const char *URL, _ns1__GetRecipe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetRecipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetRecipe(struct soap *soap, _ns1__GetRecipe *p)
{
	if (::soap_read__ns1__GetRecipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__RecipeResponse_DEFINED
#define SOAP_TYPE__ns1__RecipeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RecipeResponse(struct soap*, const char*, int, const _ns1__RecipeResponse *, const char*);
SOAP_FMAC3 _ns1__RecipeResponse * SOAP_FMAC4 soap_in__ns1__RecipeResponse(struct soap*, const char*, _ns1__RecipeResponse *, const char*);
SOAP_FMAC1 _ns1__RecipeResponse * SOAP_FMAC2 soap_instantiate__ns1__RecipeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RecipeResponse * soap_new__ns1__RecipeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RecipeResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RecipeResponse * soap_new_req__ns1__RecipeResponse(
	struct soap *soap)
{
	_ns1__RecipeResponse *_p = ::soap_new__ns1__RecipeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RecipeResponse * soap_new_set__ns1__RecipeResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *RecipeResult)
{
	_ns1__RecipeResponse *_p = ::soap_new__ns1__RecipeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RecipeResponse::RecipeResult = RecipeResult;
	}
	return _p;
}

inline int soap_write__ns1__RecipeResponse(struct soap *soap, _ns1__RecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RecipeResponse(struct soap *soap, const char *URL, _ns1__RecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__RecipeResponse(struct soap *soap, const char *URL, _ns1__RecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RecipeResponse(struct soap *soap, const char *URL, _ns1__RecipeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeResponse", p->soap_type() == SOAP_TYPE__ns1__RecipeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RecipeResponse * SOAP_FMAC4 soap_get__ns1__RecipeResponse(struct soap*, _ns1__RecipeResponse *, const char*, const char*);

inline int soap_read__ns1__RecipeResponse(struct soap *soap, _ns1__RecipeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__RecipeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RecipeResponse(struct soap *soap, const char *URL, _ns1__RecipeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__RecipeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__RecipeResponse(struct soap *soap, _ns1__RecipeResponse *p)
{
	if (::soap_read__ns1__RecipeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__Recipe_DEFINED
#define SOAP_TYPE__ns1__Recipe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Recipe(struct soap*, const char*, int, const _ns1__Recipe *, const char*);
SOAP_FMAC3 _ns1__Recipe * SOAP_FMAC4 soap_in__ns1__Recipe(struct soap*, const char*, _ns1__Recipe *, const char*);
SOAP_FMAC1 _ns1__Recipe * SOAP_FMAC2 soap_instantiate__ns1__Recipe(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Recipe * soap_new__ns1__Recipe(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Recipe(soap, n, NULL, NULL, NULL);
}

inline _ns1__Recipe * soap_new_req__ns1__Recipe(
	struct soap *soap)
{
	_ns1__Recipe *_p = ::soap_new__ns1__Recipe(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Recipe * soap_new_set__ns1__Recipe(
	struct soap *soap,
	ns1__Recipe *model)
{
	_ns1__Recipe *_p = ::soap_new__ns1__Recipe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Recipe::model = model;
	}
	return _p;
}

inline int soap_write__ns1__Recipe(struct soap *soap, _ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE__ns1__Recipe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Recipe(struct soap *soap, const char *URL, _ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE__ns1__Recipe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Recipe(struct soap *soap, const char *URL, _ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE__ns1__Recipe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Recipe(struct soap *soap, const char *URL, _ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE__ns1__Recipe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Recipe * SOAP_FMAC4 soap_get__ns1__Recipe(struct soap*, _ns1__Recipe *, const char*, const char*);

inline int soap_read__ns1__Recipe(struct soap *soap, _ns1__Recipe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Recipe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Recipe(struct soap *soap, const char *URL, _ns1__Recipe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Recipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Recipe(struct soap *soap, _ns1__Recipe *p)
{
	if (::soap_read__ns1__Recipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundMoreResponse_DEFINED
#define SOAP_TYPE__ns1__OutboundMoreResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundMoreResponse(struct soap*, const char*, int, const _ns1__OutboundMoreResponse *, const char*);
SOAP_FMAC3 _ns1__OutboundMoreResponse * SOAP_FMAC4 soap_in__ns1__OutboundMoreResponse(struct soap*, const char*, _ns1__OutboundMoreResponse *, const char*);
SOAP_FMAC1 _ns1__OutboundMoreResponse * SOAP_FMAC2 soap_instantiate__ns1__OutboundMoreResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundMoreResponse * soap_new__ns1__OutboundMoreResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundMoreResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundMoreResponse * soap_new_req__ns1__OutboundMoreResponse(
	struct soap *soap)
{
	_ns1__OutboundMoreResponse *_p = ::soap_new__ns1__OutboundMoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundMoreResponse * soap_new_set__ns1__OutboundMoreResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *OutboundMoreResult)
{
	_ns1__OutboundMoreResponse *_p = ::soap_new__ns1__OutboundMoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundMoreResponse::OutboundMoreResult = OutboundMoreResult;
	}
	return _p;
}

inline int soap_write__ns1__OutboundMoreResponse(struct soap *soap, _ns1__OutboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundMoreResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundMoreResponse(struct soap *soap, const char *URL, _ns1__OutboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundMoreResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundMoreResponse(struct soap *soap, const char *URL, _ns1__OutboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundMoreResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundMoreResponse(struct soap *soap, const char *URL, _ns1__OutboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundMoreResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundMoreResponse * SOAP_FMAC4 soap_get__ns1__OutboundMoreResponse(struct soap*, _ns1__OutboundMoreResponse *, const char*, const char*);

inline int soap_read__ns1__OutboundMoreResponse(struct soap *soap, _ns1__OutboundMoreResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundMoreResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundMoreResponse(struct soap *soap, const char *URL, _ns1__OutboundMoreResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundMoreResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundMoreResponse(struct soap *soap, _ns1__OutboundMoreResponse *p)
{
	if (::soap_read__ns1__OutboundMoreResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundMore_DEFINED
#define SOAP_TYPE__ns1__OutboundMore_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundMore(struct soap*, const char*, int, const _ns1__OutboundMore *, const char*);
SOAP_FMAC3 _ns1__OutboundMore * SOAP_FMAC4 soap_in__ns1__OutboundMore(struct soap*, const char*, _ns1__OutboundMore *, const char*);
SOAP_FMAC1 _ns1__OutboundMore * SOAP_FMAC2 soap_instantiate__ns1__OutboundMore(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundMore * soap_new__ns1__OutboundMore(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundMore(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundMore * soap_new_req__ns1__OutboundMore(
	struct soap *soap)
{
	_ns1__OutboundMore *_p = ::soap_new__ns1__OutboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundMore * soap_new_set__ns1__OutboundMore(
	struct soap *soap,
	ns1__OutboundMore *model)
{
	_ns1__OutboundMore *_p = ::soap_new__ns1__OutboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundMore::model = model;
	}
	return _p;
}

inline int soap_write__ns1__OutboundMore(struct soap *soap, _ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE__ns1__OutboundMore ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundMore(struct soap *soap, const char *URL, _ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE__ns1__OutboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundMore(struct soap *soap, const char *URL, _ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE__ns1__OutboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundMore(struct soap *soap, const char *URL, _ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE__ns1__OutboundMore ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundMore * SOAP_FMAC4 soap_get__ns1__OutboundMore(struct soap*, _ns1__OutboundMore *, const char*, const char*);

inline int soap_read__ns1__OutboundMore(struct soap *soap, _ns1__OutboundMore *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundMore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundMore(struct soap *soap, const char *URL, _ns1__OutboundMore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundMore(struct soap *soap, _ns1__OutboundMore *p)
{
	if (::soap_read__ns1__OutboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundInSFCOutputQtyResponse_DEFINED
#define SOAP_TYPE__ns1__OutboundInSFCOutputQtyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundInSFCOutputQtyResponse(struct soap*, const char*, int, const _ns1__OutboundInSFCOutputQtyResponse *, const char*);
SOAP_FMAC3 _ns1__OutboundInSFCOutputQtyResponse * SOAP_FMAC4 soap_in__ns1__OutboundInSFCOutputQtyResponse(struct soap*, const char*, _ns1__OutboundInSFCOutputQtyResponse *, const char*);
SOAP_FMAC1 _ns1__OutboundInSFCOutputQtyResponse * SOAP_FMAC2 soap_instantiate__ns1__OutboundInSFCOutputQtyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundInSFCOutputQtyResponse * soap_new__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundInSFCOutputQtyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundInSFCOutputQtyResponse * soap_new_req__ns1__OutboundInSFCOutputQtyResponse(
	struct soap *soap)
{
	_ns1__OutboundInSFCOutputQtyResponse *_p = ::soap_new__ns1__OutboundInSFCOutputQtyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundInSFCOutputQtyResponse * soap_new_set__ns1__OutboundInSFCOutputQtyResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *OutboundInSFCOutputQtyResult)
{
	_ns1__OutboundInSFCOutputQtyResponse *_p = ::soap_new__ns1__OutboundInSFCOutputQtyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundInSFCOutputQtyResponse::OutboundInSFCOutputQtyResult = OutboundInSFCOutputQtyResult;
	}
	return _p;
}

inline int soap_write__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, _ns1__OutboundInSFCOutputQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQtyResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQtyResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQtyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQtyResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQtyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQtyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQtyResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQtyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundInSFCOutputQtyResponse * SOAP_FMAC4 soap_get__ns1__OutboundInSFCOutputQtyResponse(struct soap*, _ns1__OutboundInSFCOutputQtyResponse *, const char*, const char*);

inline int soap_read__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, _ns1__OutboundInSFCOutputQtyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundInSFCOutputQtyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQtyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundInSFCOutputQtyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundInSFCOutputQtyResponse(struct soap *soap, _ns1__OutboundInSFCOutputQtyResponse *p)
{
	if (::soap_read__ns1__OutboundInSFCOutputQtyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundInSFCOutputQty_DEFINED
#define SOAP_TYPE__ns1__OutboundInSFCOutputQty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundInSFCOutputQty(struct soap*, const char*, int, const _ns1__OutboundInSFCOutputQty *, const char*);
SOAP_FMAC3 _ns1__OutboundInSFCOutputQty * SOAP_FMAC4 soap_in__ns1__OutboundInSFCOutputQty(struct soap*, const char*, _ns1__OutboundInSFCOutputQty *, const char*);
SOAP_FMAC1 _ns1__OutboundInSFCOutputQty * SOAP_FMAC2 soap_instantiate__ns1__OutboundInSFCOutputQty(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundInSFCOutputQty * soap_new__ns1__OutboundInSFCOutputQty(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundInSFCOutputQty(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundInSFCOutputQty * soap_new_req__ns1__OutboundInSFCOutputQty(
	struct soap *soap)
{
	_ns1__OutboundInSFCOutputQty *_p = ::soap_new__ns1__OutboundInSFCOutputQty(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundInSFCOutputQty * soap_new_set__ns1__OutboundInSFCOutputQty(
	struct soap *soap,
	ns1__OutboundInSFCOutputQty *model)
{
	_ns1__OutboundInSFCOutputQty *_p = ::soap_new__ns1__OutboundInSFCOutputQty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundInSFCOutputQty::model = model;
	}
	return _p;
}

inline int soap_write__ns1__OutboundInSFCOutputQty(struct soap *soap, _ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE__ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundInSFCOutputQty * SOAP_FMAC4 soap_get__ns1__OutboundInSFCOutputQty(struct soap*, _ns1__OutboundInSFCOutputQty *, const char*, const char*);

inline int soap_read__ns1__OutboundInSFCOutputQty(struct soap *soap, _ns1__OutboundInSFCOutputQty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundInSFCOutputQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, _ns1__OutboundInSFCOutputQty *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundInSFCOutputQty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundInSFCOutputQty(struct soap *soap, _ns1__OutboundInSFCOutputQty *p)
{
	if (::soap_read__ns1__OutboundInSFCOutputQty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundInLaminatingResponse_DEFINED
#define SOAP_TYPE__ns1__OutboundInLaminatingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundInLaminatingResponse(struct soap*, const char*, int, const _ns1__OutboundInLaminatingResponse *, const char*);
SOAP_FMAC3 _ns1__OutboundInLaminatingResponse * SOAP_FMAC4 soap_in__ns1__OutboundInLaminatingResponse(struct soap*, const char*, _ns1__OutboundInLaminatingResponse *, const char*);
SOAP_FMAC1 _ns1__OutboundInLaminatingResponse * SOAP_FMAC2 soap_instantiate__ns1__OutboundInLaminatingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundInLaminatingResponse * soap_new__ns1__OutboundInLaminatingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundInLaminatingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundInLaminatingResponse * soap_new_req__ns1__OutboundInLaminatingResponse(
	struct soap *soap)
{
	_ns1__OutboundInLaminatingResponse *_p = ::soap_new__ns1__OutboundInLaminatingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundInLaminatingResponse * soap_new_set__ns1__OutboundInLaminatingResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *OutboundInLaminatingResult)
{
	_ns1__OutboundInLaminatingResponse *_p = ::soap_new__ns1__OutboundInLaminatingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundInLaminatingResponse::OutboundInLaminatingResult = OutboundInLaminatingResult;
	}
	return _p;
}

inline int soap_write__ns1__OutboundInLaminatingResponse(struct soap *soap, _ns1__OutboundInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminatingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundInLaminatingResponse(struct soap *soap, const char *URL, _ns1__OutboundInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminatingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundInLaminatingResponse(struct soap *soap, const char *URL, _ns1__OutboundInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminatingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundInLaminatingResponse(struct soap *soap, const char *URL, _ns1__OutboundInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminatingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundInLaminatingResponse * SOAP_FMAC4 soap_get__ns1__OutboundInLaminatingResponse(struct soap*, _ns1__OutboundInLaminatingResponse *, const char*, const char*);

inline int soap_read__ns1__OutboundInLaminatingResponse(struct soap *soap, _ns1__OutboundInLaminatingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundInLaminatingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundInLaminatingResponse(struct soap *soap, const char *URL, _ns1__OutboundInLaminatingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundInLaminatingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundInLaminatingResponse(struct soap *soap, _ns1__OutboundInLaminatingResponse *p)
{
	if (::soap_read__ns1__OutboundInLaminatingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundInLaminating_DEFINED
#define SOAP_TYPE__ns1__OutboundInLaminating_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundInLaminating(struct soap*, const char*, int, const _ns1__OutboundInLaminating *, const char*);
SOAP_FMAC3 _ns1__OutboundInLaminating * SOAP_FMAC4 soap_in__ns1__OutboundInLaminating(struct soap*, const char*, _ns1__OutboundInLaminating *, const char*);
SOAP_FMAC1 _ns1__OutboundInLaminating * SOAP_FMAC2 soap_instantiate__ns1__OutboundInLaminating(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundInLaminating * soap_new__ns1__OutboundInLaminating(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundInLaminating(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundInLaminating * soap_new_req__ns1__OutboundInLaminating(
	struct soap *soap)
{
	_ns1__OutboundInLaminating *_p = ::soap_new__ns1__OutboundInLaminating(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundInLaminating * soap_new_set__ns1__OutboundInLaminating(
	struct soap *soap,
	ns1__OutboundInLaminating *model)
{
	_ns1__OutboundInLaminating *_p = ::soap_new__ns1__OutboundInLaminating(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundInLaminating::model = model;
	}
	return _p;
}

inline int soap_write__ns1__OutboundInLaminating(struct soap *soap, _ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundInLaminating(struct soap *soap, const char *URL, _ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundInLaminating(struct soap *soap, const char *URL, _ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundInLaminating(struct soap *soap, const char *URL, _ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE__ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundInLaminating * SOAP_FMAC4 soap_get__ns1__OutboundInLaminating(struct soap*, _ns1__OutboundInLaminating *, const char*, const char*);

inline int soap_read__ns1__OutboundInLaminating(struct soap *soap, _ns1__OutboundInLaminating *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundInLaminating(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundInLaminating(struct soap *soap, const char *URL, _ns1__OutboundInLaminating *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundInLaminating(struct soap *soap, _ns1__OutboundInLaminating *p)
{
	if (::soap_read__ns1__OutboundInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OutboundResponse_DEFINED
#define SOAP_TYPE__ns1__OutboundResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OutboundResponse(struct soap*, const char*, int, const _ns1__OutboundResponse *, const char*);
SOAP_FMAC3 _ns1__OutboundResponse * SOAP_FMAC4 soap_in__ns1__OutboundResponse(struct soap*, const char*, _ns1__OutboundResponse *, const char*);
SOAP_FMAC1 _ns1__OutboundResponse * SOAP_FMAC2 soap_instantiate__ns1__OutboundResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OutboundResponse * soap_new__ns1__OutboundResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OutboundResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OutboundResponse * soap_new_req__ns1__OutboundResponse(
	struct soap *soap)
{
	_ns1__OutboundResponse *_p = ::soap_new__ns1__OutboundResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OutboundResponse * soap_new_set__ns1__OutboundResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *OutboundResult)
{
	_ns1__OutboundResponse *_p = ::soap_new__ns1__OutboundResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OutboundResponse::OutboundResult = OutboundResult;
	}
	return _p;
}

inline int soap_write__ns1__OutboundResponse(struct soap *soap, _ns1__OutboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OutboundResponse(struct soap *soap, const char *URL, _ns1__OutboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OutboundResponse(struct soap *soap, const char *URL, _ns1__OutboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OutboundResponse(struct soap *soap, const char *URL, _ns1__OutboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundResponse", p->soap_type() == SOAP_TYPE__ns1__OutboundResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OutboundResponse * SOAP_FMAC4 soap_get__ns1__OutboundResponse(struct soap*, _ns1__OutboundResponse *, const char*, const char*);

inline int soap_read__ns1__OutboundResponse(struct soap *soap, _ns1__OutboundResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OutboundResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OutboundResponse(struct soap *soap, const char *URL, _ns1__OutboundResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OutboundResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OutboundResponse(struct soap *soap, _ns1__OutboundResponse *p)
{
	if (::soap_read__ns1__OutboundResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__Outbound_DEFINED
#define SOAP_TYPE__ns1__Outbound_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Outbound(struct soap*, const char*, int, const _ns1__Outbound *, const char*);
SOAP_FMAC3 _ns1__Outbound * SOAP_FMAC4 soap_in__ns1__Outbound(struct soap*, const char*, _ns1__Outbound *, const char*);
SOAP_FMAC1 _ns1__Outbound * SOAP_FMAC2 soap_instantiate__ns1__Outbound(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Outbound * soap_new__ns1__Outbound(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Outbound(soap, n, NULL, NULL, NULL);
}

inline _ns1__Outbound * soap_new_req__ns1__Outbound(
	struct soap *soap)
{
	_ns1__Outbound *_p = ::soap_new__ns1__Outbound(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Outbound * soap_new_set__ns1__Outbound(
	struct soap *soap,
	ns1__Outbound *model)
{
	_ns1__Outbound *_p = ::soap_new__ns1__Outbound(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Outbound::model = model;
	}
	return _p;
}

inline int soap_write__ns1__Outbound(struct soap *soap, _ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE__ns1__Outbound ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Outbound(struct soap *soap, const char *URL, _ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE__ns1__Outbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Outbound(struct soap *soap, const char *URL, _ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE__ns1__Outbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Outbound(struct soap *soap, const char *URL, _ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE__ns1__Outbound ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Outbound * SOAP_FMAC4 soap_get__ns1__Outbound(struct soap*, _ns1__Outbound *, const char*, const char*);

inline int soap_read__ns1__Outbound(struct soap *soap, _ns1__Outbound *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Outbound(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Outbound(struct soap *soap, const char *URL, _ns1__Outbound *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Outbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Outbound(struct soap *soap, _ns1__Outbound *p)
{
	if (::soap_read__ns1__Outbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OperatorLoginResponse_DEFINED
#define SOAP_TYPE__ns1__OperatorLoginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OperatorLoginResponse(struct soap*, const char*, int, const _ns1__OperatorLoginResponse *, const char*);
SOAP_FMAC3 _ns1__OperatorLoginResponse * SOAP_FMAC4 soap_in__ns1__OperatorLoginResponse(struct soap*, const char*, _ns1__OperatorLoginResponse *, const char*);
SOAP_FMAC1 _ns1__OperatorLoginResponse * SOAP_FMAC2 soap_instantiate__ns1__OperatorLoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OperatorLoginResponse * soap_new__ns1__OperatorLoginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OperatorLoginResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OperatorLoginResponse * soap_new_req__ns1__OperatorLoginResponse(
	struct soap *soap)
{
	_ns1__OperatorLoginResponse *_p = ::soap_new__ns1__OperatorLoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OperatorLoginResponse * soap_new_set__ns1__OperatorLoginResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *OperatorLoginResult)
{
	_ns1__OperatorLoginResponse *_p = ::soap_new__ns1__OperatorLoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OperatorLoginResponse::OperatorLoginResult = OperatorLoginResult;
	}
	return _p;
}

inline int soap_write__ns1__OperatorLoginResponse(struct soap *soap, _ns1__OperatorLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLoginResponse", p->soap_type() == SOAP_TYPE__ns1__OperatorLoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OperatorLoginResponse(struct soap *soap, const char *URL, _ns1__OperatorLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLoginResponse", p->soap_type() == SOAP_TYPE__ns1__OperatorLoginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OperatorLoginResponse(struct soap *soap, const char *URL, _ns1__OperatorLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLoginResponse", p->soap_type() == SOAP_TYPE__ns1__OperatorLoginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OperatorLoginResponse(struct soap *soap, const char *URL, _ns1__OperatorLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLoginResponse", p->soap_type() == SOAP_TYPE__ns1__OperatorLoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OperatorLoginResponse * SOAP_FMAC4 soap_get__ns1__OperatorLoginResponse(struct soap*, _ns1__OperatorLoginResponse *, const char*, const char*);

inline int soap_read__ns1__OperatorLoginResponse(struct soap *soap, _ns1__OperatorLoginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OperatorLoginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OperatorLoginResponse(struct soap *soap, const char *URL, _ns1__OperatorLoginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OperatorLoginResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OperatorLoginResponse(struct soap *soap, _ns1__OperatorLoginResponse *p)
{
	if (::soap_read__ns1__OperatorLoginResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__OperatorLogin_DEFINED
#define SOAP_TYPE__ns1__OperatorLogin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OperatorLogin(struct soap*, const char*, int, const _ns1__OperatorLogin *, const char*);
SOAP_FMAC3 _ns1__OperatorLogin * SOAP_FMAC4 soap_in__ns1__OperatorLogin(struct soap*, const char*, _ns1__OperatorLogin *, const char*);
SOAP_FMAC1 _ns1__OperatorLogin * SOAP_FMAC2 soap_instantiate__ns1__OperatorLogin(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OperatorLogin * soap_new__ns1__OperatorLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__OperatorLogin(soap, n, NULL, NULL, NULL);
}

inline _ns1__OperatorLogin * soap_new_req__ns1__OperatorLogin(
	struct soap *soap)
{
	_ns1__OperatorLogin *_p = ::soap_new__ns1__OperatorLogin(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OperatorLogin * soap_new_set__ns1__OperatorLogin(
	struct soap *soap,
	ns1__OperatorLogin *model)
{
	_ns1__OperatorLogin *_p = ::soap_new__ns1__OperatorLogin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OperatorLogin::model = model;
	}
	return _p;
}

inline int soap_write__ns1__OperatorLogin(struct soap *soap, _ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE__ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OperatorLogin(struct soap *soap, const char *URL, _ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE__ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__OperatorLogin(struct soap *soap, const char *URL, _ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE__ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OperatorLogin(struct soap *soap, const char *URL, _ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE__ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OperatorLogin * SOAP_FMAC4 soap_get__ns1__OperatorLogin(struct soap*, _ns1__OperatorLogin *, const char*, const char*);

inline int soap_read__ns1__OperatorLogin(struct soap *soap, _ns1__OperatorLogin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__OperatorLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OperatorLogin(struct soap *soap, const char *URL, _ns1__OperatorLogin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__OperatorLogin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__OperatorLogin(struct soap *soap, _ns1__OperatorLogin *p)
{
	if (::soap_read__ns1__OperatorLogin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundMoreResponse_DEFINED
#define SOAP_TYPE__ns1__InboundMoreResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundMoreResponse(struct soap*, const char*, int, const _ns1__InboundMoreResponse *, const char*);
SOAP_FMAC3 _ns1__InboundMoreResponse * SOAP_FMAC4 soap_in__ns1__InboundMoreResponse(struct soap*, const char*, _ns1__InboundMoreResponse *, const char*);
SOAP_FMAC1 _ns1__InboundMoreResponse * SOAP_FMAC2 soap_instantiate__ns1__InboundMoreResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundMoreResponse * soap_new__ns1__InboundMoreResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundMoreResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundMoreResponse * soap_new_req__ns1__InboundMoreResponse(
	struct soap *soap)
{
	_ns1__InboundMoreResponse *_p = ::soap_new__ns1__InboundMoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundMoreResponse * soap_new_set__ns1__InboundMoreResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *InboundMoreResult)
{
	_ns1__InboundMoreResponse *_p = ::soap_new__ns1__InboundMoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundMoreResponse::InboundMoreResult = InboundMoreResult;
	}
	return _p;
}

inline int soap_write__ns1__InboundMoreResponse(struct soap *soap, _ns1__InboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__InboundMoreResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundMoreResponse(struct soap *soap, const char *URL, _ns1__InboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__InboundMoreResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundMoreResponse(struct soap *soap, const char *URL, _ns1__InboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__InboundMoreResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundMoreResponse(struct soap *soap, const char *URL, _ns1__InboundMoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMoreResponse", p->soap_type() == SOAP_TYPE__ns1__InboundMoreResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundMoreResponse * SOAP_FMAC4 soap_get__ns1__InboundMoreResponse(struct soap*, _ns1__InboundMoreResponse *, const char*, const char*);

inline int soap_read__ns1__InboundMoreResponse(struct soap *soap, _ns1__InboundMoreResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundMoreResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundMoreResponse(struct soap *soap, const char *URL, _ns1__InboundMoreResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundMoreResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundMoreResponse(struct soap *soap, _ns1__InboundMoreResponse *p)
{
	if (::soap_read__ns1__InboundMoreResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundMore_DEFINED
#define SOAP_TYPE__ns1__InboundMore_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundMore(struct soap*, const char*, int, const _ns1__InboundMore *, const char*);
SOAP_FMAC3 _ns1__InboundMore * SOAP_FMAC4 soap_in__ns1__InboundMore(struct soap*, const char*, _ns1__InboundMore *, const char*);
SOAP_FMAC1 _ns1__InboundMore * SOAP_FMAC2 soap_instantiate__ns1__InboundMore(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundMore * soap_new__ns1__InboundMore(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundMore(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundMore * soap_new_req__ns1__InboundMore(
	struct soap *soap)
{
	_ns1__InboundMore *_p = ::soap_new__ns1__InboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundMore * soap_new_set__ns1__InboundMore(
	struct soap *soap,
	ns1__InboundMore *model)
{
	_ns1__InboundMore *_p = ::soap_new__ns1__InboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundMore::model = model;
	}
	return _p;
}

inline int soap_write__ns1__InboundMore(struct soap *soap, _ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE__ns1__InboundMore ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundMore(struct soap *soap, const char *URL, _ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE__ns1__InboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundMore(struct soap *soap, const char *URL, _ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE__ns1__InboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundMore(struct soap *soap, const char *URL, _ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE__ns1__InboundMore ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundMore * SOAP_FMAC4 soap_get__ns1__InboundMore(struct soap*, _ns1__InboundMore *, const char*, const char*);

inline int soap_read__ns1__InboundMore(struct soap *soap, _ns1__InboundMore *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundMore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundMore(struct soap *soap, const char *URL, _ns1__InboundMore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundMore(struct soap *soap, _ns1__InboundMore *p)
{
	if (::soap_read__ns1__InboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundInTwoInjectionResponse_DEFINED
#define SOAP_TYPE__ns1__InboundInTwoInjectionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundInTwoInjectionResponse(struct soap*, const char*, int, const _ns1__InboundInTwoInjectionResponse *, const char*);
SOAP_FMAC3 _ns1__InboundInTwoInjectionResponse * SOAP_FMAC4 soap_in__ns1__InboundInTwoInjectionResponse(struct soap*, const char*, _ns1__InboundInTwoInjectionResponse *, const char*);
SOAP_FMAC1 _ns1__InboundInTwoInjectionResponse * SOAP_FMAC2 soap_instantiate__ns1__InboundInTwoInjectionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundInTwoInjectionResponse * soap_new__ns1__InboundInTwoInjectionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundInTwoInjectionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundInTwoInjectionResponse * soap_new_req__ns1__InboundInTwoInjectionResponse(
	struct soap *soap)
{
	_ns1__InboundInTwoInjectionResponse *_p = ::soap_new__ns1__InboundInTwoInjectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundInTwoInjectionResponse * soap_new_set__ns1__InboundInTwoInjectionResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *InboundInTwoInjectionResult)
{
	_ns1__InboundInTwoInjectionResponse *_p = ::soap_new__ns1__InboundInTwoInjectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundInTwoInjectionResponse::InboundInTwoInjectionResult = InboundInTwoInjectionResult;
	}
	return _p;
}

inline int soap_write__ns1__InboundInTwoInjectionResponse(struct soap *soap, _ns1__InboundInTwoInjectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundInTwoInjectionResponse(struct soap *soap, const char *URL, _ns1__InboundInTwoInjectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjectionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundInTwoInjectionResponse(struct soap *soap, const char *URL, _ns1__InboundInTwoInjectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjectionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundInTwoInjectionResponse(struct soap *soap, const char *URL, _ns1__InboundInTwoInjectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundInTwoInjectionResponse * SOAP_FMAC4 soap_get__ns1__InboundInTwoInjectionResponse(struct soap*, _ns1__InboundInTwoInjectionResponse *, const char*, const char*);

inline int soap_read__ns1__InboundInTwoInjectionResponse(struct soap *soap, _ns1__InboundInTwoInjectionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundInTwoInjectionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundInTwoInjectionResponse(struct soap *soap, const char *URL, _ns1__InboundInTwoInjectionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundInTwoInjectionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundInTwoInjectionResponse(struct soap *soap, _ns1__InboundInTwoInjectionResponse *p)
{
	if (::soap_read__ns1__InboundInTwoInjectionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundInTwoInjection_DEFINED
#define SOAP_TYPE__ns1__InboundInTwoInjection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundInTwoInjection(struct soap*, const char*, int, const _ns1__InboundInTwoInjection *, const char*);
SOAP_FMAC3 _ns1__InboundInTwoInjection * SOAP_FMAC4 soap_in__ns1__InboundInTwoInjection(struct soap*, const char*, _ns1__InboundInTwoInjection *, const char*);
SOAP_FMAC1 _ns1__InboundInTwoInjection * SOAP_FMAC2 soap_instantiate__ns1__InboundInTwoInjection(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundInTwoInjection * soap_new__ns1__InboundInTwoInjection(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundInTwoInjection(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundInTwoInjection * soap_new_req__ns1__InboundInTwoInjection(
	struct soap *soap)
{
	_ns1__InboundInTwoInjection *_p = ::soap_new__ns1__InboundInTwoInjection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundInTwoInjection * soap_new_set__ns1__InboundInTwoInjection(
	struct soap *soap,
	ns1__InboundInTwoInjection *model)
{
	_ns1__InboundInTwoInjection *_p = ::soap_new__ns1__InboundInTwoInjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundInTwoInjection::model = model;
	}
	return _p;
}

inline int soap_write__ns1__InboundInTwoInjection(struct soap *soap, _ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundInTwoInjection(struct soap *soap, const char *URL, _ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundInTwoInjection(struct soap *soap, const char *URL, _ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundInTwoInjection(struct soap *soap, const char *URL, _ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE__ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundInTwoInjection * SOAP_FMAC4 soap_get__ns1__InboundInTwoInjection(struct soap*, _ns1__InboundInTwoInjection *, const char*, const char*);

inline int soap_read__ns1__InboundInTwoInjection(struct soap *soap, _ns1__InboundInTwoInjection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundInTwoInjection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundInTwoInjection(struct soap *soap, const char *URL, _ns1__InboundInTwoInjection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundInTwoInjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundInTwoInjection(struct soap *soap, _ns1__InboundInTwoInjection *p)
{
	if (::soap_read__ns1__InboundInTwoInjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundInSFCContainerResponse_DEFINED
#define SOAP_TYPE__ns1__InboundInSFCContainerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundInSFCContainerResponse(struct soap*, const char*, int, const _ns1__InboundInSFCContainerResponse *, const char*);
SOAP_FMAC3 _ns1__InboundInSFCContainerResponse * SOAP_FMAC4 soap_in__ns1__InboundInSFCContainerResponse(struct soap*, const char*, _ns1__InboundInSFCContainerResponse *, const char*);
SOAP_FMAC1 _ns1__InboundInSFCContainerResponse * SOAP_FMAC2 soap_instantiate__ns1__InboundInSFCContainerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundInSFCContainerResponse * soap_new__ns1__InboundInSFCContainerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundInSFCContainerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundInSFCContainerResponse * soap_new_req__ns1__InboundInSFCContainerResponse(
	struct soap *soap)
{
	_ns1__InboundInSFCContainerResponse *_p = ::soap_new__ns1__InboundInSFCContainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundInSFCContainerResponse * soap_new_set__ns1__InboundInSFCContainerResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *InboundInSFCContainerResult)
{
	_ns1__InboundInSFCContainerResponse *_p = ::soap_new__ns1__InboundInSFCContainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundInSFCContainerResponse::InboundInSFCContainerResult = InboundInSFCContainerResult;
	}
	return _p;
}

inline int soap_write__ns1__InboundInSFCContainerResponse(struct soap *soap, _ns1__InboundInSFCContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundInSFCContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInSFCContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundInSFCContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInSFCContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundInSFCContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInSFCContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundInSFCContainerResponse * SOAP_FMAC4 soap_get__ns1__InboundInSFCContainerResponse(struct soap*, _ns1__InboundInSFCContainerResponse *, const char*, const char*);

inline int soap_read__ns1__InboundInSFCContainerResponse(struct soap *soap, _ns1__InboundInSFCContainerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundInSFCContainerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundInSFCContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInSFCContainerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundInSFCContainerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundInSFCContainerResponse(struct soap *soap, _ns1__InboundInSFCContainerResponse *p)
{
	if (::soap_read__ns1__InboundInSFCContainerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundInSFCContainer_DEFINED
#define SOAP_TYPE__ns1__InboundInSFCContainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundInSFCContainer(struct soap*, const char*, int, const _ns1__InboundInSFCContainer *, const char*);
SOAP_FMAC3 _ns1__InboundInSFCContainer * SOAP_FMAC4 soap_in__ns1__InboundInSFCContainer(struct soap*, const char*, _ns1__InboundInSFCContainer *, const char*);
SOAP_FMAC1 _ns1__InboundInSFCContainer * SOAP_FMAC2 soap_instantiate__ns1__InboundInSFCContainer(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundInSFCContainer * soap_new__ns1__InboundInSFCContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundInSFCContainer(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundInSFCContainer * soap_new_req__ns1__InboundInSFCContainer(
	struct soap *soap)
{
	_ns1__InboundInSFCContainer *_p = ::soap_new__ns1__InboundInSFCContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundInSFCContainer * soap_new_set__ns1__InboundInSFCContainer(
	struct soap *soap,
	ns1__InboundInSFCContainer *model)
{
	_ns1__InboundInSFCContainer *_p = ::soap_new__ns1__InboundInSFCContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundInSFCContainer::model = model;
	}
	return _p;
}

inline int soap_write__ns1__InboundInSFCContainer(struct soap *soap, _ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundInSFCContainer(struct soap *soap, const char *URL, _ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundInSFCContainer(struct soap *soap, const char *URL, _ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundInSFCContainer(struct soap *soap, const char *URL, _ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundInSFCContainer * SOAP_FMAC4 soap_get__ns1__InboundInSFCContainer(struct soap*, _ns1__InboundInSFCContainer *, const char*, const char*);

inline int soap_read__ns1__InboundInSFCContainer(struct soap *soap, _ns1__InboundInSFCContainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundInSFCContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundInSFCContainer(struct soap *soap, const char *URL, _ns1__InboundInSFCContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundInSFCContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundInSFCContainer(struct soap *soap, _ns1__InboundInSFCContainer *p)
{
	if (::soap_read__ns1__InboundInSFCContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundInContainerResponse_DEFINED
#define SOAP_TYPE__ns1__InboundInContainerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundInContainerResponse(struct soap*, const char*, int, const _ns1__InboundInContainerResponse *, const char*);
SOAP_FMAC3 _ns1__InboundInContainerResponse * SOAP_FMAC4 soap_in__ns1__InboundInContainerResponse(struct soap*, const char*, _ns1__InboundInContainerResponse *, const char*);
SOAP_FMAC1 _ns1__InboundInContainerResponse * SOAP_FMAC2 soap_instantiate__ns1__InboundInContainerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundInContainerResponse * soap_new__ns1__InboundInContainerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundInContainerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundInContainerResponse * soap_new_req__ns1__InboundInContainerResponse(
	struct soap *soap)
{
	_ns1__InboundInContainerResponse *_p = ::soap_new__ns1__InboundInContainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundInContainerResponse * soap_new_set__ns1__InboundInContainerResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *InboundInContainerResult)
{
	_ns1__InboundInContainerResponse *_p = ::soap_new__ns1__InboundInContainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundInContainerResponse::InboundInContainerResult = InboundInContainerResult;
	}
	return _p;
}

inline int soap_write__ns1__InboundInContainerResponse(struct soap *soap, _ns1__InboundInContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInContainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundInContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInContainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundInContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInContainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundInContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainerResponse", p->soap_type() == SOAP_TYPE__ns1__InboundInContainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundInContainerResponse * SOAP_FMAC4 soap_get__ns1__InboundInContainerResponse(struct soap*, _ns1__InboundInContainerResponse *, const char*, const char*);

inline int soap_read__ns1__InboundInContainerResponse(struct soap *soap, _ns1__InboundInContainerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundInContainerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundInContainerResponse(struct soap *soap, const char *URL, _ns1__InboundInContainerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundInContainerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundInContainerResponse(struct soap *soap, _ns1__InboundInContainerResponse *p)
{
	if (::soap_read__ns1__InboundInContainerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundInContainer_DEFINED
#define SOAP_TYPE__ns1__InboundInContainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundInContainer(struct soap*, const char*, int, const _ns1__InboundInContainer *, const char*);
SOAP_FMAC3 _ns1__InboundInContainer * SOAP_FMAC4 soap_in__ns1__InboundInContainer(struct soap*, const char*, _ns1__InboundInContainer *, const char*);
SOAP_FMAC1 _ns1__InboundInContainer * SOAP_FMAC2 soap_instantiate__ns1__InboundInContainer(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundInContainer * soap_new__ns1__InboundInContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundInContainer(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundInContainer * soap_new_req__ns1__InboundInContainer(
	struct soap *soap)
{
	_ns1__InboundInContainer *_p = ::soap_new__ns1__InboundInContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundInContainer * soap_new_set__ns1__InboundInContainer(
	struct soap *soap,
	ns1__InboundInContainer *model)
{
	_ns1__InboundInContainer *_p = ::soap_new__ns1__InboundInContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundInContainer::model = model;
	}
	return _p;
}

inline int soap_write__ns1__InboundInContainer(struct soap *soap, _ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundInContainer(struct soap *soap, const char *URL, _ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundInContainer(struct soap *soap, const char *URL, _ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundInContainer(struct soap *soap, const char *URL, _ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE__ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundInContainer * SOAP_FMAC4 soap_get__ns1__InboundInContainer(struct soap*, _ns1__InboundInContainer *, const char*, const char*);

inline int soap_read__ns1__InboundInContainer(struct soap *soap, _ns1__InboundInContainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundInContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundInContainer(struct soap *soap, const char *URL, _ns1__InboundInContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundInContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundInContainer(struct soap *soap, _ns1__InboundInContainer *p)
{
	if (::soap_read__ns1__InboundInContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__InboundResponse_DEFINED
#define SOAP_TYPE__ns1__InboundResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InboundResponse(struct soap*, const char*, int, const _ns1__InboundResponse *, const char*);
SOAP_FMAC3 _ns1__InboundResponse * SOAP_FMAC4 soap_in__ns1__InboundResponse(struct soap*, const char*, _ns1__InboundResponse *, const char*);
SOAP_FMAC1 _ns1__InboundResponse * SOAP_FMAC2 soap_instantiate__ns1__InboundResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InboundResponse * soap_new__ns1__InboundResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InboundResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InboundResponse * soap_new_req__ns1__InboundResponse(
	struct soap *soap)
{
	_ns1__InboundResponse *_p = ::soap_new__ns1__InboundResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InboundResponse * soap_new_set__ns1__InboundResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *InboundResult)
{
	_ns1__InboundResponse *_p = ::soap_new__ns1__InboundResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InboundResponse::InboundResult = InboundResult;
	}
	return _p;
}

inline int soap_write__ns1__InboundResponse(struct soap *soap, _ns1__InboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundResponse", p->soap_type() == SOAP_TYPE__ns1__InboundResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InboundResponse(struct soap *soap, const char *URL, _ns1__InboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundResponse", p->soap_type() == SOAP_TYPE__ns1__InboundResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__InboundResponse(struct soap *soap, const char *URL, _ns1__InboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundResponse", p->soap_type() == SOAP_TYPE__ns1__InboundResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InboundResponse(struct soap *soap, const char *URL, _ns1__InboundResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundResponse", p->soap_type() == SOAP_TYPE__ns1__InboundResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InboundResponse * SOAP_FMAC4 soap_get__ns1__InboundResponse(struct soap*, _ns1__InboundResponse *, const char*, const char*);

inline int soap_read__ns1__InboundResponse(struct soap *soap, _ns1__InboundResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__InboundResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InboundResponse(struct soap *soap, const char *URL, _ns1__InboundResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__InboundResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__InboundResponse(struct soap *soap, _ns1__InboundResponse *p)
{
	if (::soap_read__ns1__InboundResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__Inbound_DEFINED
#define SOAP_TYPE__ns1__Inbound_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Inbound(struct soap*, const char*, int, const _ns1__Inbound *, const char*);
SOAP_FMAC3 _ns1__Inbound * SOAP_FMAC4 soap_in__ns1__Inbound(struct soap*, const char*, _ns1__Inbound *, const char*);
SOAP_FMAC1 _ns1__Inbound * SOAP_FMAC2 soap_instantiate__ns1__Inbound(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Inbound * soap_new__ns1__Inbound(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Inbound(soap, n, NULL, NULL, NULL);
}

inline _ns1__Inbound * soap_new_req__ns1__Inbound(
	struct soap *soap)
{
	_ns1__Inbound *_p = ::soap_new__ns1__Inbound(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Inbound * soap_new_set__ns1__Inbound(
	struct soap *soap,
	ns1__Inbound *model)
{
	_ns1__Inbound *_p = ::soap_new__ns1__Inbound(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Inbound::model = model;
	}
	return _p;
}

inline int soap_write__ns1__Inbound(struct soap *soap, _ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE__ns1__Inbound ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Inbound(struct soap *soap, const char *URL, _ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE__ns1__Inbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Inbound(struct soap *soap, const char *URL, _ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE__ns1__Inbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Inbound(struct soap *soap, const char *URL, _ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE__ns1__Inbound ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Inbound * SOAP_FMAC4 soap_get__ns1__Inbound(struct soap*, _ns1__Inbound *, const char*, const char*);

inline int soap_read__ns1__Inbound(struct soap *soap, _ns1__Inbound *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Inbound(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Inbound(struct soap *soap, const char *URL, _ns1__Inbound *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Inbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Inbound(struct soap *soap, _ns1__Inbound *p)
{
	if (::soap_read__ns1__Inbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__HeartbeatResponse_DEFINED
#define SOAP_TYPE__ns1__HeartbeatResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HeartbeatResponse(struct soap*, const char*, int, const _ns1__HeartbeatResponse *, const char*);
SOAP_FMAC3 _ns1__HeartbeatResponse * SOAP_FMAC4 soap_in__ns1__HeartbeatResponse(struct soap*, const char*, _ns1__HeartbeatResponse *, const char*);
SOAP_FMAC1 _ns1__HeartbeatResponse * SOAP_FMAC2 soap_instantiate__ns1__HeartbeatResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__HeartbeatResponse * soap_new__ns1__HeartbeatResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__HeartbeatResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__HeartbeatResponse * soap_new_req__ns1__HeartbeatResponse(
	struct soap *soap)
{
	_ns1__HeartbeatResponse *_p = ::soap_new__ns1__HeartbeatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__HeartbeatResponse * soap_new_set__ns1__HeartbeatResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *HeartbeatResult)
{
	_ns1__HeartbeatResponse *_p = ::soap_new__ns1__HeartbeatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__HeartbeatResponse::HeartbeatResult = HeartbeatResult;
	}
	return _p;
}

inline int soap_write__ns1__HeartbeatResponse(struct soap *soap, _ns1__HeartbeatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HeartbeatResponse", p->soap_type() == SOAP_TYPE__ns1__HeartbeatResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__HeartbeatResponse(struct soap *soap, const char *URL, _ns1__HeartbeatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HeartbeatResponse", p->soap_type() == SOAP_TYPE__ns1__HeartbeatResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__HeartbeatResponse(struct soap *soap, const char *URL, _ns1__HeartbeatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HeartbeatResponse", p->soap_type() == SOAP_TYPE__ns1__HeartbeatResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__HeartbeatResponse(struct soap *soap, const char *URL, _ns1__HeartbeatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HeartbeatResponse", p->soap_type() == SOAP_TYPE__ns1__HeartbeatResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__HeartbeatResponse * SOAP_FMAC4 soap_get__ns1__HeartbeatResponse(struct soap*, _ns1__HeartbeatResponse *, const char*, const char*);

inline int soap_read__ns1__HeartbeatResponse(struct soap *soap, _ns1__HeartbeatResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__HeartbeatResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__HeartbeatResponse(struct soap *soap, const char *URL, _ns1__HeartbeatResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__HeartbeatResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__HeartbeatResponse(struct soap *soap, _ns1__HeartbeatResponse *p)
{
	if (::soap_read__ns1__HeartbeatResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__Heartbeat_DEFINED
#define SOAP_TYPE__ns1__Heartbeat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Heartbeat(struct soap*, const char*, int, const _ns1__Heartbeat *, const char*);
SOAP_FMAC3 _ns1__Heartbeat * SOAP_FMAC4 soap_in__ns1__Heartbeat(struct soap*, const char*, _ns1__Heartbeat *, const char*);
SOAP_FMAC1 _ns1__Heartbeat * SOAP_FMAC2 soap_instantiate__ns1__Heartbeat(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Heartbeat * soap_new__ns1__Heartbeat(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Heartbeat(soap, n, NULL, NULL, NULL);
}

inline _ns1__Heartbeat * soap_new_req__ns1__Heartbeat(
	struct soap *soap)
{
	_ns1__Heartbeat *_p = ::soap_new__ns1__Heartbeat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Heartbeat * soap_new_set__ns1__Heartbeat(
	struct soap *soap,
	ns1__Heartbeat *model)
{
	_ns1__Heartbeat *_p = ::soap_new__ns1__Heartbeat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Heartbeat::model = model;
	}
	return _p;
}

inline int soap_write__ns1__Heartbeat(struct soap *soap, _ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE__ns1__Heartbeat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Heartbeat(struct soap *soap, const char *URL, _ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE__ns1__Heartbeat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Heartbeat(struct soap *soap, const char *URL, _ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE__ns1__Heartbeat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Heartbeat(struct soap *soap, const char *URL, _ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE__ns1__Heartbeat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Heartbeat * SOAP_FMAC4 soap_get__ns1__Heartbeat(struct soap*, _ns1__Heartbeat *, const char*, const char*);

inline int soap_read__ns1__Heartbeat(struct soap *soap, _ns1__Heartbeat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Heartbeat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Heartbeat(struct soap *soap, const char *URL, _ns1__Heartbeat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Heartbeat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Heartbeat(struct soap *soap, _ns1__Heartbeat *p)
{
	if (::soap_read__ns1__Heartbeat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GenerateCellSFCResponse_DEFINED
#define SOAP_TYPE__ns1__GenerateCellSFCResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GenerateCellSFCResponse(struct soap*, const char*, int, const _ns1__GenerateCellSFCResponse *, const char*);
SOAP_FMAC3 _ns1__GenerateCellSFCResponse * SOAP_FMAC4 soap_in__ns1__GenerateCellSFCResponse(struct soap*, const char*, _ns1__GenerateCellSFCResponse *, const char*);
SOAP_FMAC1 _ns1__GenerateCellSFCResponse * SOAP_FMAC2 soap_instantiate__ns1__GenerateCellSFCResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GenerateCellSFCResponse * soap_new__ns1__GenerateCellSFCResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GenerateCellSFCResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GenerateCellSFCResponse * soap_new_req__ns1__GenerateCellSFCResponse(
	struct soap *soap)
{
	_ns1__GenerateCellSFCResponse *_p = ::soap_new__ns1__GenerateCellSFCResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GenerateCellSFCResponse * soap_new_set__ns1__GenerateCellSFCResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfString *GenerateCellSFCResult)
{
	_ns1__GenerateCellSFCResponse *_p = ::soap_new__ns1__GenerateCellSFCResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GenerateCellSFCResponse::GenerateCellSFCResult = GenerateCellSFCResult;
	}
	return _p;
}

inline int soap_write__ns1__GenerateCellSFCResponse(struct soap *soap, _ns1__GenerateCellSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFCResponse", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFCResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GenerateCellSFCResponse(struct soap *soap, const char *URL, _ns1__GenerateCellSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFCResponse", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFCResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GenerateCellSFCResponse(struct soap *soap, const char *URL, _ns1__GenerateCellSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFCResponse", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFCResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GenerateCellSFCResponse(struct soap *soap, const char *URL, _ns1__GenerateCellSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFCResponse", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFCResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GenerateCellSFCResponse * SOAP_FMAC4 soap_get__ns1__GenerateCellSFCResponse(struct soap*, _ns1__GenerateCellSFCResponse *, const char*, const char*);

inline int soap_read__ns1__GenerateCellSFCResponse(struct soap *soap, _ns1__GenerateCellSFCResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GenerateCellSFCResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GenerateCellSFCResponse(struct soap *soap, const char *URL, _ns1__GenerateCellSFCResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GenerateCellSFCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GenerateCellSFCResponse(struct soap *soap, _ns1__GenerateCellSFCResponse *p)
{
	if (::soap_read__ns1__GenerateCellSFCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__GenerateCellSFC_DEFINED
#define SOAP_TYPE__ns1__GenerateCellSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GenerateCellSFC(struct soap*, const char*, int, const _ns1__GenerateCellSFC *, const char*);
SOAP_FMAC3 _ns1__GenerateCellSFC * SOAP_FMAC4 soap_in__ns1__GenerateCellSFC(struct soap*, const char*, _ns1__GenerateCellSFC *, const char*);
SOAP_FMAC1 _ns1__GenerateCellSFC * SOAP_FMAC2 soap_instantiate__ns1__GenerateCellSFC(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GenerateCellSFC * soap_new__ns1__GenerateCellSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GenerateCellSFC(soap, n, NULL, NULL, NULL);
}

inline _ns1__GenerateCellSFC * soap_new_req__ns1__GenerateCellSFC(
	struct soap *soap)
{
	_ns1__GenerateCellSFC *_p = ::soap_new__ns1__GenerateCellSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GenerateCellSFC * soap_new_set__ns1__GenerateCellSFC(
	struct soap *soap,
	ns1__GenerateCellSFC *model)
{
	_ns1__GenerateCellSFC *_p = ::soap_new__ns1__GenerateCellSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GenerateCellSFC::model = model;
	}
	return _p;
}

inline int soap_write__ns1__GenerateCellSFC(struct soap *soap, _ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GenerateCellSFC(struct soap *soap, const char *URL, _ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GenerateCellSFC(struct soap *soap, const char *URL, _ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GenerateCellSFC(struct soap *soap, const char *URL, _ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE__ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GenerateCellSFC * SOAP_FMAC4 soap_get__ns1__GenerateCellSFC(struct soap*, _ns1__GenerateCellSFC *, const char*, const char*);

inline int soap_read__ns1__GenerateCellSFC(struct soap *soap, _ns1__GenerateCellSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GenerateCellSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GenerateCellSFC(struct soap *soap, const char *URL, _ns1__GenerateCellSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GenerateCellSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GenerateCellSFC(struct soap *soap, _ns1__GenerateCellSFC *p)
{
	if (::soap_read__ns1__GenerateCellSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__FillingDataResponse_DEFINED
#define SOAP_TYPE__ns1__FillingDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FillingDataResponse(struct soap*, const char*, int, const _ns1__FillingDataResponse *, const char*);
SOAP_FMAC3 _ns1__FillingDataResponse * SOAP_FMAC4 soap_in__ns1__FillingDataResponse(struct soap*, const char*, _ns1__FillingDataResponse *, const char*);
SOAP_FMAC1 _ns1__FillingDataResponse * SOAP_FMAC2 soap_instantiate__ns1__FillingDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FillingDataResponse * soap_new__ns1__FillingDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__FillingDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__FillingDataResponse * soap_new_req__ns1__FillingDataResponse(
	struct soap *soap)
{
	_ns1__FillingDataResponse *_p = ::soap_new__ns1__FillingDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FillingDataResponse * soap_new_set__ns1__FillingDataResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *FillingDataResult)
{
	_ns1__FillingDataResponse *_p = ::soap_new__ns1__FillingDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FillingDataResponse::FillingDataResult = FillingDataResult;
	}
	return _p;
}

inline int soap_write__ns1__FillingDataResponse(struct soap *soap, _ns1__FillingDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingDataResponse", p->soap_type() == SOAP_TYPE__ns1__FillingDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__FillingDataResponse(struct soap *soap, const char *URL, _ns1__FillingDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingDataResponse", p->soap_type() == SOAP_TYPE__ns1__FillingDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__FillingDataResponse(struct soap *soap, const char *URL, _ns1__FillingDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingDataResponse", p->soap_type() == SOAP_TYPE__ns1__FillingDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__FillingDataResponse(struct soap *soap, const char *URL, _ns1__FillingDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingDataResponse", p->soap_type() == SOAP_TYPE__ns1__FillingDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__FillingDataResponse * SOAP_FMAC4 soap_get__ns1__FillingDataResponse(struct soap*, _ns1__FillingDataResponse *, const char*, const char*);

inline int soap_read__ns1__FillingDataResponse(struct soap *soap, _ns1__FillingDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__FillingDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__FillingDataResponse(struct soap *soap, const char *URL, _ns1__FillingDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__FillingDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__FillingDataResponse(struct soap *soap, _ns1__FillingDataResponse *p)
{
	if (::soap_read__ns1__FillingDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__FillingData_DEFINED
#define SOAP_TYPE__ns1__FillingData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FillingData(struct soap*, const char*, int, const _ns1__FillingData *, const char*);
SOAP_FMAC3 _ns1__FillingData * SOAP_FMAC4 soap_in__ns1__FillingData(struct soap*, const char*, _ns1__FillingData *, const char*);
SOAP_FMAC1 _ns1__FillingData * SOAP_FMAC2 soap_instantiate__ns1__FillingData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FillingData * soap_new__ns1__FillingData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__FillingData(soap, n, NULL, NULL, NULL);
}

inline _ns1__FillingData * soap_new_req__ns1__FillingData(
	struct soap *soap)
{
	_ns1__FillingData *_p = ::soap_new__ns1__FillingData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FillingData * soap_new_set__ns1__FillingData(
	struct soap *soap,
	ns1__FillingData *model)
{
	_ns1__FillingData *_p = ::soap_new__ns1__FillingData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FillingData::model = model;
	}
	return _p;
}

inline int soap_write__ns1__FillingData(struct soap *soap, _ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE__ns1__FillingData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__FillingData(struct soap *soap, const char *URL, _ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE__ns1__FillingData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__FillingData(struct soap *soap, const char *URL, _ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE__ns1__FillingData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__FillingData(struct soap *soap, const char *URL, _ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE__ns1__FillingData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__FillingData * SOAP_FMAC4 soap_get__ns1__FillingData(struct soap*, _ns1__FillingData *, const char*, const char*);

inline int soap_read__ns1__FillingData(struct soap *soap, _ns1__FillingData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__FillingData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__FillingData(struct soap *soap, const char *URL, _ns1__FillingData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__FillingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__FillingData(struct soap *soap, _ns1__FillingData *p)
{
	if (::soap_read__ns1__FillingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__FeedingDJInLaminatingResponse_DEFINED
#define SOAP_TYPE__ns1__FeedingDJInLaminatingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FeedingDJInLaminatingResponse(struct soap*, const char*, int, const _ns1__FeedingDJInLaminatingResponse *, const char*);
SOAP_FMAC3 _ns1__FeedingDJInLaminatingResponse * SOAP_FMAC4 soap_in__ns1__FeedingDJInLaminatingResponse(struct soap*, const char*, _ns1__FeedingDJInLaminatingResponse *, const char*);
SOAP_FMAC1 _ns1__FeedingDJInLaminatingResponse * SOAP_FMAC2 soap_instantiate__ns1__FeedingDJInLaminatingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FeedingDJInLaminatingResponse * soap_new__ns1__FeedingDJInLaminatingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__FeedingDJInLaminatingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__FeedingDJInLaminatingResponse * soap_new_req__ns1__FeedingDJInLaminatingResponse(
	struct soap *soap)
{
	_ns1__FeedingDJInLaminatingResponse *_p = ::soap_new__ns1__FeedingDJInLaminatingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FeedingDJInLaminatingResponse * soap_new_set__ns1__FeedingDJInLaminatingResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *FeedingDJInLaminatingResult)
{
	_ns1__FeedingDJInLaminatingResponse *_p = ::soap_new__ns1__FeedingDJInLaminatingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FeedingDJInLaminatingResponse::FeedingDJInLaminatingResult = FeedingDJInLaminatingResult;
	}
	return _p;
}

inline int soap_write__ns1__FeedingDJInLaminatingResponse(struct soap *soap, _ns1__FeedingDJInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminatingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__FeedingDJInLaminatingResponse(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminatingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__FeedingDJInLaminatingResponse(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminatingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__FeedingDJInLaminatingResponse(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminatingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminatingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__FeedingDJInLaminatingResponse * SOAP_FMAC4 soap_get__ns1__FeedingDJInLaminatingResponse(struct soap*, _ns1__FeedingDJInLaminatingResponse *, const char*, const char*);

inline int soap_read__ns1__FeedingDJInLaminatingResponse(struct soap *soap, _ns1__FeedingDJInLaminatingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__FeedingDJInLaminatingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__FeedingDJInLaminatingResponse(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminatingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__FeedingDJInLaminatingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__FeedingDJInLaminatingResponse(struct soap *soap, _ns1__FeedingDJInLaminatingResponse *p)
{
	if (::soap_read__ns1__FeedingDJInLaminatingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__FeedingDJInLaminating_DEFINED
#define SOAP_TYPE__ns1__FeedingDJInLaminating_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FeedingDJInLaminating(struct soap*, const char*, int, const _ns1__FeedingDJInLaminating *, const char*);
SOAP_FMAC3 _ns1__FeedingDJInLaminating * SOAP_FMAC4 soap_in__ns1__FeedingDJInLaminating(struct soap*, const char*, _ns1__FeedingDJInLaminating *, const char*);
SOAP_FMAC1 _ns1__FeedingDJInLaminating * SOAP_FMAC2 soap_instantiate__ns1__FeedingDJInLaminating(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FeedingDJInLaminating * soap_new__ns1__FeedingDJInLaminating(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__FeedingDJInLaminating(soap, n, NULL, NULL, NULL);
}

inline _ns1__FeedingDJInLaminating * soap_new_req__ns1__FeedingDJInLaminating(
	struct soap *soap)
{
	_ns1__FeedingDJInLaminating *_p = ::soap_new__ns1__FeedingDJInLaminating(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FeedingDJInLaminating * soap_new_set__ns1__FeedingDJInLaminating(
	struct soap *soap,
	ns1__FeedingDJInLaminatingByScadaDTO *model)
{
	_ns1__FeedingDJInLaminating *_p = ::soap_new__ns1__FeedingDJInLaminating(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FeedingDJInLaminating::model = model;
	}
	return _p;
}

inline int soap_write__ns1__FeedingDJInLaminating(struct soap *soap, _ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminating", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminating ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminating", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminating ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminating", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminating ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminating", p->soap_type() == SOAP_TYPE__ns1__FeedingDJInLaminating ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__FeedingDJInLaminating * SOAP_FMAC4 soap_get__ns1__FeedingDJInLaminating(struct soap*, _ns1__FeedingDJInLaminating *, const char*, const char*);

inline int soap_read__ns1__FeedingDJInLaminating(struct soap *soap, _ns1__FeedingDJInLaminating *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__FeedingDJInLaminating(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, _ns1__FeedingDJInLaminating *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__FeedingDJInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__FeedingDJInLaminating(struct soap *soap, _ns1__FeedingDJInLaminating *p)
{
	if (::soap_read__ns1__FeedingDJInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__FeedingResponse_DEFINED
#define SOAP_TYPE__ns1__FeedingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FeedingResponse(struct soap*, const char*, int, const _ns1__FeedingResponse *, const char*);
SOAP_FMAC3 _ns1__FeedingResponse * SOAP_FMAC4 soap_in__ns1__FeedingResponse(struct soap*, const char*, _ns1__FeedingResponse *, const char*);
SOAP_FMAC1 _ns1__FeedingResponse * SOAP_FMAC2 soap_instantiate__ns1__FeedingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FeedingResponse * soap_new__ns1__FeedingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__FeedingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__FeedingResponse * soap_new_req__ns1__FeedingResponse(
	struct soap *soap)
{
	_ns1__FeedingResponse *_p = ::soap_new__ns1__FeedingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FeedingResponse * soap_new_set__ns1__FeedingResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *FeedingResult)
{
	_ns1__FeedingResponse *_p = ::soap_new__ns1__FeedingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FeedingResponse::FeedingResult = FeedingResult;
	}
	return _p;
}

inline int soap_write__ns1__FeedingResponse(struct soap *soap, _ns1__FeedingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__FeedingResponse(struct soap *soap, const char *URL, _ns1__FeedingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__FeedingResponse(struct soap *soap, const char *URL, _ns1__FeedingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__FeedingResponse(struct soap *soap, const char *URL, _ns1__FeedingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingResponse", p->soap_type() == SOAP_TYPE__ns1__FeedingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__FeedingResponse * SOAP_FMAC4 soap_get__ns1__FeedingResponse(struct soap*, _ns1__FeedingResponse *, const char*, const char*);

inline int soap_read__ns1__FeedingResponse(struct soap *soap, _ns1__FeedingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__FeedingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__FeedingResponse(struct soap *soap, const char *URL, _ns1__FeedingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__FeedingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__FeedingResponse(struct soap *soap, _ns1__FeedingResponse *p)
{
	if (::soap_read__ns1__FeedingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__Feeding_DEFINED
#define SOAP_TYPE__ns1__Feeding_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Feeding(struct soap*, const char*, int, const _ns1__Feeding *, const char*);
SOAP_FMAC3 _ns1__Feeding * SOAP_FMAC4 soap_in__ns1__Feeding(struct soap*, const char*, _ns1__Feeding *, const char*);
SOAP_FMAC1 _ns1__Feeding * SOAP_FMAC2 soap_instantiate__ns1__Feeding(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Feeding * soap_new__ns1__Feeding(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Feeding(soap, n, NULL, NULL, NULL);
}

inline _ns1__Feeding * soap_new_req__ns1__Feeding(
	struct soap *soap)
{
	_ns1__Feeding *_p = ::soap_new__ns1__Feeding(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Feeding * soap_new_set__ns1__Feeding(
	struct soap *soap,
	ns1__FeedingByScadaDTO *model)
{
	_ns1__Feeding *_p = ::soap_new__ns1__Feeding(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Feeding::model = model;
	}
	return _p;
}

inline int soap_write__ns1__Feeding(struct soap *soap, _ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Feeding", p->soap_type() == SOAP_TYPE__ns1__Feeding ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Feeding(struct soap *soap, const char *URL, _ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Feeding", p->soap_type() == SOAP_TYPE__ns1__Feeding ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Feeding(struct soap *soap, const char *URL, _ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Feeding", p->soap_type() == SOAP_TYPE__ns1__Feeding ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Feeding(struct soap *soap, const char *URL, _ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Feeding", p->soap_type() == SOAP_TYPE__ns1__Feeding ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Feeding * SOAP_FMAC4 soap_get__ns1__Feeding(struct soap*, _ns1__Feeding *, const char*, const char*);

inline int soap_read__ns1__Feeding(struct soap *soap, _ns1__Feeding *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Feeding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Feeding(struct soap *soap, const char *URL, _ns1__Feeding *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Feeding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Feeding(struct soap *soap, _ns1__Feeding *p)
{
	if (::soap_read__ns1__Feeding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ExamineExistsResponse_DEFINED
#define SOAP_TYPE__ns1__ExamineExistsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExamineExistsResponse(struct soap*, const char*, int, const _ns1__ExamineExistsResponse *, const char*);
SOAP_FMAC3 _ns1__ExamineExistsResponse * SOAP_FMAC4 soap_in__ns1__ExamineExistsResponse(struct soap*, const char*, _ns1__ExamineExistsResponse *, const char*);
SOAP_FMAC1 _ns1__ExamineExistsResponse * SOAP_FMAC2 soap_instantiate__ns1__ExamineExistsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExamineExistsResponse * soap_new__ns1__ExamineExistsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExamineExistsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExamineExistsResponse * soap_new_req__ns1__ExamineExistsResponse(
	struct soap *soap)
{
	_ns1__ExamineExistsResponse *_p = ::soap_new__ns1__ExamineExistsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExamineExistsResponse * soap_new_set__ns1__ExamineExistsResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *ExamineExistsResult)
{
	_ns1__ExamineExistsResponse *_p = ::soap_new__ns1__ExamineExistsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExamineExistsResponse::ExamineExistsResult = ExamineExistsResult;
	}
	return _p;
}

inline int soap_write__ns1__ExamineExistsResponse(struct soap *soap, _ns1__ExamineExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsResponse", p->soap_type() == SOAP_TYPE__ns1__ExamineExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExamineExistsResponse(struct soap *soap, const char *URL, _ns1__ExamineExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsResponse", p->soap_type() == SOAP_TYPE__ns1__ExamineExistsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ExamineExistsResponse(struct soap *soap, const char *URL, _ns1__ExamineExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsResponse", p->soap_type() == SOAP_TYPE__ns1__ExamineExistsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExamineExistsResponse(struct soap *soap, const char *URL, _ns1__ExamineExistsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsResponse", p->soap_type() == SOAP_TYPE__ns1__ExamineExistsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExamineExistsResponse * SOAP_FMAC4 soap_get__ns1__ExamineExistsResponse(struct soap*, _ns1__ExamineExistsResponse *, const char*, const char*);

inline int soap_read__ns1__ExamineExistsResponse(struct soap *soap, _ns1__ExamineExistsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ExamineExistsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExamineExistsResponse(struct soap *soap, const char *URL, _ns1__ExamineExistsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ExamineExistsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ExamineExistsResponse(struct soap *soap, _ns1__ExamineExistsResponse *p)
{
	if (::soap_read__ns1__ExamineExistsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ExamineExists_DEFINED
#define SOAP_TYPE__ns1__ExamineExists_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExamineExists(struct soap*, const char*, int, const _ns1__ExamineExists *, const char*);
SOAP_FMAC3 _ns1__ExamineExists * SOAP_FMAC4 soap_in__ns1__ExamineExists(struct soap*, const char*, _ns1__ExamineExists *, const char*);
SOAP_FMAC1 _ns1__ExamineExists * SOAP_FMAC2 soap_instantiate__ns1__ExamineExists(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExamineExists * soap_new__ns1__ExamineExists(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ExamineExists(soap, n, NULL, NULL, NULL);
}

inline _ns1__ExamineExists * soap_new_req__ns1__ExamineExists(
	struct soap *soap)
{
	_ns1__ExamineExists *_p = ::soap_new__ns1__ExamineExists(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExamineExists * soap_new_set__ns1__ExamineExists(
	struct soap *soap,
	ns1__ExamineExistsByScadaDTO *model)
{
	_ns1__ExamineExists *_p = ::soap_new__ns1__ExamineExists(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExamineExists::model = model;
	}
	return _p;
}

inline int soap_write__ns1__ExamineExists(struct soap *soap, _ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExists", p->soap_type() == SOAP_TYPE__ns1__ExamineExists ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ExamineExists(struct soap *soap, const char *URL, _ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExists", p->soap_type() == SOAP_TYPE__ns1__ExamineExists ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ExamineExists(struct soap *soap, const char *URL, _ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExists", p->soap_type() == SOAP_TYPE__ns1__ExamineExists ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ExamineExists(struct soap *soap, const char *URL, _ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExists", p->soap_type() == SOAP_TYPE__ns1__ExamineExists ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ExamineExists * SOAP_FMAC4 soap_get__ns1__ExamineExists(struct soap*, _ns1__ExamineExists *, const char*, const char*);

inline int soap_read__ns1__ExamineExists(struct soap *soap, _ns1__ExamineExists *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ExamineExists(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ExamineExists(struct soap *soap, const char *URL, _ns1__ExamineExists *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ExamineExists(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ExamineExists(struct soap *soap, _ns1__ExamineExists *p)
{
	if (::soap_read__ns1__ExamineExists(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__EquipmentProductProcessParamResponse_DEFINED
#define SOAP_TYPE__ns1__EquipmentProductProcessParamResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EquipmentProductProcessParamResponse(struct soap*, const char*, int, const _ns1__EquipmentProductProcessParamResponse *, const char*);
SOAP_FMAC3 _ns1__EquipmentProductProcessParamResponse * SOAP_FMAC4 soap_in__ns1__EquipmentProductProcessParamResponse(struct soap*, const char*, _ns1__EquipmentProductProcessParamResponse *, const char*);
SOAP_FMAC1 _ns1__EquipmentProductProcessParamResponse * SOAP_FMAC2 soap_instantiate__ns1__EquipmentProductProcessParamResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EquipmentProductProcessParamResponse * soap_new__ns1__EquipmentProductProcessParamResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EquipmentProductProcessParamResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__EquipmentProductProcessParamResponse * soap_new_req__ns1__EquipmentProductProcessParamResponse(
	struct soap *soap)
{
	_ns1__EquipmentProductProcessParamResponse *_p = ::soap_new__ns1__EquipmentProductProcessParamResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EquipmentProductProcessParamResponse * soap_new_set__ns1__EquipmentProductProcessParamResponse(
	struct soap *soap,
	ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *EquipmentProductProcessParamResult)
{
	_ns1__EquipmentProductProcessParamResponse *_p = ::soap_new__ns1__EquipmentProductProcessParamResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EquipmentProductProcessParamResponse::EquipmentProductProcessParamResult = EquipmentProductProcessParamResult;
	}
	return _p;
}

inline int soap_write__ns1__EquipmentProductProcessParamResponse(struct soap *soap, _ns1__EquipmentProductProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParamResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EquipmentProductProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParamResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__EquipmentProductProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParamResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EquipmentProductProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParamResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EquipmentProductProcessParamResponse * SOAP_FMAC4 soap_get__ns1__EquipmentProductProcessParamResponse(struct soap*, _ns1__EquipmentProductProcessParamResponse *, const char*, const char*);

inline int soap_read__ns1__EquipmentProductProcessParamResponse(struct soap *soap, _ns1__EquipmentProductProcessParamResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__EquipmentProductProcessParamResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EquipmentProductProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParamResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__EquipmentProductProcessParamResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__EquipmentProductProcessParamResponse(struct soap *soap, _ns1__EquipmentProductProcessParamResponse *p)
{
	if (::soap_read__ns1__EquipmentProductProcessParamResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__EquipmentProductProcessParam_DEFINED
#define SOAP_TYPE__ns1__EquipmentProductProcessParam_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EquipmentProductProcessParam(struct soap*, const char*, int, const _ns1__EquipmentProductProcessParam *, const char*);
SOAP_FMAC3 _ns1__EquipmentProductProcessParam * SOAP_FMAC4 soap_in__ns1__EquipmentProductProcessParam(struct soap*, const char*, _ns1__EquipmentProductProcessParam *, const char*);
SOAP_FMAC1 _ns1__EquipmentProductProcessParam * SOAP_FMAC2 soap_instantiate__ns1__EquipmentProductProcessParam(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EquipmentProductProcessParam * soap_new__ns1__EquipmentProductProcessParam(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EquipmentProductProcessParam(soap, n, NULL, NULL, NULL);
}

inline _ns1__EquipmentProductProcessParam * soap_new_req__ns1__EquipmentProductProcessParam(
	struct soap *soap)
{
	_ns1__EquipmentProductProcessParam *_p = ::soap_new__ns1__EquipmentProductProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EquipmentProductProcessParam * soap_new_set__ns1__EquipmentProductProcessParam(
	struct soap *soap,
	ns1__EquipmentProductProcessParam *model)
{
	_ns1__EquipmentProductProcessParam *_p = ::soap_new__ns1__EquipmentProductProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EquipmentProductProcessParam::model = model;
	}
	return _p;
}

inline int soap_write__ns1__EquipmentProductProcessParam(struct soap *soap, _ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EquipmentProductProcessParam * SOAP_FMAC4 soap_get__ns1__EquipmentProductProcessParam(struct soap*, _ns1__EquipmentProductProcessParam *, const char*, const char*);

inline int soap_read__ns1__EquipmentProductProcessParam(struct soap *soap, _ns1__EquipmentProductProcessParam *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__EquipmentProductProcessParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProductProcessParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__EquipmentProductProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__EquipmentProductProcessParam(struct soap *soap, _ns1__EquipmentProductProcessParam *p)
{
	if (::soap_read__ns1__EquipmentProductProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__EquipmentProcessParamResponse_DEFINED
#define SOAP_TYPE__ns1__EquipmentProcessParamResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EquipmentProcessParamResponse(struct soap*, const char*, int, const _ns1__EquipmentProcessParamResponse *, const char*);
SOAP_FMAC3 _ns1__EquipmentProcessParamResponse * SOAP_FMAC4 soap_in__ns1__EquipmentProcessParamResponse(struct soap*, const char*, _ns1__EquipmentProcessParamResponse *, const char*);
SOAP_FMAC1 _ns1__EquipmentProcessParamResponse * SOAP_FMAC2 soap_instantiate__ns1__EquipmentProcessParamResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EquipmentProcessParamResponse * soap_new__ns1__EquipmentProcessParamResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EquipmentProcessParamResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__EquipmentProcessParamResponse * soap_new_req__ns1__EquipmentProcessParamResponse(
	struct soap *soap)
{
	_ns1__EquipmentProcessParamResponse *_p = ::soap_new__ns1__EquipmentProcessParamResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EquipmentProcessParamResponse * soap_new_set__ns1__EquipmentProcessParamResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *EquipmentProcessParamResult)
{
	_ns1__EquipmentProcessParamResponse *_p = ::soap_new__ns1__EquipmentProcessParamResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EquipmentProcessParamResponse::EquipmentProcessParamResult = EquipmentProcessParamResult;
	}
	return _p;
}

inline int soap_write__ns1__EquipmentProcessParamResponse(struct soap *soap, _ns1__EquipmentProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParamResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EquipmentProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParamResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__EquipmentProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParamResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EquipmentProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProcessParamResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParamResponse", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParamResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EquipmentProcessParamResponse * SOAP_FMAC4 soap_get__ns1__EquipmentProcessParamResponse(struct soap*, _ns1__EquipmentProcessParamResponse *, const char*, const char*);

inline int soap_read__ns1__EquipmentProcessParamResponse(struct soap *soap, _ns1__EquipmentProcessParamResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__EquipmentProcessParamResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EquipmentProcessParamResponse(struct soap *soap, const char *URL, _ns1__EquipmentProcessParamResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__EquipmentProcessParamResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__EquipmentProcessParamResponse(struct soap *soap, _ns1__EquipmentProcessParamResponse *p)
{
	if (::soap_read__ns1__EquipmentProcessParamResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__EquipmentProcessParam_DEFINED
#define SOAP_TYPE__ns1__EquipmentProcessParam_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EquipmentProcessParam(struct soap*, const char*, int, const _ns1__EquipmentProcessParam *, const char*);
SOAP_FMAC3 _ns1__EquipmentProcessParam * SOAP_FMAC4 soap_in__ns1__EquipmentProcessParam(struct soap*, const char*, _ns1__EquipmentProcessParam *, const char*);
SOAP_FMAC1 _ns1__EquipmentProcessParam * SOAP_FMAC2 soap_instantiate__ns1__EquipmentProcessParam(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EquipmentProcessParam * soap_new__ns1__EquipmentProcessParam(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EquipmentProcessParam(soap, n, NULL, NULL, NULL);
}

inline _ns1__EquipmentProcessParam * soap_new_req__ns1__EquipmentProcessParam(
	struct soap *soap)
{
	_ns1__EquipmentProcessParam *_p = ::soap_new__ns1__EquipmentProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EquipmentProcessParam * soap_new_set__ns1__EquipmentProcessParam(
	struct soap *soap,
	ns1__EquipmentProcessParam *model)
{
	_ns1__EquipmentProcessParam *_p = ::soap_new__ns1__EquipmentProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EquipmentProcessParam::model = model;
	}
	return _p;
}

inline int soap_write__ns1__EquipmentProcessParam(struct soap *soap, _ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EquipmentProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__EquipmentProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EquipmentProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE__ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EquipmentProcessParam * SOAP_FMAC4 soap_get__ns1__EquipmentProcessParam(struct soap*, _ns1__EquipmentProcessParam *, const char*, const char*);

inline int soap_read__ns1__EquipmentProcessParam(struct soap *soap, _ns1__EquipmentProcessParam *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__EquipmentProcessParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EquipmentProcessParam(struct soap *soap, const char *URL, _ns1__EquipmentProcessParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__EquipmentProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__EquipmentProcessParam(struct soap *soap, _ns1__EquipmentProcessParam *p)
{
	if (::soap_read__ns1__EquipmentProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__DownReasonResponse_DEFINED
#define SOAP_TYPE__ns1__DownReasonResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownReasonResponse(struct soap*, const char*, int, const _ns1__DownReasonResponse *, const char*);
SOAP_FMAC3 _ns1__DownReasonResponse * SOAP_FMAC4 soap_in__ns1__DownReasonResponse(struct soap*, const char*, _ns1__DownReasonResponse *, const char*);
SOAP_FMAC1 _ns1__DownReasonResponse * SOAP_FMAC2 soap_instantiate__ns1__DownReasonResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DownReasonResponse * soap_new__ns1__DownReasonResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DownReasonResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DownReasonResponse * soap_new_req__ns1__DownReasonResponse(
	struct soap *soap)
{
	_ns1__DownReasonResponse *_p = ::soap_new__ns1__DownReasonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DownReasonResponse * soap_new_set__ns1__DownReasonResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *DownReasonResult)
{
	_ns1__DownReasonResponse *_p = ::soap_new__ns1__DownReasonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DownReasonResponse::DownReasonResult = DownReasonResult;
	}
	return _p;
}

inline int soap_write__ns1__DownReasonResponse(struct soap *soap, _ns1__DownReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReasonResponse", p->soap_type() == SOAP_TYPE__ns1__DownReasonResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DownReasonResponse(struct soap *soap, const char *URL, _ns1__DownReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReasonResponse", p->soap_type() == SOAP_TYPE__ns1__DownReasonResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DownReasonResponse(struct soap *soap, const char *URL, _ns1__DownReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReasonResponse", p->soap_type() == SOAP_TYPE__ns1__DownReasonResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DownReasonResponse(struct soap *soap, const char *URL, _ns1__DownReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReasonResponse", p->soap_type() == SOAP_TYPE__ns1__DownReasonResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DownReasonResponse * SOAP_FMAC4 soap_get__ns1__DownReasonResponse(struct soap*, _ns1__DownReasonResponse *, const char*, const char*);

inline int soap_read__ns1__DownReasonResponse(struct soap *soap, _ns1__DownReasonResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DownReasonResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DownReasonResponse(struct soap *soap, const char *URL, _ns1__DownReasonResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DownReasonResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__DownReasonResponse(struct soap *soap, _ns1__DownReasonResponse *p)
{
	if (::soap_read__ns1__DownReasonResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__DownReason_DEFINED
#define SOAP_TYPE__ns1__DownReason_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DownReason(struct soap*, const char*, int, const _ns1__DownReason *, const char*);
SOAP_FMAC3 _ns1__DownReason * SOAP_FMAC4 soap_in__ns1__DownReason(struct soap*, const char*, _ns1__DownReason *, const char*);
SOAP_FMAC1 _ns1__DownReason * SOAP_FMAC2 soap_instantiate__ns1__DownReason(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DownReason * soap_new__ns1__DownReason(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DownReason(soap, n, NULL, NULL, NULL);
}

inline _ns1__DownReason * soap_new_req__ns1__DownReason(
	struct soap *soap)
{
	_ns1__DownReason *_p = ::soap_new__ns1__DownReason(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DownReason * soap_new_set__ns1__DownReason(
	struct soap *soap,
	ns1__ArrayOfDownReason *modelList)
{
	_ns1__DownReason *_p = ::soap_new__ns1__DownReason(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DownReason::modelList = modelList;
	}
	return _p;
}

inline int soap_write__ns1__DownReason(struct soap *soap, _ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE__ns1__DownReason ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DownReason(struct soap *soap, const char *URL, _ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE__ns1__DownReason ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DownReason(struct soap *soap, const char *URL, _ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE__ns1__DownReason ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DownReason(struct soap *soap, const char *URL, _ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE__ns1__DownReason ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DownReason * SOAP_FMAC4 soap_get__ns1__DownReason(struct soap*, _ns1__DownReason *, const char*, const char*);

inline int soap_read__ns1__DownReason(struct soap *soap, _ns1__DownReason *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DownReason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DownReason(struct soap *soap, const char *URL, _ns1__DownReason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__DownReason(struct soap *soap, _ns1__DownReason *p)
{
	if (::soap_read__ns1__DownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__CCDFileUploadCompleteResponse_DEFINED
#define SOAP_TYPE__ns1__CCDFileUploadCompleteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CCDFileUploadCompleteResponse(struct soap*, const char*, int, const _ns1__CCDFileUploadCompleteResponse *, const char*);
SOAP_FMAC3 _ns1__CCDFileUploadCompleteResponse * SOAP_FMAC4 soap_in__ns1__CCDFileUploadCompleteResponse(struct soap*, const char*, _ns1__CCDFileUploadCompleteResponse *, const char*);
SOAP_FMAC1 _ns1__CCDFileUploadCompleteResponse * SOAP_FMAC2 soap_instantiate__ns1__CCDFileUploadCompleteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CCDFileUploadCompleteResponse * soap_new__ns1__CCDFileUploadCompleteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CCDFileUploadCompleteResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CCDFileUploadCompleteResponse * soap_new_req__ns1__CCDFileUploadCompleteResponse(
	struct soap *soap)
{
	_ns1__CCDFileUploadCompleteResponse *_p = ::soap_new__ns1__CCDFileUploadCompleteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CCDFileUploadCompleteResponse * soap_new_set__ns1__CCDFileUploadCompleteResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *CCDFileUploadCompleteResult)
{
	_ns1__CCDFileUploadCompleteResponse *_p = ::soap_new__ns1__CCDFileUploadCompleteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CCDFileUploadCompleteResponse::CCDFileUploadCompleteResult = CCDFileUploadCompleteResult;
	}
	return _p;
}

inline int soap_write__ns1__CCDFileUploadCompleteResponse(struct soap *soap, _ns1__CCDFileUploadCompleteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteResponse", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadCompleteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CCDFileUploadCompleteResponse(struct soap *soap, const char *URL, _ns1__CCDFileUploadCompleteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteResponse", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadCompleteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CCDFileUploadCompleteResponse(struct soap *soap, const char *URL, _ns1__CCDFileUploadCompleteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteResponse", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadCompleteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CCDFileUploadCompleteResponse(struct soap *soap, const char *URL, _ns1__CCDFileUploadCompleteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteResponse", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadCompleteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CCDFileUploadCompleteResponse * SOAP_FMAC4 soap_get__ns1__CCDFileUploadCompleteResponse(struct soap*, _ns1__CCDFileUploadCompleteResponse *, const char*, const char*);

inline int soap_read__ns1__CCDFileUploadCompleteResponse(struct soap *soap, _ns1__CCDFileUploadCompleteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CCDFileUploadCompleteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CCDFileUploadCompleteResponse(struct soap *soap, const char *URL, _ns1__CCDFileUploadCompleteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CCDFileUploadCompleteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CCDFileUploadCompleteResponse(struct soap *soap, _ns1__CCDFileUploadCompleteResponse *p)
{
	if (::soap_read__ns1__CCDFileUploadCompleteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__CCDFileUploadComplete_DEFINED
#define SOAP_TYPE__ns1__CCDFileUploadComplete_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CCDFileUploadComplete(struct soap*, const char*, int, const _ns1__CCDFileUploadComplete *, const char*);
SOAP_FMAC3 _ns1__CCDFileUploadComplete * SOAP_FMAC4 soap_in__ns1__CCDFileUploadComplete(struct soap*, const char*, _ns1__CCDFileUploadComplete *, const char*);
SOAP_FMAC1 _ns1__CCDFileUploadComplete * SOAP_FMAC2 soap_instantiate__ns1__CCDFileUploadComplete(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CCDFileUploadComplete * soap_new__ns1__CCDFileUploadComplete(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CCDFileUploadComplete(soap, n, NULL, NULL, NULL);
}

inline _ns1__CCDFileUploadComplete * soap_new_req__ns1__CCDFileUploadComplete(
	struct soap *soap)
{
	_ns1__CCDFileUploadComplete *_p = ::soap_new__ns1__CCDFileUploadComplete(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CCDFileUploadComplete * soap_new_set__ns1__CCDFileUploadComplete(
	struct soap *soap,
	ns1__CCDFileUploadComplete *model)
{
	_ns1__CCDFileUploadComplete *_p = ::soap_new__ns1__CCDFileUploadComplete(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CCDFileUploadComplete::model = model;
	}
	return _p;
}

inline int soap_write__ns1__CCDFileUploadComplete(struct soap *soap, _ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, _ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, _ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, _ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE__ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CCDFileUploadComplete * SOAP_FMAC4 soap_get__ns1__CCDFileUploadComplete(struct soap*, _ns1__CCDFileUploadComplete *, const char*, const char*);

inline int soap_read__ns1__CCDFileUploadComplete(struct soap *soap, _ns1__CCDFileUploadComplete *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CCDFileUploadComplete(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, _ns1__CCDFileUploadComplete *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CCDFileUploadComplete(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CCDFileUploadComplete(struct soap *soap, _ns1__CCDFileUploadComplete *p)
{
	if (::soap_read__ns1__CCDFileUploadComplete(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BindSFCResponse_DEFINED
#define SOAP_TYPE__ns1__BindSFCResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindSFCResponse(struct soap*, const char*, int, const _ns1__BindSFCResponse *, const char*);
SOAP_FMAC3 _ns1__BindSFCResponse * SOAP_FMAC4 soap_in__ns1__BindSFCResponse(struct soap*, const char*, _ns1__BindSFCResponse *, const char*);
SOAP_FMAC1 _ns1__BindSFCResponse * SOAP_FMAC2 soap_instantiate__ns1__BindSFCResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindSFCResponse * soap_new__ns1__BindSFCResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindSFCResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindSFCResponse * soap_new_req__ns1__BindSFCResponse(
	struct soap *soap)
{
	_ns1__BindSFCResponse *_p = ::soap_new__ns1__BindSFCResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindSFCResponse * soap_new_set__ns1__BindSFCResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *BindSFCResult)
{
	_ns1__BindSFCResponse *_p = ::soap_new__ns1__BindSFCResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindSFCResponse::BindSFCResult = BindSFCResult;
	}
	return _p;
}

inline int soap_write__ns1__BindSFCResponse(struct soap *soap, _ns1__BindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__BindSFCResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindSFCResponse(struct soap *soap, const char *URL, _ns1__BindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__BindSFCResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BindSFCResponse(struct soap *soap, const char *URL, _ns1__BindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__BindSFCResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindSFCResponse(struct soap *soap, const char *URL, _ns1__BindSFCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCResponse", p->soap_type() == SOAP_TYPE__ns1__BindSFCResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindSFCResponse * SOAP_FMAC4 soap_get__ns1__BindSFCResponse(struct soap*, _ns1__BindSFCResponse *, const char*, const char*);

inline int soap_read__ns1__BindSFCResponse(struct soap *soap, _ns1__BindSFCResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BindSFCResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindSFCResponse(struct soap *soap, const char *URL, _ns1__BindSFCResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BindSFCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BindSFCResponse(struct soap *soap, _ns1__BindSFCResponse *p)
{
	if (::soap_read__ns1__BindSFCResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BindSFC_DEFINED
#define SOAP_TYPE__ns1__BindSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindSFC(struct soap*, const char*, int, const _ns1__BindSFC *, const char*);
SOAP_FMAC3 _ns1__BindSFC * SOAP_FMAC4 soap_in__ns1__BindSFC(struct soap*, const char*, _ns1__BindSFC *, const char*);
SOAP_FMAC1 _ns1__BindSFC * SOAP_FMAC2 soap_instantiate__ns1__BindSFC(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindSFC * soap_new__ns1__BindSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindSFC(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindSFC * soap_new_req__ns1__BindSFC(
	struct soap *soap)
{
	_ns1__BindSFC *_p = ::soap_new__ns1__BindSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindSFC * soap_new_set__ns1__BindSFC(
	struct soap *soap,
	ns1__BindSFCByScadaDTO *model)
{
	_ns1__BindSFC *_p = ::soap_new__ns1__BindSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindSFC::model = model;
	}
	return _p;
}

inline int soap_write__ns1__BindSFC(struct soap *soap, _ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFC", p->soap_type() == SOAP_TYPE__ns1__BindSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindSFC(struct soap *soap, const char *URL, _ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFC", p->soap_type() == SOAP_TYPE__ns1__BindSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BindSFC(struct soap *soap, const char *URL, _ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFC", p->soap_type() == SOAP_TYPE__ns1__BindSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindSFC(struct soap *soap, const char *URL, _ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFC", p->soap_type() == SOAP_TYPE__ns1__BindSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindSFC * SOAP_FMAC4 soap_get__ns1__BindSFC(struct soap*, _ns1__BindSFC *, const char*, const char*);

inline int soap_read__ns1__BindSFC(struct soap *soap, _ns1__BindSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BindSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindSFC(struct soap *soap, const char *URL, _ns1__BindSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BindSFC(struct soap *soap, _ns1__BindSFC *p)
{
	if (::soap_read__ns1__BindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BindContainerResponse_DEFINED
#define SOAP_TYPE__ns1__BindContainerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindContainerResponse(struct soap*, const char*, int, const _ns1__BindContainerResponse *, const char*);
SOAP_FMAC3 _ns1__BindContainerResponse * SOAP_FMAC4 soap_in__ns1__BindContainerResponse(struct soap*, const char*, _ns1__BindContainerResponse *, const char*);
SOAP_FMAC1 _ns1__BindContainerResponse * SOAP_FMAC2 soap_instantiate__ns1__BindContainerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindContainerResponse * soap_new__ns1__BindContainerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindContainerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindContainerResponse * soap_new_req__ns1__BindContainerResponse(
	struct soap *soap)
{
	_ns1__BindContainerResponse *_p = ::soap_new__ns1__BindContainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindContainerResponse * soap_new_set__ns1__BindContainerResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *BindContainerResult)
{
	_ns1__BindContainerResponse *_p = ::soap_new__ns1__BindContainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindContainerResponse::BindContainerResult = BindContainerResult;
	}
	return _p;
}

inline int soap_write__ns1__BindContainerResponse(struct soap *soap, _ns1__BindContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerResponse", p->soap_type() == SOAP_TYPE__ns1__BindContainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindContainerResponse(struct soap *soap, const char *URL, _ns1__BindContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerResponse", p->soap_type() == SOAP_TYPE__ns1__BindContainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BindContainerResponse(struct soap *soap, const char *URL, _ns1__BindContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerResponse", p->soap_type() == SOAP_TYPE__ns1__BindContainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindContainerResponse(struct soap *soap, const char *URL, _ns1__BindContainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerResponse", p->soap_type() == SOAP_TYPE__ns1__BindContainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindContainerResponse * SOAP_FMAC4 soap_get__ns1__BindContainerResponse(struct soap*, _ns1__BindContainerResponse *, const char*, const char*);

inline int soap_read__ns1__BindContainerResponse(struct soap *soap, _ns1__BindContainerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BindContainerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindContainerResponse(struct soap *soap, const char *URL, _ns1__BindContainerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BindContainerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BindContainerResponse(struct soap *soap, _ns1__BindContainerResponse *p)
{
	if (::soap_read__ns1__BindContainerResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__BindContainer_DEFINED
#define SOAP_TYPE__ns1__BindContainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindContainer(struct soap*, const char*, int, const _ns1__BindContainer *, const char*);
SOAP_FMAC3 _ns1__BindContainer * SOAP_FMAC4 soap_in__ns1__BindContainer(struct soap*, const char*, _ns1__BindContainer *, const char*);
SOAP_FMAC1 _ns1__BindContainer * SOAP_FMAC2 soap_instantiate__ns1__BindContainer(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindContainer * soap_new__ns1__BindContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindContainer(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindContainer * soap_new_req__ns1__BindContainer(
	struct soap *soap)
{
	_ns1__BindContainer *_p = ::soap_new__ns1__BindContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindContainer * soap_new_set__ns1__BindContainer(
	struct soap *soap,
	ns1__BindContainer *model)
{
	_ns1__BindContainer *_p = ::soap_new__ns1__BindContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindContainer::model = model;
	}
	return _p;
}

inline int soap_write__ns1__BindContainer(struct soap *soap, _ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE__ns1__BindContainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindContainer(struct soap *soap, const char *URL, _ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE__ns1__BindContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__BindContainer(struct soap *soap, const char *URL, _ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE__ns1__BindContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindContainer(struct soap *soap, const char *URL, _ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE__ns1__BindContainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindContainer * SOAP_FMAC4 soap_get__ns1__BindContainer(struct soap*, _ns1__BindContainer *, const char*, const char*);

inline int soap_read__ns1__BindContainer(struct soap *soap, _ns1__BindContainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__BindContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindContainer(struct soap *soap, const char *URL, _ns1__BindContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__BindContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__BindContainer(struct soap *soap, _ns1__BindContainer *p)
{
	if (::soap_read__ns1__BindContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__AlarmResponse_DEFINED
#define SOAP_TYPE__ns1__AlarmResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AlarmResponse(struct soap*, const char*, int, const _ns1__AlarmResponse *, const char*);
SOAP_FMAC3 _ns1__AlarmResponse * SOAP_FMAC4 soap_in__ns1__AlarmResponse(struct soap*, const char*, _ns1__AlarmResponse *, const char*);
SOAP_FMAC1 _ns1__AlarmResponse * SOAP_FMAC2 soap_instantiate__ns1__AlarmResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AlarmResponse * soap_new__ns1__AlarmResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AlarmResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AlarmResponse * soap_new_req__ns1__AlarmResponse(
	struct soap *soap)
{
	_ns1__AlarmResponse *_p = ::soap_new__ns1__AlarmResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AlarmResponse * soap_new_set__ns1__AlarmResponse(
	struct soap *soap,
	ns1__ApiResponseForScada *AlarmResult)
{
	_ns1__AlarmResponse *_p = ::soap_new__ns1__AlarmResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AlarmResponse::AlarmResult = AlarmResult;
	}
	return _p;
}

inline int soap_write__ns1__AlarmResponse(struct soap *soap, _ns1__AlarmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmResponse", p->soap_type() == SOAP_TYPE__ns1__AlarmResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AlarmResponse(struct soap *soap, const char *URL, _ns1__AlarmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmResponse", p->soap_type() == SOAP_TYPE__ns1__AlarmResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AlarmResponse(struct soap *soap, const char *URL, _ns1__AlarmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmResponse", p->soap_type() == SOAP_TYPE__ns1__AlarmResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AlarmResponse(struct soap *soap, const char *URL, _ns1__AlarmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmResponse", p->soap_type() == SOAP_TYPE__ns1__AlarmResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AlarmResponse * SOAP_FMAC4 soap_get__ns1__AlarmResponse(struct soap*, _ns1__AlarmResponse *, const char*, const char*);

inline int soap_read__ns1__AlarmResponse(struct soap *soap, _ns1__AlarmResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__AlarmResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AlarmResponse(struct soap *soap, const char *URL, _ns1__AlarmResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__AlarmResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AlarmResponse(struct soap *soap, _ns1__AlarmResponse *p)
{
	if (::soap_read__ns1__AlarmResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__Alarm_DEFINED
#define SOAP_TYPE__ns1__Alarm_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Alarm(struct soap*, const char*, int, const _ns1__Alarm *, const char*);
SOAP_FMAC3 _ns1__Alarm * SOAP_FMAC4 soap_in__ns1__Alarm(struct soap*, const char*, _ns1__Alarm *, const char*);
SOAP_FMAC1 _ns1__Alarm * SOAP_FMAC2 soap_instantiate__ns1__Alarm(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Alarm * soap_new__ns1__Alarm(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Alarm(soap, n, NULL, NULL, NULL);
}

inline _ns1__Alarm * soap_new_req__ns1__Alarm(
	struct soap *soap)
{
	_ns1__Alarm *_p = ::soap_new__ns1__Alarm(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Alarm * soap_new_set__ns1__Alarm(
	struct soap *soap,
	ns1__ArrayOfAlarm *modelList)
{
	_ns1__Alarm *_p = ::soap_new__ns1__Alarm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Alarm::modelList = modelList;
	}
	return _p;
}

inline int soap_write__ns1__Alarm(struct soap *soap, _ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE__ns1__Alarm ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Alarm(struct soap *soap, const char *URL, _ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE__ns1__Alarm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Alarm(struct soap *soap, const char *URL, _ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE__ns1__Alarm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Alarm(struct soap *soap, const char *URL, _ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE__ns1__Alarm ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Alarm * SOAP_FMAC4 soap_get__ns1__Alarm(struct soap*, _ns1__Alarm *, const char*, const char*);

inline int soap_read__ns1__Alarm(struct soap *soap, _ns1__Alarm *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Alarm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Alarm(struct soap *soap, const char *URL, _ns1__Alarm *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Alarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Alarm(struct soap *soap, _ns1__Alarm *p)
{
	if (::soap_read__ns1__Alarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__UnBindSFCByScadaDTO_DEFINED
#define SOAP_TYPE_ns1__UnBindSFCByScadaDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnBindSFCByScadaDTO(struct soap*, const char*, int, const ns1__UnBindSFCByScadaDTO *, const char*);
SOAP_FMAC3 ns1__UnBindSFCByScadaDTO * SOAP_FMAC4 soap_in_ns1__UnBindSFCByScadaDTO(struct soap*, const char*, ns1__UnBindSFCByScadaDTO *, const char*);
SOAP_FMAC1 ns1__UnBindSFCByScadaDTO * SOAP_FMAC2 soap_instantiate_ns1__UnBindSFCByScadaDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UnBindSFCByScadaDTO * soap_new_ns1__UnBindSFCByScadaDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UnBindSFCByScadaDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__UnBindSFCByScadaDTO * soap_new_req_ns1__UnBindSFCByScadaDTO(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__UnBindSFCByScadaDTO *_p = ::soap_new_ns1__UnBindSFCByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__UnBindSFCByScadaDTO * soap_new_set_ns1__UnBindSFCByScadaDTO(
	struct soap *soap,
	wchar_t *SFC,
	ns1__ArrayOfString *BindSFCs,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__UnBindSFCByScadaDTO *_p = ::soap_new_ns1__UnBindSFCByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UnBindSFCByScadaDTO::SFC = SFC;
		_p->ns1__UnBindSFCByScadaDTO::BindSFCs = BindSFCs;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__UnBindSFCByScadaDTO(struct soap *soap, ns1__UnBindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__UnBindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UnBindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__UnBindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__UnBindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UnBindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__UnBindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__UnBindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UnBindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__UnBindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnBindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__UnBindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UnBindSFCByScadaDTO * SOAP_FMAC4 soap_get_ns1__UnBindSFCByScadaDTO(struct soap*, ns1__UnBindSFCByScadaDTO *, const char*, const char*);

inline int soap_read_ns1__UnBindSFCByScadaDTO(struct soap *soap, ns1__UnBindSFCByScadaDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UnBindSFCByScadaDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UnBindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__UnBindSFCByScadaDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UnBindSFCByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__UnBindSFCByScadaDTO(struct soap *soap, ns1__UnBindSFCByScadaDTO *p)
{
	if (::soap_read_ns1__UnBindSFCByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ToolLife_DEFINED
#define SOAP_TYPE_ns1__ToolLife_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ToolLife(struct soap*, const char*, int, const ns1__ToolLife *, const char*);
SOAP_FMAC3 ns1__ToolLife * SOAP_FMAC4 soap_in_ns1__ToolLife(struct soap*, const char*, ns1__ToolLife *, const char*);
SOAP_FMAC1 ns1__ToolLife * SOAP_FMAC2 soap_instantiate_ns1__ToolLife(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ToolLife * soap_new_ns1__ToolLife(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ToolLife(soap, n, NULL, NULL, NULL);
}

inline ns1__ToolLife * soap_new_req_ns1__ToolLife(
	struct soap *soap,
	double UsedLife,
	time_t LocalTime__1)
{
	ns1__ToolLife *_p = ::soap_new_ns1__ToolLife(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ToolLife::UsedLife = UsedLife;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__ToolLife * soap_new_set_ns1__ToolLife(
	struct soap *soap,
	wchar_t *ToolCode,
	double UsedLife,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__ToolLife *_p = ::soap_new_ns1__ToolLife(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ToolLife::ToolCode = ToolCode;
		_p->ns1__ToolLife::UsedLife = UsedLife;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__ToolLife(struct soap *soap, ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE_ns1__ToolLife ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ToolLife(struct soap *soap, const char *URL, ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE_ns1__ToolLife ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ToolLife(struct soap *soap, const char *URL, ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE_ns1__ToolLife ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ToolLife(struct soap *soap, const char *URL, ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolLife", p->soap_type() == SOAP_TYPE_ns1__ToolLife ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ToolLife * SOAP_FMAC4 soap_get_ns1__ToolLife(struct soap*, ns1__ToolLife *, const char*, const char*);

inline int soap_read_ns1__ToolLife(struct soap *soap, ns1__ToolLife *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ToolLife(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ToolLife(struct soap *soap, const char *URL, ns1__ToolLife *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ToolLife(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ToolLife(struct soap *soap, ns1__ToolLife *p)
{
	if (::soap_read_ns1__ToolLife(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ToolBind_DEFINED
#define SOAP_TYPE_ns1__ToolBind_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ToolBind(struct soap*, const char*, int, const ns1__ToolBind *, const char*);
SOAP_FMAC3 ns1__ToolBind * SOAP_FMAC4 soap_in_ns1__ToolBind(struct soap*, const char*, ns1__ToolBind *, const char*);
SOAP_FMAC1 ns1__ToolBind * SOAP_FMAC2 soap_instantiate_ns1__ToolBind(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ToolBind * soap_new_ns1__ToolBind(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ToolBind(soap, n, NULL, NULL, NULL);
}

inline ns1__ToolBind * soap_new_req_ns1__ToolBind(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__ToolBind *_p = ::soap_new_ns1__ToolBind(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__ToolBind * soap_new_set_ns1__ToolBind(
	struct soap *soap,
	wchar_t *ToolCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__ToolBind *_p = ::soap_new_ns1__ToolBind(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ToolBind::ToolCode = ToolCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__ToolBind(struct soap *soap, ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE_ns1__ToolBind ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ToolBind(struct soap *soap, const char *URL, ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE_ns1__ToolBind ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ToolBind(struct soap *soap, const char *URL, ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE_ns1__ToolBind ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ToolBind(struct soap *soap, const char *URL, ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ToolBind", p->soap_type() == SOAP_TYPE_ns1__ToolBind ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ToolBind * SOAP_FMAC4 soap_get_ns1__ToolBind(struct soap*, ns1__ToolBind *, const char*, const char*);

inline int soap_read_ns1__ToolBind(struct soap *soap, ns1__ToolBind *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ToolBind(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ToolBind(struct soap *soap, const char *URL, ns1__ToolBind *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ToolBind(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ToolBind(struct soap *soap, ns1__ToolBind *p)
{
	if (::soap_read_ns1__ToolBind(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__State_DEFINED
#define SOAP_TYPE_ns1__State_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__State(struct soap*, const char*, int, const ns1__State *, const char*);
SOAP_FMAC3 ns1__State * SOAP_FMAC4 soap_in_ns1__State(struct soap*, const char*, ns1__State *, const char*);
SOAP_FMAC1 ns1__State * SOAP_FMAC2 soap_instantiate_ns1__State(struct soap*, int, const char*, const char*, size_t*);

inline ns1__State * soap_new_ns1__State(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__State(soap, n, NULL, NULL, NULL);
}

inline ns1__State * soap_new_req_ns1__State(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__State *_p = ::soap_new_ns1__State(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__State * soap_new_set_ns1__State(
	struct soap *soap,
	wchar_t *StateCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__State *_p = ::soap_new_ns1__State(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__State::StateCode = StateCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__State(struct soap *soap, ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE_ns1__State ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__State(struct soap *soap, const char *URL, ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE_ns1__State ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__State(struct soap *soap, const char *URL, ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE_ns1__State ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__State(struct soap *soap, const char *URL, ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:State", p->soap_type() == SOAP_TYPE_ns1__State ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__State * SOAP_FMAC4 soap_get_ns1__State(struct soap*, ns1__State *, const char*, const char*);

inline int soap_read_ns1__State(struct soap *soap, ns1__State *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__State(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__State(struct soap *soap, const char *URL, ns1__State *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__State(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__State(struct soap *soap, ns1__State *p)
{
	if (::soap_read_ns1__State(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeVersionExamine_DEFINED
#define SOAP_TYPE_ns1__RecipeVersionExamine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeVersionExamine(struct soap*, const char*, int, const ns1__RecipeVersionExamine *, const char*);
SOAP_FMAC3 ns1__RecipeVersionExamine * SOAP_FMAC4 soap_in_ns1__RecipeVersionExamine(struct soap*, const char*, ns1__RecipeVersionExamine *, const char*);
SOAP_FMAC1 ns1__RecipeVersionExamine * SOAP_FMAC2 soap_instantiate_ns1__RecipeVersionExamine(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeVersionExamine * soap_new_ns1__RecipeVersionExamine(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeVersionExamine(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeVersionExamine * soap_new_req_ns1__RecipeVersionExamine(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__RecipeVersionExamine *_p = ::soap_new_ns1__RecipeVersionExamine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__RecipeVersionExamine * soap_new_set_ns1__RecipeVersionExamine(
	struct soap *soap,
	wchar_t *RecipeCode,
	wchar_t *Version,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__RecipeVersionExamine *_p = ::soap_new_ns1__RecipeVersionExamine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeVersionExamine::RecipeCode = RecipeCode;
		_p->ns1__RecipeVersionExamine::Version = Version;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__RecipeVersionExamine(struct soap *soap, ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE_ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeVersionExamine(struct soap *soap, const char *URL, ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE_ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeVersionExamine(struct soap *soap, const char *URL, ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE_ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeVersionExamine(struct soap *soap, const char *URL, ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeVersionExamine", p->soap_type() == SOAP_TYPE_ns1__RecipeVersionExamine ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeVersionExamine * SOAP_FMAC4 soap_get_ns1__RecipeVersionExamine(struct soap*, ns1__RecipeVersionExamine *, const char*, const char*);

inline int soap_read_ns1__RecipeVersionExamine(struct soap *soap, ns1__RecipeVersionExamine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeVersionExamine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeVersionExamine(struct soap *soap, const char *URL, ns1__RecipeVersionExamine *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeVersionExamine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeVersionExamine(struct soap *soap, ns1__RecipeVersionExamine *p)
{
	if (::soap_read_ns1__RecipeVersionExamine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeListGetForEqu_DEFINED
#define SOAP_TYPE_ns1__RecipeListGetForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeListGetForEqu(struct soap*, const char*, int, const ns1__RecipeListGetForEqu *, const char*);
SOAP_FMAC3 ns1__RecipeListGetForEqu * SOAP_FMAC4 soap_in_ns1__RecipeListGetForEqu(struct soap*, const char*, ns1__RecipeListGetForEqu *, const char*);
SOAP_FMAC1 ns1__RecipeListGetForEqu * SOAP_FMAC2 soap_instantiate_ns1__RecipeListGetForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeListGetForEqu * soap_new_ns1__RecipeListGetForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeListGetForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeListGetForEqu * soap_new_req_ns1__RecipeListGetForEqu(
	struct soap *soap,
	time_t LastUpdateOnTime)
{
	ns1__RecipeListGetForEqu *_p = ::soap_new_ns1__RecipeListGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeListGetForEqu::LastUpdateOnTime = LastUpdateOnTime;
	}
	return _p;
}

inline ns1__RecipeListGetForEqu * soap_new_set_ns1__RecipeListGetForEqu(
	struct soap *soap,
	wchar_t *RecipeCode,
	wchar_t *Version,
	wchar_t *ProductCode,
	time_t LastUpdateOnTime)
{
	ns1__RecipeListGetForEqu *_p = ::soap_new_ns1__RecipeListGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeListGetForEqu::RecipeCode = RecipeCode;
		_p->ns1__RecipeListGetForEqu::Version = Version;
		_p->ns1__RecipeListGetForEqu::ProductCode = ProductCode;
		_p->ns1__RecipeListGetForEqu::LastUpdateOnTime = LastUpdateOnTime;
	}
	return _p;
}

inline int soap_write_ns1__RecipeListGetForEqu(struct soap *soap, ns1__RecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeListGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeListGetForEqu(struct soap *soap, const char *URL, ns1__RecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeListGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeListGetForEqu(struct soap *soap, const char *URL, ns1__RecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeListGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeListGetForEqu(struct soap *soap, const char *URL, ns1__RecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeListGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeListGetForEqu * SOAP_FMAC4 soap_get_ns1__RecipeListGetForEqu(struct soap*, ns1__RecipeListGetForEqu *, const char*, const char*);

inline int soap_read_ns1__RecipeListGetForEqu(struct soap *soap, ns1__RecipeListGetForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeListGetForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeListGetForEqu(struct soap *soap, const char *URL, ns1__RecipeListGetForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeListGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeListGetForEqu(struct soap *soap, ns1__RecipeListGetForEqu *p)
{
	if (::soap_read_ns1__RecipeListGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfRecipeListGetForEqu_DEFINED
#define SOAP_TYPE_ns1__ArrayOfRecipeListGetForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfRecipeListGetForEqu(struct soap*, const char*, int, const ns1__ArrayOfRecipeListGetForEqu *, const char*);
SOAP_FMAC3 ns1__ArrayOfRecipeListGetForEqu * SOAP_FMAC4 soap_in_ns1__ArrayOfRecipeListGetForEqu(struct soap*, const char*, ns1__ArrayOfRecipeListGetForEqu *, const char*);
SOAP_FMAC1 ns1__ArrayOfRecipeListGetForEqu * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfRecipeListGetForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfRecipeListGetForEqu * soap_new_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfRecipeListGetForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfRecipeListGetForEqu * soap_new_req_ns1__ArrayOfRecipeListGetForEqu(
	struct soap *soap)
{
	ns1__ArrayOfRecipeListGetForEqu *_p = ::soap_new_ns1__ArrayOfRecipeListGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfRecipeListGetForEqu * soap_new_set_ns1__ArrayOfRecipeListGetForEqu(
	struct soap *soap,
	const std::vector<ns1__RecipeListGetForEqu *> & RecipeListGetForEqu)
{
	ns1__ArrayOfRecipeListGetForEqu *_p = ::soap_new_ns1__ArrayOfRecipeListGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfRecipeListGetForEqu::RecipeListGetForEqu = RecipeListGetForEqu;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, ns1__ArrayOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfRecipeListGetForEqu * SOAP_FMAC4 soap_get_ns1__ArrayOfRecipeListGetForEqu(struct soap*, ns1__ArrayOfRecipeListGetForEqu *, const char*, const char*);

inline int soap_read_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, ns1__ArrayOfRecipeListGetForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfRecipeListGetForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeListGetForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfRecipeListGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfRecipeListGetForEqu(struct soap *soap, ns1__ArrayOfRecipeListGetForEqu *p)
{
	if (::soap_read_ns1__ArrayOfRecipeListGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu_DEFINED
#define SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, const char*, int, const ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu * SOAP_FMAC4 soap_in_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, const char*, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *, const char*);
SOAP_FMAC1 ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu * soap_new_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu * soap_new_req_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *_p = ::soap_new_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu * soap_new_set_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(
	struct soap *soap,
	ns1__ArrayOfRecipeListGetForEqu *Data,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *_p = ::soap_new_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu::Data = Data;
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfRecipeListGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu * SOAP_FMAC4 soap_get_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *, const char*, const char*);

inline int soap_read_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *p)
{
	if (::soap_read_ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeListGet_DEFINED
#define SOAP_TYPE_ns1__RecipeListGet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeListGet(struct soap*, const char*, int, const ns1__RecipeListGet *, const char*);
SOAP_FMAC3 ns1__RecipeListGet * SOAP_FMAC4 soap_in_ns1__RecipeListGet(struct soap*, const char*, ns1__RecipeListGet *, const char*);
SOAP_FMAC1 ns1__RecipeListGet * SOAP_FMAC2 soap_instantiate_ns1__RecipeListGet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeListGet * soap_new_ns1__RecipeListGet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeListGet(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeListGet * soap_new_req_ns1__RecipeListGet(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__RecipeListGet *_p = ::soap_new_ns1__RecipeListGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__RecipeListGet * soap_new_set_ns1__RecipeListGet(
	struct soap *soap,
	wchar_t *ProductCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__RecipeListGet *_p = ::soap_new_ns1__RecipeListGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeListGet::ProductCode = ProductCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__RecipeListGet(struct soap *soap, ns1__RecipeListGet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGet", p->soap_type() == SOAP_TYPE_ns1__RecipeListGet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeListGet(struct soap *soap, const char *URL, ns1__RecipeListGet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGet", p->soap_type() == SOAP_TYPE_ns1__RecipeListGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeListGet(struct soap *soap, const char *URL, ns1__RecipeListGet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGet", p->soap_type() == SOAP_TYPE_ns1__RecipeListGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeListGet(struct soap *soap, const char *URL, ns1__RecipeListGet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeListGet", p->soap_type() == SOAP_TYPE_ns1__RecipeListGet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeListGet * SOAP_FMAC4 soap_get_ns1__RecipeListGet(struct soap*, ns1__RecipeListGet *, const char*, const char*);

inline int soap_read_ns1__RecipeListGet(struct soap *soap, ns1__RecipeListGet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeListGet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeListGet(struct soap *soap, const char *URL, ns1__RecipeListGet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeListGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeListGet(struct soap *soap, ns1__RecipeListGet *p)
{
	if (::soap_read_ns1__RecipeListGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeGetParamForEqu_DEFINED
#define SOAP_TYPE_ns1__RecipeGetParamForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeGetParamForEqu(struct soap*, const char*, int, const ns1__RecipeGetParamForEqu *, const char*);
SOAP_FMAC3 ns1__RecipeGetParamForEqu * SOAP_FMAC4 soap_in_ns1__RecipeGetParamForEqu(struct soap*, const char*, ns1__RecipeGetParamForEqu *, const char*);
SOAP_FMAC1 ns1__RecipeGetParamForEqu * SOAP_FMAC2 soap_instantiate_ns1__RecipeGetParamForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeGetParamForEqu * soap_new_ns1__RecipeGetParamForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeGetParamForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeGetParamForEqu * soap_new_req_ns1__RecipeGetParamForEqu(
	struct soap *soap)
{
	ns1__RecipeGetParamForEqu *_p = ::soap_new_ns1__RecipeGetParamForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RecipeGetParamForEqu * soap_new_set_ns1__RecipeGetParamForEqu(
	struct soap *soap,
	wchar_t *ParamCode,
	wchar_t *ParamUpper,
	wchar_t *ParamLower,
	wchar_t *ParamValue)
{
	ns1__RecipeGetParamForEqu *_p = ::soap_new_ns1__RecipeGetParamForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeGetParamForEqu::ParamCode = ParamCode;
		_p->ns1__RecipeGetParamForEqu::ParamUpper = ParamUpper;
		_p->ns1__RecipeGetParamForEqu::ParamLower = ParamLower;
		_p->ns1__RecipeGetParamForEqu::ParamValue = ParamValue;
	}
	return _p;
}

inline int soap_write_ns1__RecipeGetParamForEqu(struct soap *soap, ns1__RecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__RecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__RecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__RecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeGetParamForEqu * SOAP_FMAC4 soap_get_ns1__RecipeGetParamForEqu(struct soap*, ns1__RecipeGetParamForEqu *, const char*, const char*);

inline int soap_read_ns1__RecipeGetParamForEqu(struct soap *soap, ns1__RecipeGetParamForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeGetParamForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__RecipeGetParamForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeGetParamForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeGetParamForEqu(struct soap *soap, ns1__RecipeGetParamForEqu *p)
{
	if (::soap_read_ns1__RecipeGetParamForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfRecipeGetParamForEqu_DEFINED
#define SOAP_TYPE_ns1__ArrayOfRecipeGetParamForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfRecipeGetParamForEqu(struct soap*, const char*, int, const ns1__ArrayOfRecipeGetParamForEqu *, const char*);
SOAP_FMAC3 ns1__ArrayOfRecipeGetParamForEqu * SOAP_FMAC4 soap_in_ns1__ArrayOfRecipeGetParamForEqu(struct soap*, const char*, ns1__ArrayOfRecipeGetParamForEqu *, const char*);
SOAP_FMAC1 ns1__ArrayOfRecipeGetParamForEqu * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfRecipeGetParamForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfRecipeGetParamForEqu * soap_new_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfRecipeGetParamForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfRecipeGetParamForEqu * soap_new_req_ns1__ArrayOfRecipeGetParamForEqu(
	struct soap *soap)
{
	ns1__ArrayOfRecipeGetParamForEqu *_p = ::soap_new_ns1__ArrayOfRecipeGetParamForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfRecipeGetParamForEqu * soap_new_set_ns1__ArrayOfRecipeGetParamForEqu(
	struct soap *soap,
	const std::vector<ns1__RecipeGetParamForEqu *> & RecipeGetParamForEqu)
{
	ns1__ArrayOfRecipeGetParamForEqu *_p = ::soap_new_ns1__ArrayOfRecipeGetParamForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfRecipeGetParamForEqu::RecipeGetParamForEqu = RecipeGetParamForEqu;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, ns1__ArrayOfRecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeGetParamForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeGetParamForEqu", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeGetParamForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfRecipeGetParamForEqu * SOAP_FMAC4 soap_get_ns1__ArrayOfRecipeGetParamForEqu(struct soap*, ns1__ArrayOfRecipeGetParamForEqu *, const char*, const char*);

inline int soap_read_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, ns1__ArrayOfRecipeGetParamForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfRecipeGetParamForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, const char *URL, ns1__ArrayOfRecipeGetParamForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfRecipeGetParamForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfRecipeGetParamForEqu(struct soap *soap, ns1__ArrayOfRecipeGetParamForEqu *p)
{
	if (::soap_read_ns1__ArrayOfRecipeGetParamForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeGetForEqu_DEFINED
#define SOAP_TYPE_ns1__RecipeGetForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeGetForEqu(struct soap*, const char*, int, const ns1__RecipeGetForEqu *, const char*);
SOAP_FMAC3 ns1__RecipeGetForEqu * SOAP_FMAC4 soap_in_ns1__RecipeGetForEqu(struct soap*, const char*, ns1__RecipeGetForEqu *, const char*);
SOAP_FMAC1 ns1__RecipeGetForEqu * SOAP_FMAC2 soap_instantiate_ns1__RecipeGetForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeGetForEqu * soap_new_ns1__RecipeGetForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeGetForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeGetForEqu * soap_new_req_ns1__RecipeGetForEqu(
	struct soap *soap,
	time_t LastUpdateOnTime)
{
	ns1__RecipeGetForEqu *_p = ::soap_new_ns1__RecipeGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeGetForEqu::LastUpdateOnTime = LastUpdateOnTime;
	}
	return _p;
}

inline ns1__RecipeGetForEqu * soap_new_set_ns1__RecipeGetForEqu(
	struct soap *soap,
	wchar_t *Version,
	time_t LastUpdateOnTime,
	ns1__ArrayOfRecipeGetParamForEqu *ParamList)
{
	ns1__RecipeGetForEqu *_p = ::soap_new_ns1__RecipeGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeGetForEqu::Version = Version;
		_p->ns1__RecipeGetForEqu::LastUpdateOnTime = LastUpdateOnTime;
		_p->ns1__RecipeGetForEqu::ParamList = ParamList;
	}
	return _p;
}

inline int soap_write_ns1__RecipeGetForEqu(struct soap *soap, ns1__RecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeGetForEqu(struct soap *soap, const char *URL, ns1__RecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeGetForEqu(struct soap *soap, const char *URL, ns1__RecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeGetForEqu(struct soap *soap, const char *URL, ns1__RecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__RecipeGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeGetForEqu * SOAP_FMAC4 soap_get_ns1__RecipeGetForEqu(struct soap*, ns1__RecipeGetForEqu *, const char*, const char*);

inline int soap_read_ns1__RecipeGetForEqu(struct soap *soap, ns1__RecipeGetForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeGetForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeGetForEqu(struct soap *soap, const char *URL, ns1__RecipeGetForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeGetForEqu(struct soap *soap, ns1__RecipeGetForEqu *p)
{
	if (::soap_read_ns1__RecipeGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseDataForScadaOfRecipeGetForEqu_DEFINED
#define SOAP_TYPE_ns1__ApiResponseDataForScadaOfRecipeGetForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, const char*, int, const ns1__ApiResponseDataForScadaOfRecipeGetForEqu *, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfRecipeGetForEqu * SOAP_FMAC4 soap_in_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, const char*, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *, const char*);
SOAP_FMAC1 ns1__ApiResponseDataForScadaOfRecipeGetForEqu * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseDataForScadaOfRecipeGetForEqu * soap_new_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseDataForScadaOfRecipeGetForEqu * soap_new_req_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseDataForScadaOfRecipeGetForEqu *_p = ::soap_new_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseDataForScadaOfRecipeGetForEqu * soap_new_set_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(
	struct soap *soap,
	ns1__RecipeGetForEqu *Data,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseDataForScadaOfRecipeGetForEqu *_p = ::soap_new_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApiResponseDataForScadaOfRecipeGetForEqu::Data = Data;
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfRecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfRecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfRecipeGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfRecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfRecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfRecipeGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfRecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfRecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfRecipeGetForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfRecipeGetForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfRecipeGetForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfRecipeGetForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfRecipeGetForEqu * SOAP_FMAC4 soap_get_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *, const char*, const char*);

inline int soap_read_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *p)
{
	if (::soap_read_ns1__ApiResponseDataForScadaOfRecipeGetForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeGet_DEFINED
#define SOAP_TYPE_ns1__RecipeGet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeGet(struct soap*, const char*, int, const ns1__RecipeGet *, const char*);
SOAP_FMAC3 ns1__RecipeGet * SOAP_FMAC4 soap_in_ns1__RecipeGet(struct soap*, const char*, ns1__RecipeGet *, const char*);
SOAP_FMAC1 ns1__RecipeGet * SOAP_FMAC2 soap_instantiate_ns1__RecipeGet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeGet * soap_new_ns1__RecipeGet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeGet(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeGet * soap_new_req_ns1__RecipeGet(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__RecipeGet *_p = ::soap_new_ns1__RecipeGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__RecipeGet * soap_new_set_ns1__RecipeGet(
	struct soap *soap,
	wchar_t *RecipeCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__RecipeGet *_p = ::soap_new_ns1__RecipeGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeGet::RecipeCode = RecipeCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__RecipeGet(struct soap *soap, ns1__RecipeGet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGet", p->soap_type() == SOAP_TYPE_ns1__RecipeGet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeGet(struct soap *soap, const char *URL, ns1__RecipeGet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGet", p->soap_type() == SOAP_TYPE_ns1__RecipeGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeGet(struct soap *soap, const char *URL, ns1__RecipeGet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGet", p->soap_type() == SOAP_TYPE_ns1__RecipeGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeGet(struct soap *soap, const char *URL, ns1__RecipeGet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeGet", p->soap_type() == SOAP_TYPE_ns1__RecipeGet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeGet * SOAP_FMAC4 soap_get_ns1__RecipeGet(struct soap*, ns1__RecipeGet *, const char*, const char*);

inline int soap_read_ns1__RecipeGet(struct soap *soap, ns1__RecipeGet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeGet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeGet(struct soap *soap, const char *URL, ns1__RecipeGet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeGet(struct soap *soap, ns1__RecipeGet *p)
{
	if (::soap_read_ns1__RecipeGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RecipeParam_DEFINED
#define SOAP_TYPE_ns1__RecipeParam_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecipeParam(struct soap*, const char*, int, const ns1__RecipeParam *, const char*);
SOAP_FMAC3 ns1__RecipeParam * SOAP_FMAC4 soap_in_ns1__RecipeParam(struct soap*, const char*, ns1__RecipeParam *, const char*);
SOAP_FMAC1 ns1__RecipeParam * SOAP_FMAC2 soap_instantiate_ns1__RecipeParam(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecipeParam * soap_new_ns1__RecipeParam(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecipeParam(soap, n, NULL, NULL, NULL);
}

inline ns1__RecipeParam * soap_new_req_ns1__RecipeParam(
	struct soap *soap,
	time_t Timestamp)
{
	ns1__RecipeParam *_p = ::soap_new_ns1__RecipeParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeParam::Timestamp = Timestamp;
	}
	return _p;
}

inline ns1__RecipeParam * soap_new_set_ns1__RecipeParam(
	struct soap *soap,
	wchar_t *ParamCode,
	wchar_t *ParamUpper,
	wchar_t *ParamLower,
	wchar_t *ParamValue,
	time_t Timestamp)
{
	ns1__RecipeParam *_p = ::soap_new_ns1__RecipeParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecipeParam::ParamCode = ParamCode;
		_p->ns1__RecipeParam::ParamUpper = ParamUpper;
		_p->ns1__RecipeParam::ParamLower = ParamLower;
		_p->ns1__RecipeParam::ParamValue = ParamValue;
		_p->ns1__RecipeParam::Timestamp = Timestamp;
	}
	return _p;
}

inline int soap_write_ns1__RecipeParam(struct soap *soap, ns1__RecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeParam", p->soap_type() == SOAP_TYPE_ns1__RecipeParam ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecipeParam(struct soap *soap, const char *URL, ns1__RecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeParam", p->soap_type() == SOAP_TYPE_ns1__RecipeParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RecipeParam(struct soap *soap, const char *URL, ns1__RecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeParam", p->soap_type() == SOAP_TYPE_ns1__RecipeParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecipeParam(struct soap *soap, const char *URL, ns1__RecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecipeParam", p->soap_type() == SOAP_TYPE_ns1__RecipeParam ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecipeParam * SOAP_FMAC4 soap_get_ns1__RecipeParam(struct soap*, ns1__RecipeParam *, const char*, const char*);

inline int soap_read_ns1__RecipeParam(struct soap *soap, ns1__RecipeParam *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RecipeParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecipeParam(struct soap *soap, const char *URL, ns1__RecipeParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RecipeParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RecipeParam(struct soap *soap, ns1__RecipeParam *p)
{
	if (::soap_read_ns1__RecipeParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfRecipeParam_DEFINED
#define SOAP_TYPE_ns1__ArrayOfRecipeParam_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfRecipeParam(struct soap*, const char*, int, const ns1__ArrayOfRecipeParam *, const char*);
SOAP_FMAC3 ns1__ArrayOfRecipeParam * SOAP_FMAC4 soap_in_ns1__ArrayOfRecipeParam(struct soap*, const char*, ns1__ArrayOfRecipeParam *, const char*);
SOAP_FMAC1 ns1__ArrayOfRecipeParam * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfRecipeParam(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfRecipeParam * soap_new_ns1__ArrayOfRecipeParam(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfRecipeParam(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfRecipeParam * soap_new_req_ns1__ArrayOfRecipeParam(
	struct soap *soap)
{
	ns1__ArrayOfRecipeParam *_p = ::soap_new_ns1__ArrayOfRecipeParam(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfRecipeParam * soap_new_set_ns1__ArrayOfRecipeParam(
	struct soap *soap,
	const std::vector<ns1__RecipeParam *> & RecipeParam)
{
	ns1__ArrayOfRecipeParam *_p = ::soap_new_ns1__ArrayOfRecipeParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfRecipeParam::RecipeParam = RecipeParam;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfRecipeParam(struct soap *soap, ns1__ArrayOfRecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeParam", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeParam ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfRecipeParam(struct soap *soap, const char *URL, ns1__ArrayOfRecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeParam", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfRecipeParam(struct soap *soap, const char *URL, ns1__ArrayOfRecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeParam", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfRecipeParam(struct soap *soap, const char *URL, ns1__ArrayOfRecipeParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfRecipeParam", p->soap_type() == SOAP_TYPE_ns1__ArrayOfRecipeParam ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfRecipeParam * SOAP_FMAC4 soap_get_ns1__ArrayOfRecipeParam(struct soap*, ns1__ArrayOfRecipeParam *, const char*, const char*);

inline int soap_read_ns1__ArrayOfRecipeParam(struct soap *soap, ns1__ArrayOfRecipeParam *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfRecipeParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfRecipeParam(struct soap *soap, const char *URL, ns1__ArrayOfRecipeParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfRecipeParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfRecipeParam(struct soap *soap, ns1__ArrayOfRecipeParam *p)
{
	if (::soap_read_ns1__ArrayOfRecipeParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Recipe_DEFINED
#define SOAP_TYPE_ns1__Recipe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Recipe(struct soap*, const char*, int, const ns1__Recipe *, const char*);
SOAP_FMAC3 ns1__Recipe * SOAP_FMAC4 soap_in_ns1__Recipe(struct soap*, const char*, ns1__Recipe *, const char*);
SOAP_FMAC1 ns1__Recipe * SOAP_FMAC2 soap_instantiate_ns1__Recipe(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Recipe * soap_new_ns1__Recipe(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Recipe(soap, n, NULL, NULL, NULL);
}

inline ns1__Recipe * soap_new_req_ns1__Recipe(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__Recipe *_p = ::soap_new_ns1__Recipe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__Recipe * soap_new_set_ns1__Recipe(
	struct soap *soap,
	wchar_t *RecipeCode,
	wchar_t *Version,
	wchar_t *ProductCode,
	ns1__ArrayOfRecipeParam *ParamList,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__Recipe *_p = ::soap_new_ns1__Recipe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Recipe::RecipeCode = RecipeCode;
		_p->ns1__Recipe::Version = Version;
		_p->ns1__Recipe::ProductCode = ProductCode;
		_p->ns1__Recipe::ParamList = ParamList;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__Recipe(struct soap *soap, ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE_ns1__Recipe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Recipe(struct soap *soap, const char *URL, ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE_ns1__Recipe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Recipe(struct soap *soap, const char *URL, ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE_ns1__Recipe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Recipe(struct soap *soap, const char *URL, ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Recipe", p->soap_type() == SOAP_TYPE_ns1__Recipe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Recipe * SOAP_FMAC4 soap_get_ns1__Recipe(struct soap*, ns1__Recipe *, const char*, const char*);

inline int soap_read_ns1__Recipe(struct soap *soap, ns1__Recipe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Recipe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Recipe(struct soap *soap, const char *URL, ns1__Recipe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Recipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Recipe(struct soap *soap, ns1__Recipe *p)
{
	if (::soap_read_ns1__Recipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OutboundSFC_DEFINED
#define SOAP_TYPE_ns1__OutboundSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OutboundSFC(struct soap*, const char*, int, const ns1__OutboundSFC *, const char*);
SOAP_FMAC3 ns1__OutboundSFC * SOAP_FMAC4 soap_in_ns1__OutboundSFC(struct soap*, const char*, ns1__OutboundSFC *, const char*);
SOAP_FMAC1 ns1__OutboundSFC * SOAP_FMAC2 soap_instantiate_ns1__OutboundSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OutboundSFC * soap_new_ns1__OutboundSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OutboundSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__OutboundSFC * soap_new_req_ns1__OutboundSFC(
	struct soap *soap,
	int *Passed)
{
	ns1__OutboundSFC *_p = ::soap_new_ns1__OutboundSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundSFC::Passed = Passed;
	}
	return _p;
}

inline ns1__OutboundSFC * soap_new_set_ns1__OutboundSFC(
	struct soap *soap,
	wchar_t *SFC,
	int *Passed,
	ns1__ArrayOfParamDTO *ParamList,
	ns1__ArrayOfString *BindFeedingCodes)
{
	ns1__OutboundSFC *_p = ::soap_new_ns1__OutboundSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundSFC::SFC = SFC;
		_p->ns1__OutboundSFC::Passed = Passed;
		_p->ns1__OutboundSFC::ParamList = ParamList;
		_p->ns1__OutboundSFC::BindFeedingCodes = BindFeedingCodes;
	}
	return _p;
}

inline int soap_write_ns1__OutboundSFC(struct soap *soap, ns1__OutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundSFC", p->soap_type() == SOAP_TYPE_ns1__OutboundSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OutboundSFC(struct soap *soap, const char *URL, ns1__OutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundSFC", p->soap_type() == SOAP_TYPE_ns1__OutboundSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OutboundSFC(struct soap *soap, const char *URL, ns1__OutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundSFC", p->soap_type() == SOAP_TYPE_ns1__OutboundSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OutboundSFC(struct soap *soap, const char *URL, ns1__OutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundSFC", p->soap_type() == SOAP_TYPE_ns1__OutboundSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OutboundSFC * SOAP_FMAC4 soap_get_ns1__OutboundSFC(struct soap*, ns1__OutboundSFC *, const char*, const char*);

inline int soap_read_ns1__OutboundSFC(struct soap *soap, ns1__OutboundSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OutboundSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OutboundSFC(struct soap *soap, const char *URL, ns1__OutboundSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OutboundSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OutboundSFC(struct soap *soap, ns1__OutboundSFC *p)
{
	if (::soap_read_ns1__OutboundSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOutboundSFC_DEFINED
#define SOAP_TYPE_ns1__ArrayOfOutboundSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfOutboundSFC(struct soap*, const char*, int, const ns1__ArrayOfOutboundSFC *, const char*);
SOAP_FMAC3 ns1__ArrayOfOutboundSFC * SOAP_FMAC4 soap_in_ns1__ArrayOfOutboundSFC(struct soap*, const char*, ns1__ArrayOfOutboundSFC *, const char*);
SOAP_FMAC1 ns1__ArrayOfOutboundSFC * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfOutboundSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfOutboundSFC * soap_new_ns1__ArrayOfOutboundSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfOutboundSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfOutboundSFC * soap_new_req_ns1__ArrayOfOutboundSFC(
	struct soap *soap)
{
	ns1__ArrayOfOutboundSFC *_p = ::soap_new_ns1__ArrayOfOutboundSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfOutboundSFC * soap_new_set_ns1__ArrayOfOutboundSFC(
	struct soap *soap,
	const std::vector<ns1__OutboundSFC *> & OutboundSFC)
{
	ns1__ArrayOfOutboundSFC *_p = ::soap_new_ns1__ArrayOfOutboundSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfOutboundSFC::OutboundSFC = OutboundSFC;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfOutboundSFC(struct soap *soap, ns1__ArrayOfOutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfOutboundSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfOutboundSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfOutboundSFC(struct soap *soap, const char *URL, ns1__ArrayOfOutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfOutboundSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfOutboundSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfOutboundSFC(struct soap *soap, const char *URL, ns1__ArrayOfOutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfOutboundSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfOutboundSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfOutboundSFC(struct soap *soap, const char *URL, ns1__ArrayOfOutboundSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfOutboundSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfOutboundSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfOutboundSFC * SOAP_FMAC4 soap_get_ns1__ArrayOfOutboundSFC(struct soap*, ns1__ArrayOfOutboundSFC *, const char*, const char*);

inline int soap_read_ns1__ArrayOfOutboundSFC(struct soap *soap, ns1__ArrayOfOutboundSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfOutboundSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfOutboundSFC(struct soap *soap, const char *URL, ns1__ArrayOfOutboundSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfOutboundSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfOutboundSFC(struct soap *soap, ns1__ArrayOfOutboundSFC *p)
{
	if (::soap_read_ns1__ArrayOfOutboundSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OutboundMore_DEFINED
#define SOAP_TYPE_ns1__OutboundMore_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OutboundMore(struct soap*, const char*, int, const ns1__OutboundMore *, const char*);
SOAP_FMAC3 ns1__OutboundMore * SOAP_FMAC4 soap_in_ns1__OutboundMore(struct soap*, const char*, ns1__OutboundMore *, const char*);
SOAP_FMAC1 ns1__OutboundMore * SOAP_FMAC2 soap_instantiate_ns1__OutboundMore(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OutboundMore * soap_new_ns1__OutboundMore(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OutboundMore(soap, n, NULL, NULL, NULL);
}

inline ns1__OutboundMore * soap_new_req_ns1__OutboundMore(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__OutboundMore *_p = ::soap_new_ns1__OutboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__OutboundMore * soap_new_set_ns1__OutboundMore(
	struct soap *soap,
	ns1__ArrayOfOutboundSFC *SFCs,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__OutboundMore *_p = ::soap_new_ns1__OutboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundMore::SFCs = SFCs;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__OutboundMore(struct soap *soap, ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE_ns1__OutboundMore ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OutboundMore(struct soap *soap, const char *URL, ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE_ns1__OutboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OutboundMore(struct soap *soap, const char *URL, ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE_ns1__OutboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OutboundMore(struct soap *soap, const char *URL, ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundMore", p->soap_type() == SOAP_TYPE_ns1__OutboundMore ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OutboundMore * SOAP_FMAC4 soap_get_ns1__OutboundMore(struct soap*, ns1__OutboundMore *, const char*, const char*);

inline int soap_read_ns1__OutboundMore(struct soap *soap, ns1__OutboundMore *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OutboundMore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OutboundMore(struct soap *soap, const char *URL, ns1__OutboundMore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OutboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OutboundMore(struct soap *soap, ns1__OutboundMore *p)
{
	if (::soap_read_ns1__OutboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OutboundInSFCOutputQty_DEFINED
#define SOAP_TYPE_ns1__OutboundInSFCOutputQty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OutboundInSFCOutputQty(struct soap*, const char*, int, const ns1__OutboundInSFCOutputQty *, const char*);
SOAP_FMAC3 ns1__OutboundInSFCOutputQty * SOAP_FMAC4 soap_in_ns1__OutboundInSFCOutputQty(struct soap*, const char*, ns1__OutboundInSFCOutputQty *, const char*);
SOAP_FMAC1 ns1__OutboundInSFCOutputQty * SOAP_FMAC2 soap_instantiate_ns1__OutboundInSFCOutputQty(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OutboundInSFCOutputQty * soap_new_ns1__OutboundInSFCOutputQty(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OutboundInSFCOutputQty(soap, n, NULL, NULL, NULL);
}

inline ns1__OutboundInSFCOutputQty * soap_new_req_ns1__OutboundInSFCOutputQty(
	struct soap *soap,
	const std::wstring& TotalQty,
	const std::wstring& OKQty,
	const std::wstring& NGQty,
	time_t LocalTime__1)
{
	ns1__OutboundInSFCOutputQty *_p = ::soap_new_ns1__OutboundInSFCOutputQty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundInSFCOutputQty::TotalQty = TotalQty;
		_p->ns1__OutboundInSFCOutputQty::OKQty = OKQty;
		_p->ns1__OutboundInSFCOutputQty::NGQty = NGQty;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__OutboundInSFCOutputQty * soap_new_set_ns1__OutboundInSFCOutputQty(
	struct soap *soap,
	wchar_t *SFC,
	const std::wstring& TotalQty,
	const std::wstring& OKQty,
	const std::wstring& NGQty,
	ns1__ArrayOfParamDTO *ParamList,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__OutboundInSFCOutputQty *_p = ::soap_new_ns1__OutboundInSFCOutputQty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundInSFCOutputQty::SFC = SFC;
		_p->ns1__OutboundInSFCOutputQty::TotalQty = TotalQty;
		_p->ns1__OutboundInSFCOutputQty::OKQty = OKQty;
		_p->ns1__OutboundInSFCOutputQty::NGQty = NGQty;
		_p->ns1__OutboundInSFCOutputQty::ParamList = ParamList;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__OutboundInSFCOutputQty(struct soap *soap, ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE_ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE_ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE_ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInSFCOutputQty", p->soap_type() == SOAP_TYPE_ns1__OutboundInSFCOutputQty ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OutboundInSFCOutputQty * SOAP_FMAC4 soap_get_ns1__OutboundInSFCOutputQty(struct soap*, ns1__OutboundInSFCOutputQty *, const char*, const char*);

inline int soap_read_ns1__OutboundInSFCOutputQty(struct soap *soap, ns1__OutboundInSFCOutputQty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OutboundInSFCOutputQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, ns1__OutboundInSFCOutputQty *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OutboundInSFCOutputQty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OutboundInSFCOutputQty(struct soap *soap, ns1__OutboundInSFCOutputQty *p)
{
	if (::soap_read_ns1__OutboundInSFCOutputQty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OutboundInLaminating_DEFINED
#define SOAP_TYPE_ns1__OutboundInLaminating_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OutboundInLaminating(struct soap*, const char*, int, const ns1__OutboundInLaminating *, const char*);
SOAP_FMAC3 ns1__OutboundInLaminating * SOAP_FMAC4 soap_in_ns1__OutboundInLaminating(struct soap*, const char*, ns1__OutboundInLaminating *, const char*);
SOAP_FMAC1 ns1__OutboundInLaminating * SOAP_FMAC2 soap_instantiate_ns1__OutboundInLaminating(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OutboundInLaminating * soap_new_ns1__OutboundInLaminating(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OutboundInLaminating(soap, n, NULL, NULL, NULL);
}

inline ns1__OutboundInLaminating * soap_new_req_ns1__OutboundInLaminating(
	struct soap *soap,
	int *Passed,
	time_t LocalTime__1)
{
	ns1__OutboundInLaminating *_p = ::soap_new_ns1__OutboundInLaminating(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundInLaminating::Passed = Passed;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__OutboundInLaminating * soap_new_set_ns1__OutboundInLaminating(
	struct soap *soap,
	wchar_t *SFC,
	int *Passed,
	ns1__ArrayOfParamDTO *ParamList,
	ns1__ArrayOfString *BindFeedingCodes,
	ns1__ArrayOfString *BindDJCodes,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__OutboundInLaminating *_p = ::soap_new_ns1__OutboundInLaminating(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OutboundInLaminating::SFC = SFC;
		_p->ns1__OutboundInLaminating::Passed = Passed;
		_p->ns1__OutboundInLaminating::ParamList = ParamList;
		_p->ns1__OutboundInLaminating::BindFeedingCodes = BindFeedingCodes;
		_p->ns1__OutboundInLaminating::BindDJCodes = BindDJCodes;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__OutboundInLaminating(struct soap *soap, ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE_ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OutboundInLaminating(struct soap *soap, const char *URL, ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE_ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OutboundInLaminating(struct soap *soap, const char *URL, ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE_ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OutboundInLaminating(struct soap *soap, const char *URL, ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OutboundInLaminating", p->soap_type() == SOAP_TYPE_ns1__OutboundInLaminating ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OutboundInLaminating * SOAP_FMAC4 soap_get_ns1__OutboundInLaminating(struct soap*, ns1__OutboundInLaminating *, const char*, const char*);

inline int soap_read_ns1__OutboundInLaminating(struct soap *soap, ns1__OutboundInLaminating *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OutboundInLaminating(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OutboundInLaminating(struct soap *soap, const char *URL, ns1__OutboundInLaminating *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OutboundInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OutboundInLaminating(struct soap *soap, ns1__OutboundInLaminating *p)
{
	if (::soap_read_ns1__OutboundInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Outbound_DEFINED
#define SOAP_TYPE_ns1__Outbound_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Outbound(struct soap*, const char*, int, const ns1__Outbound *, const char*);
SOAP_FMAC3 ns1__Outbound * SOAP_FMAC4 soap_in_ns1__Outbound(struct soap*, const char*, ns1__Outbound *, const char*);
SOAP_FMAC1 ns1__Outbound * SOAP_FMAC2 soap_instantiate_ns1__Outbound(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Outbound * soap_new_ns1__Outbound(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Outbound(soap, n, NULL, NULL, NULL);
}

inline ns1__Outbound * soap_new_req_ns1__Outbound(
	struct soap *soap,
	int *Passed,
	time_t LocalTime__1)
{
	ns1__Outbound *_p = ::soap_new_ns1__Outbound(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Outbound::Passed = Passed;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__Outbound * soap_new_set_ns1__Outbound(
	struct soap *soap,
	wchar_t *SFC,
	int *Passed,
	ns1__ArrayOfParamDTO *ParamList,
	ns1__ArrayOfString *BindFeedingCodes,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__Outbound *_p = ::soap_new_ns1__Outbound(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Outbound::SFC = SFC;
		_p->ns1__Outbound::Passed = Passed;
		_p->ns1__Outbound::ParamList = ParamList;
		_p->ns1__Outbound::BindFeedingCodes = BindFeedingCodes;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__Outbound(struct soap *soap, ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE_ns1__Outbound ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Outbound(struct soap *soap, const char *URL, ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE_ns1__Outbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Outbound(struct soap *soap, const char *URL, ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE_ns1__Outbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Outbound(struct soap *soap, const char *URL, ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Outbound", p->soap_type() == SOAP_TYPE_ns1__Outbound ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Outbound * SOAP_FMAC4 soap_get_ns1__Outbound(struct soap*, ns1__Outbound *, const char*, const char*);

inline int soap_read_ns1__Outbound(struct soap *soap, ns1__Outbound *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Outbound(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Outbound(struct soap *soap, const char *URL, ns1__Outbound *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Outbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Outbound(struct soap *soap, ns1__Outbound *p)
{
	if (::soap_read_ns1__Outbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OperatorLogin_DEFINED
#define SOAP_TYPE_ns1__OperatorLogin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OperatorLogin(struct soap*, const char*, int, const ns1__OperatorLogin *, const char*);
SOAP_FMAC3 ns1__OperatorLogin * SOAP_FMAC4 soap_in_ns1__OperatorLogin(struct soap*, const char*, ns1__OperatorLogin *, const char*);
SOAP_FMAC1 ns1__OperatorLogin * SOAP_FMAC2 soap_instantiate_ns1__OperatorLogin(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OperatorLogin * soap_new_ns1__OperatorLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OperatorLogin(soap, n, NULL, NULL, NULL);
}

inline ns1__OperatorLogin * soap_new_req_ns1__OperatorLogin(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__OperatorLogin *_p = ::soap_new_ns1__OperatorLogin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__OperatorLogin * soap_new_set_ns1__OperatorLogin(
	struct soap *soap,
	wchar_t *OperatorUserID,
	wchar_t *OperatorPassword,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__OperatorLogin *_p = ::soap_new_ns1__OperatorLogin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperatorLogin::OperatorUserID = OperatorUserID;
		_p->ns1__OperatorLogin::OperatorPassword = OperatorPassword;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__OperatorLogin(struct soap *soap, ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE_ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OperatorLogin(struct soap *soap, const char *URL, ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE_ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OperatorLogin(struct soap *soap, const char *URL, ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE_ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OperatorLogin(struct soap *soap, const char *URL, ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperatorLogin", p->soap_type() == SOAP_TYPE_ns1__OperatorLogin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OperatorLogin * SOAP_FMAC4 soap_get_ns1__OperatorLogin(struct soap*, ns1__OperatorLogin *, const char*, const char*);

inline int soap_read_ns1__OperatorLogin(struct soap *soap, ns1__OperatorLogin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OperatorLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OperatorLogin(struct soap *soap, const char *URL, ns1__OperatorLogin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OperatorLogin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OperatorLogin(struct soap *soap, ns1__OperatorLogin *p)
{
	if (::soap_read_ns1__OperatorLogin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InboundMore_DEFINED
#define SOAP_TYPE_ns1__InboundMore_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InboundMore(struct soap*, const char*, int, const ns1__InboundMore *, const char*);
SOAP_FMAC3 ns1__InboundMore * SOAP_FMAC4 soap_in_ns1__InboundMore(struct soap*, const char*, ns1__InboundMore *, const char*);
SOAP_FMAC1 ns1__InboundMore * SOAP_FMAC2 soap_instantiate_ns1__InboundMore(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InboundMore * soap_new_ns1__InboundMore(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InboundMore(soap, n, NULL, NULL, NULL);
}

inline ns1__InboundMore * soap_new_req_ns1__InboundMore(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__InboundMore *_p = ::soap_new_ns1__InboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__InboundMore * soap_new_set_ns1__InboundMore(
	struct soap *soap,
	ns1__ArrayOfString *SFCs,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__InboundMore *_p = ::soap_new_ns1__InboundMore(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InboundMore::SFCs = SFCs;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__InboundMore(struct soap *soap, ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE_ns1__InboundMore ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InboundMore(struct soap *soap, const char *URL, ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE_ns1__InboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InboundMore(struct soap *soap, const char *URL, ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE_ns1__InboundMore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InboundMore(struct soap *soap, const char *URL, ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundMore", p->soap_type() == SOAP_TYPE_ns1__InboundMore ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InboundMore * SOAP_FMAC4 soap_get_ns1__InboundMore(struct soap*, ns1__InboundMore *, const char*, const char*);

inline int soap_read_ns1__InboundMore(struct soap *soap, ns1__InboundMore *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InboundMore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InboundMore(struct soap *soap, const char *URL, ns1__InboundMore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InboundMore(struct soap *soap, ns1__InboundMore *p)
{
	if (::soap_read_ns1__InboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InboundInTwoInjectionForEqu_DEFINED
#define SOAP_TYPE_ns1__InboundInTwoInjectionForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InboundInTwoInjectionForEqu(struct soap*, const char*, int, const ns1__InboundInTwoInjectionForEqu *, const char*);
SOAP_FMAC3 ns1__InboundInTwoInjectionForEqu * SOAP_FMAC4 soap_in_ns1__InboundInTwoInjectionForEqu(struct soap*, const char*, ns1__InboundInTwoInjectionForEqu *, const char*);
SOAP_FMAC1 ns1__InboundInTwoInjectionForEqu * SOAP_FMAC2 soap_instantiate_ns1__InboundInTwoInjectionForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InboundInTwoInjectionForEqu * soap_new_ns1__InboundInTwoInjectionForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InboundInTwoInjectionForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__InboundInTwoInjectionForEqu * soap_new_req_ns1__InboundInTwoInjectionForEqu(
	struct soap *soap,
	double BeforeWeight)
{
	ns1__InboundInTwoInjectionForEqu *_p = ::soap_new_ns1__InboundInTwoInjectionForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InboundInTwoInjectionForEqu::BeforeWeight = BeforeWeight;
	}
	return _p;
}

inline ns1__InboundInTwoInjectionForEqu * soap_new_set_ns1__InboundInTwoInjectionForEqu(
	struct soap *soap,
	double BeforeWeight)
{
	ns1__InboundInTwoInjectionForEqu *_p = ::soap_new_ns1__InboundInTwoInjectionForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InboundInTwoInjectionForEqu::BeforeWeight = BeforeWeight;
	}
	return _p;
}

inline int soap_write_ns1__InboundInTwoInjectionForEqu(struct soap *soap, ns1__InboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__InboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__InboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__InboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InboundInTwoInjectionForEqu * SOAP_FMAC4 soap_get_ns1__InboundInTwoInjectionForEqu(struct soap*, ns1__InboundInTwoInjectionForEqu *, const char*, const char*);

inline int soap_read_ns1__InboundInTwoInjectionForEqu(struct soap *soap, ns1__InboundInTwoInjectionForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InboundInTwoInjectionForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__InboundInTwoInjectionForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InboundInTwoInjectionForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InboundInTwoInjectionForEqu(struct soap *soap, ns1__InboundInTwoInjectionForEqu *p)
{
	if (::soap_read_ns1__InboundInTwoInjectionForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu_DEFINED
#define SOAP_TYPE_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, const char*, int, const ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu * SOAP_FMAC4 soap_in_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, const char*, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *, const char*);
SOAP_FMAC1 ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu * soap_new_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu * soap_new_req_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *_p = ::soap_new_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu * soap_new_set_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(
	struct soap *soap,
	ns1__InboundInTwoInjectionForEqu *Data,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *_p = ::soap_new_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu::Data = Data;
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfInboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfInboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfInboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfInboundInTwoInjectionForEqu", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu * SOAP_FMAC4 soap_get_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *, const char*, const char*);

inline int soap_read_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap *soap, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *p)
{
	if (::soap_read_ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InboundInTwoInjection_DEFINED
#define SOAP_TYPE_ns1__InboundInTwoInjection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InboundInTwoInjection(struct soap*, const char*, int, const ns1__InboundInTwoInjection *, const char*);
SOAP_FMAC3 ns1__InboundInTwoInjection * SOAP_FMAC4 soap_in_ns1__InboundInTwoInjection(struct soap*, const char*, ns1__InboundInTwoInjection *, const char*);
SOAP_FMAC1 ns1__InboundInTwoInjection * SOAP_FMAC2 soap_instantiate_ns1__InboundInTwoInjection(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InboundInTwoInjection * soap_new_ns1__InboundInTwoInjection(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InboundInTwoInjection(soap, n, NULL, NULL, NULL);
}

inline ns1__InboundInTwoInjection * soap_new_req_ns1__InboundInTwoInjection(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__InboundInTwoInjection *_p = ::soap_new_ns1__InboundInTwoInjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__InboundInTwoInjection * soap_new_set_ns1__InboundInTwoInjection(
	struct soap *soap,
	wchar_t *SFC,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__InboundInTwoInjection *_p = ::soap_new_ns1__InboundInTwoInjection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InboundInTwoInjection::SFC = SFC;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__InboundInTwoInjection(struct soap *soap, ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InboundInTwoInjection(struct soap *soap, const char *URL, ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InboundInTwoInjection(struct soap *soap, const char *URL, ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InboundInTwoInjection(struct soap *soap, const char *URL, ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInTwoInjection", p->soap_type() == SOAP_TYPE_ns1__InboundInTwoInjection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InboundInTwoInjection * SOAP_FMAC4 soap_get_ns1__InboundInTwoInjection(struct soap*, ns1__InboundInTwoInjection *, const char*, const char*);

inline int soap_read_ns1__InboundInTwoInjection(struct soap *soap, ns1__InboundInTwoInjection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InboundInTwoInjection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InboundInTwoInjection(struct soap *soap, const char *URL, ns1__InboundInTwoInjection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InboundInTwoInjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InboundInTwoInjection(struct soap *soap, ns1__InboundInTwoInjection *p)
{
	if (::soap_read_ns1__InboundInTwoInjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InboundInSFCContainer_DEFINED
#define SOAP_TYPE_ns1__InboundInSFCContainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InboundInSFCContainer(struct soap*, const char*, int, const ns1__InboundInSFCContainer *, const char*);
SOAP_FMAC3 ns1__InboundInSFCContainer * SOAP_FMAC4 soap_in_ns1__InboundInSFCContainer(struct soap*, const char*, ns1__InboundInSFCContainer *, const char*);
SOAP_FMAC1 ns1__InboundInSFCContainer * SOAP_FMAC2 soap_instantiate_ns1__InboundInSFCContainer(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InboundInSFCContainer * soap_new_ns1__InboundInSFCContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InboundInSFCContainer(soap, n, NULL, NULL, NULL);
}

inline ns1__InboundInSFCContainer * soap_new_req_ns1__InboundInSFCContainer(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__InboundInSFCContainer *_p = ::soap_new_ns1__InboundInSFCContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__InboundInSFCContainer * soap_new_set_ns1__InboundInSFCContainer(
	struct soap *soap,
	wchar_t *CheckContainerCode,
	wchar_t *SFC,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__InboundInSFCContainer *_p = ::soap_new_ns1__InboundInSFCContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InboundInSFCContainer::CheckContainerCode = CheckContainerCode;
		_p->ns1__InboundInSFCContainer::SFC = SFC;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__InboundInSFCContainer(struct soap *soap, ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InboundInSFCContainer(struct soap *soap, const char *URL, ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InboundInSFCContainer(struct soap *soap, const char *URL, ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InboundInSFCContainer(struct soap *soap, const char *URL, ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInSFCContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInSFCContainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InboundInSFCContainer * SOAP_FMAC4 soap_get_ns1__InboundInSFCContainer(struct soap*, ns1__InboundInSFCContainer *, const char*, const char*);

inline int soap_read_ns1__InboundInSFCContainer(struct soap *soap, ns1__InboundInSFCContainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InboundInSFCContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InboundInSFCContainer(struct soap *soap, const char *URL, ns1__InboundInSFCContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InboundInSFCContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InboundInSFCContainer(struct soap *soap, ns1__InboundInSFCContainer *p)
{
	if (::soap_read_ns1__InboundInSFCContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InboundInContainer_DEFINED
#define SOAP_TYPE_ns1__InboundInContainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InboundInContainer(struct soap*, const char*, int, const ns1__InboundInContainer *, const char*);
SOAP_FMAC3 ns1__InboundInContainer * SOAP_FMAC4 soap_in_ns1__InboundInContainer(struct soap*, const char*, ns1__InboundInContainer *, const char*);
SOAP_FMAC1 ns1__InboundInContainer * SOAP_FMAC2 soap_instantiate_ns1__InboundInContainer(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InboundInContainer * soap_new_ns1__InboundInContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InboundInContainer(soap, n, NULL, NULL, NULL);
}

inline ns1__InboundInContainer * soap_new_req_ns1__InboundInContainer(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__InboundInContainer *_p = ::soap_new_ns1__InboundInContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__InboundInContainer * soap_new_set_ns1__InboundInContainer(
	struct soap *soap,
	wchar_t *ContainerCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__InboundInContainer *_p = ::soap_new_ns1__InboundInContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InboundInContainer::ContainerCode = ContainerCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__InboundInContainer(struct soap *soap, ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InboundInContainer(struct soap *soap, const char *URL, ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InboundInContainer(struct soap *soap, const char *URL, ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InboundInContainer(struct soap *soap, const char *URL, ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InboundInContainer", p->soap_type() == SOAP_TYPE_ns1__InboundInContainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InboundInContainer * SOAP_FMAC4 soap_get_ns1__InboundInContainer(struct soap*, ns1__InboundInContainer *, const char*, const char*);

inline int soap_read_ns1__InboundInContainer(struct soap *soap, ns1__InboundInContainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InboundInContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InboundInContainer(struct soap *soap, const char *URL, ns1__InboundInContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InboundInContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InboundInContainer(struct soap *soap, ns1__InboundInContainer *p)
{
	if (::soap_read_ns1__InboundInContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Inbound_DEFINED
#define SOAP_TYPE_ns1__Inbound_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Inbound(struct soap*, const char*, int, const ns1__Inbound *, const char*);
SOAP_FMAC3 ns1__Inbound * SOAP_FMAC4 soap_in_ns1__Inbound(struct soap*, const char*, ns1__Inbound *, const char*);
SOAP_FMAC1 ns1__Inbound * SOAP_FMAC2 soap_instantiate_ns1__Inbound(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Inbound * soap_new_ns1__Inbound(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Inbound(soap, n, NULL, NULL, NULL);
}

inline ns1__Inbound * soap_new_req_ns1__Inbound(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__Inbound *_p = ::soap_new_ns1__Inbound(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__Inbound * soap_new_set_ns1__Inbound(
	struct soap *soap,
	wchar_t *SFC,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__Inbound *_p = ::soap_new_ns1__Inbound(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Inbound::SFC = SFC;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__Inbound(struct soap *soap, ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE_ns1__Inbound ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Inbound(struct soap *soap, const char *URL, ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE_ns1__Inbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Inbound(struct soap *soap, const char *URL, ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE_ns1__Inbound ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Inbound(struct soap *soap, const char *URL, ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Inbound", p->soap_type() == SOAP_TYPE_ns1__Inbound ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Inbound * SOAP_FMAC4 soap_get_ns1__Inbound(struct soap*, ns1__Inbound *, const char*, const char*);

inline int soap_read_ns1__Inbound(struct soap *soap, ns1__Inbound *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Inbound(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Inbound(struct soap *soap, const char *URL, ns1__Inbound *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Inbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Inbound(struct soap *soap, ns1__Inbound *p)
{
	if (::soap_read_ns1__Inbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Heartbeat_DEFINED
#define SOAP_TYPE_ns1__Heartbeat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Heartbeat(struct soap*, const char*, int, const ns1__Heartbeat *, const char*);
SOAP_FMAC3 ns1__Heartbeat * SOAP_FMAC4 soap_in_ns1__Heartbeat(struct soap*, const char*, ns1__Heartbeat *, const char*);
SOAP_FMAC1 ns1__Heartbeat * SOAP_FMAC2 soap_instantiate_ns1__Heartbeat(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Heartbeat * soap_new_ns1__Heartbeat(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Heartbeat(soap, n, NULL, NULL, NULL);
}

inline ns1__Heartbeat * soap_new_req_ns1__Heartbeat(
	struct soap *soap,
	bool IsOnline,
	time_t LocalTime__1)
{
	ns1__Heartbeat *_p = ::soap_new_ns1__Heartbeat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Heartbeat::IsOnline = IsOnline;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__Heartbeat * soap_new_set_ns1__Heartbeat(
	struct soap *soap,
	bool IsOnline,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__Heartbeat *_p = ::soap_new_ns1__Heartbeat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Heartbeat::IsOnline = IsOnline;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__Heartbeat(struct soap *soap, ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE_ns1__Heartbeat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Heartbeat(struct soap *soap, const char *URL, ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE_ns1__Heartbeat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Heartbeat(struct soap *soap, const char *URL, ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE_ns1__Heartbeat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Heartbeat(struct soap *soap, const char *URL, ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Heartbeat", p->soap_type() == SOAP_TYPE_ns1__Heartbeat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Heartbeat * SOAP_FMAC4 soap_get_ns1__Heartbeat(struct soap*, ns1__Heartbeat *, const char*, const char*);

inline int soap_read_ns1__Heartbeat(struct soap *soap, ns1__Heartbeat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Heartbeat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Heartbeat(struct soap *soap, const char *URL, ns1__Heartbeat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Heartbeat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Heartbeat(struct soap *soap, ns1__Heartbeat *p)
{
	if (::soap_read_ns1__Heartbeat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseDataForScadaOfString_DEFINED
#define SOAP_TYPE_ns1__ApiResponseDataForScadaOfString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseDataForScadaOfString(struct soap*, const char*, int, const ns1__ApiResponseDataForScadaOfString *, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfString * SOAP_FMAC4 soap_in_ns1__ApiResponseDataForScadaOfString(struct soap*, const char*, ns1__ApiResponseDataForScadaOfString *, const char*);
SOAP_FMAC1 ns1__ApiResponseDataForScadaOfString * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseDataForScadaOfString(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseDataForScadaOfString * soap_new_ns1__ApiResponseDataForScadaOfString(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseDataForScadaOfString(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseDataForScadaOfString * soap_new_req_ns1__ApiResponseDataForScadaOfString(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseDataForScadaOfString *_p = ::soap_new_ns1__ApiResponseDataForScadaOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseDataForScadaOfString * soap_new_set_ns1__ApiResponseDataForScadaOfString(
	struct soap *soap,
	wchar_t *Data,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseDataForScadaOfString *_p = ::soap_new_ns1__ApiResponseDataForScadaOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApiResponseDataForScadaOfString::Data = Data;
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseDataForScadaOfString(struct soap *soap, ns1__ApiResponseDataForScadaOfString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfString", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseDataForScadaOfString(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfString", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseDataForScadaOfString(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfString", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseDataForScadaOfString(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfString", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfString ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfString * SOAP_FMAC4 soap_get_ns1__ApiResponseDataForScadaOfString(struct soap*, ns1__ApiResponseDataForScadaOfString *, const char*, const char*);

inline int soap_read_ns1__ApiResponseDataForScadaOfString(struct soap *soap, ns1__ApiResponseDataForScadaOfString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseDataForScadaOfString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseDataForScadaOfString(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseDataForScadaOfString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseDataForScadaOfString(struct soap *soap, ns1__ApiResponseDataForScadaOfString *p)
{
	if (::soap_read_ns1__ApiResponseDataForScadaOfString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GenerateCellSFC_DEFINED
#define SOAP_TYPE_ns1__GenerateCellSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenerateCellSFC(struct soap*, const char*, int, const ns1__GenerateCellSFC *, const char*);
SOAP_FMAC3 ns1__GenerateCellSFC * SOAP_FMAC4 soap_in_ns1__GenerateCellSFC(struct soap*, const char*, ns1__GenerateCellSFC *, const char*);
SOAP_FMAC1 ns1__GenerateCellSFC * SOAP_FMAC2 soap_instantiate_ns1__GenerateCellSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenerateCellSFC * soap_new_ns1__GenerateCellSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenerateCellSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__GenerateCellSFC * soap_new_req_ns1__GenerateCellSFC(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__GenerateCellSFC *_p = ::soap_new_ns1__GenerateCellSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__GenerateCellSFC * soap_new_set_ns1__GenerateCellSFC(
	struct soap *soap,
	wchar_t *ProductCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__GenerateCellSFC *_p = ::soap_new_ns1__GenerateCellSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenerateCellSFC::ProductCode = ProductCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__GenerateCellSFC(struct soap *soap, ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE_ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenerateCellSFC(struct soap *soap, const char *URL, ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE_ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GenerateCellSFC(struct soap *soap, const char *URL, ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE_ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenerateCellSFC(struct soap *soap, const char *URL, ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenerateCellSFC", p->soap_type() == SOAP_TYPE_ns1__GenerateCellSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenerateCellSFC * SOAP_FMAC4 soap_get_ns1__GenerateCellSFC(struct soap*, ns1__GenerateCellSFC *, const char*, const char*);

inline int soap_read_ns1__GenerateCellSFC(struct soap *soap, ns1__GenerateCellSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GenerateCellSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenerateCellSFC(struct soap *soap, const char *URL, ns1__GenerateCellSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GenerateCellSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GenerateCellSFC(struct soap *soap, ns1__GenerateCellSFC *p)
{
	if (::soap_read_ns1__GenerateCellSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FillingData_DEFINED
#define SOAP_TYPE_ns1__FillingData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FillingData(struct soap*, const char*, int, const ns1__FillingData *, const char*);
SOAP_FMAC3 ns1__FillingData * SOAP_FMAC4 soap_in_ns1__FillingData(struct soap*, const char*, ns1__FillingData *, const char*);
SOAP_FMAC1 ns1__FillingData * SOAP_FMAC2 soap_instantiate_ns1__FillingData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FillingData * soap_new_ns1__FillingData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FillingData(soap, n, NULL, NULL, NULL);
}

inline ns1__FillingData * soap_new_req_ns1__FillingData(
	struct soap *soap,
	time_t InTime,
	time_t OutTime,
	double BeforeWeight,
	double AfterWeight,
	double ELWeight,
	double AddEL,
	double TotalEL,
	double ManualEL,
	double FinalEL,
	bool IsOK,
	time_t LocalTime__1)
{
	ns1__FillingData *_p = ::soap_new_ns1__FillingData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FillingData::InTime = InTime;
		_p->ns1__FillingData::OutTime = OutTime;
		_p->ns1__FillingData::BeforeWeight = BeforeWeight;
		_p->ns1__FillingData::AfterWeight = AfterWeight;
		_p->ns1__FillingData::ELWeight = ELWeight;
		_p->ns1__FillingData::AddEL = AddEL;
		_p->ns1__FillingData::TotalEL = TotalEL;
		_p->ns1__FillingData::ManualEL = ManualEL;
		_p->ns1__FillingData::FinalEL = FinalEL;
		_p->ns1__FillingData::IsOK = IsOK;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__FillingData * soap_new_set_ns1__FillingData(
	struct soap *soap,
	time_t InTime,
	time_t OutTime,
	double BeforeWeight,
	double AfterWeight,
	double ELWeight,
	double AddEL,
	double TotalEL,
	double ManualEL,
	double FinalEL,
	bool IsOK,
	wchar_t *SFC,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__FillingData *_p = ::soap_new_ns1__FillingData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FillingData::InTime = InTime;
		_p->ns1__FillingData::OutTime = OutTime;
		_p->ns1__FillingData::BeforeWeight = BeforeWeight;
		_p->ns1__FillingData::AfterWeight = AfterWeight;
		_p->ns1__FillingData::ELWeight = ELWeight;
		_p->ns1__FillingData::AddEL = AddEL;
		_p->ns1__FillingData::TotalEL = TotalEL;
		_p->ns1__FillingData::ManualEL = ManualEL;
		_p->ns1__FillingData::FinalEL = FinalEL;
		_p->ns1__FillingData::IsOK = IsOK;
		_p->ns1__FillingData::SFC = SFC;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__FillingData(struct soap *soap, ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE_ns1__FillingData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FillingData(struct soap *soap, const char *URL, ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE_ns1__FillingData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FillingData(struct soap *soap, const char *URL, ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE_ns1__FillingData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FillingData(struct soap *soap, const char *URL, ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FillingData", p->soap_type() == SOAP_TYPE_ns1__FillingData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FillingData * SOAP_FMAC4 soap_get_ns1__FillingData(struct soap*, ns1__FillingData *, const char*, const char*);

inline int soap_read_ns1__FillingData(struct soap *soap, ns1__FillingData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FillingData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FillingData(struct soap *soap, const char *URL, ns1__FillingData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FillingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FillingData(struct soap *soap, ns1__FillingData *p)
{
	if (::soap_read_ns1__FillingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FeedingDJInLaminatingByScadaDTO_DEFINED
#define SOAP_TYPE_ns1__FeedingDJInLaminatingByScadaDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FeedingDJInLaminatingByScadaDTO(struct soap*, const char*, int, const ns1__FeedingDJInLaminatingByScadaDTO *, const char*);
SOAP_FMAC3 ns1__FeedingDJInLaminatingByScadaDTO * SOAP_FMAC4 soap_in_ns1__FeedingDJInLaminatingByScadaDTO(struct soap*, const char*, ns1__FeedingDJInLaminatingByScadaDTO *, const char*);
SOAP_FMAC1 ns1__FeedingDJInLaminatingByScadaDTO * SOAP_FMAC2 soap_instantiate_ns1__FeedingDJInLaminatingByScadaDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FeedingDJInLaminatingByScadaDTO * soap_new_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FeedingDJInLaminatingByScadaDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__FeedingDJInLaminatingByScadaDTO * soap_new_req_ns1__FeedingDJInLaminatingByScadaDTO(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__FeedingDJInLaminatingByScadaDTO *_p = ::soap_new_ns1__FeedingDJInLaminatingByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__FeedingDJInLaminatingByScadaDTO * soap_new_set_ns1__FeedingDJInLaminatingByScadaDTO(
	struct soap *soap,
	wchar_t *DJCode,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__FeedingDJInLaminatingByScadaDTO *_p = ::soap_new_ns1__FeedingDJInLaminatingByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FeedingDJInLaminatingByScadaDTO::DJCode = DJCode;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, ns1__FeedingDJInLaminatingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingDJInLaminatingByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingDJInLaminatingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingDJInLaminatingByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingDJInLaminatingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingDJInLaminatingByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingDJInLaminatingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingDJInLaminatingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingDJInLaminatingByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FeedingDJInLaminatingByScadaDTO * SOAP_FMAC4 soap_get_ns1__FeedingDJInLaminatingByScadaDTO(struct soap*, ns1__FeedingDJInLaminatingByScadaDTO *, const char*, const char*);

inline int soap_read_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, ns1__FeedingDJInLaminatingByScadaDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FeedingDJInLaminatingByScadaDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingDJInLaminatingByScadaDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FeedingDJInLaminatingByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FeedingDJInLaminatingByScadaDTO(struct soap *soap, ns1__FeedingDJInLaminatingByScadaDTO *p)
{
	if (::soap_read_ns1__FeedingDJInLaminatingByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FeedingByScadaDTO_DEFINED
#define SOAP_TYPE_ns1__FeedingByScadaDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FeedingByScadaDTO(struct soap*, const char*, int, const ns1__FeedingByScadaDTO *, const char*);
SOAP_FMAC3 ns1__FeedingByScadaDTO * SOAP_FMAC4 soap_in_ns1__FeedingByScadaDTO(struct soap*, const char*, ns1__FeedingByScadaDTO *, const char*);
SOAP_FMAC1 ns1__FeedingByScadaDTO * SOAP_FMAC2 soap_instantiate_ns1__FeedingByScadaDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FeedingByScadaDTO * soap_new_ns1__FeedingByScadaDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FeedingByScadaDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__FeedingByScadaDTO * soap_new_req_ns1__FeedingByScadaDTO(
	struct soap *soap,
	std::wstring *Qty,
	bool *IsFeedingPoint,
	time_t LocalTime__1)
{
	ns1__FeedingByScadaDTO *_p = ::soap_new_ns1__FeedingByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FeedingByScadaDTO::Qty = Qty;
		_p->ns1__FeedingByScadaDTO::IsFeedingPoint = IsFeedingPoint;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__FeedingByScadaDTO * soap_new_set_ns1__FeedingByScadaDTO(
	struct soap *soap,
	wchar_t *SFC,
	std::wstring *Qty,
	bool *IsFeedingPoint,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__FeedingByScadaDTO *_p = ::soap_new_ns1__FeedingByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FeedingByScadaDTO::SFC = SFC;
		_p->ns1__FeedingByScadaDTO::Qty = Qty;
		_p->ns1__FeedingByScadaDTO::IsFeedingPoint = IsFeedingPoint;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__FeedingByScadaDTO(struct soap *soap, ns1__FeedingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FeedingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FeedingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FeedingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FeedingByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__FeedingByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FeedingByScadaDTO * SOAP_FMAC4 soap_get_ns1__FeedingByScadaDTO(struct soap*, ns1__FeedingByScadaDTO *, const char*, const char*);

inline int soap_read_ns1__FeedingByScadaDTO(struct soap *soap, ns1__FeedingByScadaDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FeedingByScadaDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FeedingByScadaDTO(struct soap *soap, const char *URL, ns1__FeedingByScadaDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FeedingByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FeedingByScadaDTO(struct soap *soap, ns1__FeedingByScadaDTO *p)
{
	if (::soap_read_ns1__FeedingByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExamineExistsByScadaDTO_DEFINED
#define SOAP_TYPE_ns1__ExamineExistsByScadaDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExamineExistsByScadaDTO(struct soap*, const char*, int, const ns1__ExamineExistsByScadaDTO *, const char*);
SOAP_FMAC3 ns1__ExamineExistsByScadaDTO * SOAP_FMAC4 soap_in_ns1__ExamineExistsByScadaDTO(struct soap*, const char*, ns1__ExamineExistsByScadaDTO *, const char*);
SOAP_FMAC1 ns1__ExamineExistsByScadaDTO * SOAP_FMAC2 soap_instantiate_ns1__ExamineExistsByScadaDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExamineExistsByScadaDTO * soap_new_ns1__ExamineExistsByScadaDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExamineExistsByScadaDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__ExamineExistsByScadaDTO * soap_new_req_ns1__ExamineExistsByScadaDTO(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__ExamineExistsByScadaDTO *_p = ::soap_new_ns1__ExamineExistsByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__ExamineExistsByScadaDTO * soap_new_set_ns1__ExamineExistsByScadaDTO(
	struct soap *soap,
	wchar_t *SFC,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__ExamineExistsByScadaDTO *_p = ::soap_new_ns1__ExamineExistsByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExamineExistsByScadaDTO::SFC = SFC;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__ExamineExistsByScadaDTO(struct soap *soap, ns1__ExamineExistsByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__ExamineExistsByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExamineExistsByScadaDTO(struct soap *soap, const char *URL, ns1__ExamineExistsByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__ExamineExistsByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExamineExistsByScadaDTO(struct soap *soap, const char *URL, ns1__ExamineExistsByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__ExamineExistsByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExamineExistsByScadaDTO(struct soap *soap, const char *URL, ns1__ExamineExistsByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExamineExistsByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__ExamineExistsByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExamineExistsByScadaDTO * SOAP_FMAC4 soap_get_ns1__ExamineExistsByScadaDTO(struct soap*, ns1__ExamineExistsByScadaDTO *, const char*, const char*);

inline int soap_read_ns1__ExamineExistsByScadaDTO(struct soap *soap, ns1__ExamineExistsByScadaDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ExamineExistsByScadaDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExamineExistsByScadaDTO(struct soap *soap, const char *URL, ns1__ExamineExistsByScadaDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExamineExistsByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExamineExistsByScadaDTO(struct soap *soap, ns1__ExamineExistsByScadaDTO *p)
{
	if (::soap_read_ns1__ExamineExistsByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_ns1__ArrayOfApiResponseSFCForScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfApiResponseSFCForScada(struct soap*, const char*, int, const ns1__ArrayOfApiResponseSFCForScada *, const char*);
SOAP_FMAC3 ns1__ArrayOfApiResponseSFCForScada * SOAP_FMAC4 soap_in_ns1__ArrayOfApiResponseSFCForScada(struct soap*, const char*, ns1__ArrayOfApiResponseSFCForScada *, const char*);
SOAP_FMAC1 ns1__ArrayOfApiResponseSFCForScada * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfApiResponseSFCForScada(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfApiResponseSFCForScada * soap_new_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfApiResponseSFCForScada(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfApiResponseSFCForScada * soap_new_req_ns1__ArrayOfApiResponseSFCForScada(
	struct soap *soap)
{
	ns1__ArrayOfApiResponseSFCForScada *_p = ::soap_new_ns1__ArrayOfApiResponseSFCForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfApiResponseSFCForScada * soap_new_set_ns1__ArrayOfApiResponseSFCForScada(
	struct soap *soap,
	const std::vector<ns1__ApiResponseSFCForScada *> & ApiResponseSFCForScada)
{
	ns1__ArrayOfApiResponseSFCForScada *_p = ::soap_new_ns1__ArrayOfApiResponseSFCForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfApiResponseSFCForScada::ApiResponseSFCForScada = ApiResponseSFCForScada;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, ns1__ArrayOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ArrayOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ArrayOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ArrayOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ArrayOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ArrayOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ArrayOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ArrayOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfApiResponseSFCForScada * SOAP_FMAC4 soap_get_ns1__ArrayOfApiResponseSFCForScada(struct soap*, ns1__ArrayOfApiResponseSFCForScada *, const char*, const char*);

inline int soap_read_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, ns1__ArrayOfApiResponseSFCForScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfApiResponseSFCForScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ArrayOfApiResponseSFCForScada *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfApiResponseSFCForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfApiResponseSFCForScada(struct soap *soap, ns1__ArrayOfApiResponseSFCForScada *p)
{
	if (::soap_read_ns1__ArrayOfApiResponseSFCForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_ns1__ApiResponseSFCForScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseSFCForScada(struct soap*, const char*, int, const ns1__ApiResponseSFCForScada *, const char*);
SOAP_FMAC3 ns1__ApiResponseSFCForScada * SOAP_FMAC4 soap_in_ns1__ApiResponseSFCForScada(struct soap*, const char*, ns1__ApiResponseSFCForScada *, const char*);
SOAP_FMAC1 ns1__ApiResponseSFCForScada * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseSFCForScada(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseSFCForScada * soap_new_ns1__ApiResponseSFCForScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseSFCForScada(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseSFCForScada * soap_new_req_ns1__ApiResponseSFCForScada(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseSFCForScada *_p = ::soap_new_ns1__ApiResponseSFCForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseSFCForScada * soap_new_set_ns1__ApiResponseSFCForScada(
	struct soap *soap,
	wchar_t *SFC,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseSFCForScada *_p = ::soap_new_ns1__ApiResponseSFCForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApiResponseSFCForScada::SFC = SFC;
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseSFCForScada(struct soap *soap, ns1__ApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseSFCForScada * SOAP_FMAC4 soap_get_ns1__ApiResponseSFCForScada(struct soap*, ns1__ApiResponseSFCForScada *, const char*, const char*);

inline int soap_read_ns1__ApiResponseSFCForScada(struct soap *soap, ns1__ApiResponseSFCForScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseSFCForScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseSFCForScada *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseSFCForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseSFCForScada(struct soap *soap, ns1__ApiResponseSFCForScada *p)
{
	if (::soap_read_ns1__ApiResponseSFCForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, const char*, int, const ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada * SOAP_FMAC4 soap_in_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, const char*, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *, const char*);
SOAP_FMAC1 ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada * soap_new_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada * soap_new_req_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *_p = ::soap_new_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada * soap_new_set_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(
	struct soap *soap,
	ns1__ArrayOfApiResponseSFCForScada *Data,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *_p = ::soap_new_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada::Data = Data;
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseDataForScadaOfListOfApiResponseSFCForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada * SOAP_FMAC4 soap_get_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *, const char*, const char*);

inline int soap_read_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, const char *URL, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap *soap, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *p)
{
	if (::soap_read_ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EquipmentProductProcessParamSFC_DEFINED
#define SOAP_TYPE_ns1__EquipmentProductProcessParamSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EquipmentProductProcessParamSFC(struct soap*, const char*, int, const ns1__EquipmentProductProcessParamSFC *, const char*);
SOAP_FMAC3 ns1__EquipmentProductProcessParamSFC * SOAP_FMAC4 soap_in_ns1__EquipmentProductProcessParamSFC(struct soap*, const char*, ns1__EquipmentProductProcessParamSFC *, const char*);
SOAP_FMAC1 ns1__EquipmentProductProcessParamSFC * SOAP_FMAC2 soap_instantiate_ns1__EquipmentProductProcessParamSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EquipmentProductProcessParamSFC * soap_new_ns1__EquipmentProductProcessParamSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EquipmentProductProcessParamSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__EquipmentProductProcessParamSFC * soap_new_req_ns1__EquipmentProductProcessParamSFC(
	struct soap *soap)
{
	ns1__EquipmentProductProcessParamSFC *_p = ::soap_new_ns1__EquipmentProductProcessParamSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__EquipmentProductProcessParamSFC * soap_new_set_ns1__EquipmentProductProcessParamSFC(
	struct soap *soap,
	wchar_t *SFC,
	ns1__ArrayOfParamDTO *ParamList)
{
	ns1__EquipmentProductProcessParamSFC *_p = ::soap_new_ns1__EquipmentProductProcessParamSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentProductProcessParamSFC::SFC = SFC;
		_p->ns1__EquipmentProductProcessParamSFC::ParamList = ParamList;
	}
	return _p;
}

inline int soap_write_ns1__EquipmentProductProcessParamSFC(struct soap *soap, ns1__EquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EquipmentProductProcessParamSFC * SOAP_FMAC4 soap_get_ns1__EquipmentProductProcessParamSFC(struct soap*, ns1__EquipmentProductProcessParamSFC *, const char*, const char*);

inline int soap_read_ns1__EquipmentProductProcessParamSFC(struct soap *soap, ns1__EquipmentProductProcessParamSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EquipmentProductProcessParamSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParamSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EquipmentProductProcessParamSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EquipmentProductProcessParamSFC(struct soap *soap, ns1__EquipmentProductProcessParamSFC *p)
{
	if (::soap_read_ns1__EquipmentProductProcessParamSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEquipmentProductProcessParamSFC_DEFINED
#define SOAP_TYPE_ns1__ArrayOfEquipmentProductProcessParamSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, const char*, int, const ns1__ArrayOfEquipmentProductProcessParamSFC *, const char*);
SOAP_FMAC3 ns1__ArrayOfEquipmentProductProcessParamSFC * SOAP_FMAC4 soap_in_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, const char*, ns1__ArrayOfEquipmentProductProcessParamSFC *, const char*);
SOAP_FMAC1 ns1__ArrayOfEquipmentProductProcessParamSFC * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfEquipmentProductProcessParamSFC * soap_new_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfEquipmentProductProcessParamSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfEquipmentProductProcessParamSFC * soap_new_req_ns1__ArrayOfEquipmentProductProcessParamSFC(
	struct soap *soap)
{
	ns1__ArrayOfEquipmentProductProcessParamSFC *_p = ::soap_new_ns1__ArrayOfEquipmentProductProcessParamSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfEquipmentProductProcessParamSFC * soap_new_set_ns1__ArrayOfEquipmentProductProcessParamSFC(
	struct soap *soap,
	const std::vector<ns1__EquipmentProductProcessParamSFC *> & EquipmentProductProcessParamSFC)
{
	ns1__ArrayOfEquipmentProductProcessParamSFC *_p = ::soap_new_ns1__ArrayOfEquipmentProductProcessParamSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfEquipmentProductProcessParamSFC::EquipmentProductProcessParamSFC = EquipmentProductProcessParamSFC;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, ns1__ArrayOfEquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfEquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfEquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__ArrayOfEquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfEquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfEquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__ArrayOfEquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfEquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfEquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__ArrayOfEquipmentProductProcessParamSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfEquipmentProductProcessParamSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfEquipmentProductProcessParamSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfEquipmentProductProcessParamSFC * SOAP_FMAC4 soap_get_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, ns1__ArrayOfEquipmentProductProcessParamSFC *, const char*, const char*);

inline int soap_read_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, ns1__ArrayOfEquipmentProductProcessParamSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfEquipmentProductProcessParamSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, const char *URL, ns1__ArrayOfEquipmentProductProcessParamSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfEquipmentProductProcessParamSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfEquipmentProductProcessParamSFC(struct soap *soap, ns1__ArrayOfEquipmentProductProcessParamSFC *p)
{
	if (::soap_read_ns1__ArrayOfEquipmentProductProcessParamSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EquipmentProductProcessParam_DEFINED
#define SOAP_TYPE_ns1__EquipmentProductProcessParam_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EquipmentProductProcessParam(struct soap*, const char*, int, const ns1__EquipmentProductProcessParam *, const char*);
SOAP_FMAC3 ns1__EquipmentProductProcessParam * SOAP_FMAC4 soap_in_ns1__EquipmentProductProcessParam(struct soap*, const char*, ns1__EquipmentProductProcessParam *, const char*);
SOAP_FMAC1 ns1__EquipmentProductProcessParam * SOAP_FMAC2 soap_instantiate_ns1__EquipmentProductProcessParam(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EquipmentProductProcessParam * soap_new_ns1__EquipmentProductProcessParam(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EquipmentProductProcessParam(soap, n, NULL, NULL, NULL);
}

inline ns1__EquipmentProductProcessParam * soap_new_req_ns1__EquipmentProductProcessParam(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__EquipmentProductProcessParam *_p = ::soap_new_ns1__EquipmentProductProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__EquipmentProductProcessParam * soap_new_set_ns1__EquipmentProductProcessParam(
	struct soap *soap,
	ns1__ArrayOfEquipmentProductProcessParamSFC *SFCParams,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__EquipmentProductProcessParam *_p = ::soap_new_ns1__EquipmentProductProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentProductProcessParam::SFCParams = SFCParams;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__EquipmentProductProcessParam(struct soap *soap, ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProductProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProductProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EquipmentProductProcessParam * SOAP_FMAC4 soap_get_ns1__EquipmentProductProcessParam(struct soap*, ns1__EquipmentProductProcessParam *, const char*, const char*);

inline int soap_read_ns1__EquipmentProductProcessParam(struct soap *soap, ns1__EquipmentProductProcessParam *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EquipmentProductProcessParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProductProcessParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EquipmentProductProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EquipmentProductProcessParam(struct soap *soap, ns1__EquipmentProductProcessParam *p)
{
	if (::soap_read_ns1__EquipmentProductProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ParamDTO_DEFINED
#define SOAP_TYPE_ns1__ParamDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParamDTO(struct soap*, const char*, int, const ns1__ParamDTO *, const char*);
SOAP_FMAC3 ns1__ParamDTO * SOAP_FMAC4 soap_in_ns1__ParamDTO(struct soap*, const char*, ns1__ParamDTO *, const char*);
SOAP_FMAC1 ns1__ParamDTO * SOAP_FMAC2 soap_instantiate_ns1__ParamDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ParamDTO * soap_new_ns1__ParamDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ParamDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__ParamDTO * soap_new_req_ns1__ParamDTO(
	struct soap *soap,
	time_t Timestamp)
{
	ns1__ParamDTO *_p = ::soap_new_ns1__ParamDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParamDTO::Timestamp = Timestamp;
	}
	return _p;
}

inline ns1__ParamDTO * soap_new_set_ns1__ParamDTO(
	struct soap *soap,
	wchar_t *ParamCode,
	wchar_t *ParamValue,
	time_t Timestamp)
{
	ns1__ParamDTO *_p = ::soap_new_ns1__ParamDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParamDTO::ParamCode = ParamCode;
		_p->ns1__ParamDTO::ParamValue = ParamValue;
		_p->ns1__ParamDTO::Timestamp = Timestamp;
	}
	return _p;
}

inline int soap_write_ns1__ParamDTO(struct soap *soap, ns1__ParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParamDTO", p->soap_type() == SOAP_TYPE_ns1__ParamDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ParamDTO(struct soap *soap, const char *URL, ns1__ParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParamDTO", p->soap_type() == SOAP_TYPE_ns1__ParamDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ParamDTO(struct soap *soap, const char *URL, ns1__ParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParamDTO", p->soap_type() == SOAP_TYPE_ns1__ParamDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ParamDTO(struct soap *soap, const char *URL, ns1__ParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParamDTO", p->soap_type() == SOAP_TYPE_ns1__ParamDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ParamDTO * SOAP_FMAC4 soap_get_ns1__ParamDTO(struct soap*, ns1__ParamDTO *, const char*, const char*);

inline int soap_read_ns1__ParamDTO(struct soap *soap, ns1__ParamDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ParamDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ParamDTO(struct soap *soap, const char *URL, ns1__ParamDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ParamDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ParamDTO(struct soap *soap, ns1__ParamDTO *p)
{
	if (::soap_read_ns1__ParamDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfParamDTO_DEFINED
#define SOAP_TYPE_ns1__ArrayOfParamDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfParamDTO(struct soap*, const char*, int, const ns1__ArrayOfParamDTO *, const char*);
SOAP_FMAC3 ns1__ArrayOfParamDTO * SOAP_FMAC4 soap_in_ns1__ArrayOfParamDTO(struct soap*, const char*, ns1__ArrayOfParamDTO *, const char*);
SOAP_FMAC1 ns1__ArrayOfParamDTO * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfParamDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfParamDTO * soap_new_ns1__ArrayOfParamDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfParamDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfParamDTO * soap_new_req_ns1__ArrayOfParamDTO(
	struct soap *soap)
{
	ns1__ArrayOfParamDTO *_p = ::soap_new_ns1__ArrayOfParamDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfParamDTO * soap_new_set_ns1__ArrayOfParamDTO(
	struct soap *soap,
	const std::vector<ns1__ParamDTO *> & ParamDTO)
{
	ns1__ArrayOfParamDTO *_p = ::soap_new_ns1__ArrayOfParamDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfParamDTO::ParamDTO = ParamDTO;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfParamDTO(struct soap *soap, ns1__ArrayOfParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfParamDTO", p->soap_type() == SOAP_TYPE_ns1__ArrayOfParamDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfParamDTO(struct soap *soap, const char *URL, ns1__ArrayOfParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfParamDTO", p->soap_type() == SOAP_TYPE_ns1__ArrayOfParamDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfParamDTO(struct soap *soap, const char *URL, ns1__ArrayOfParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfParamDTO", p->soap_type() == SOAP_TYPE_ns1__ArrayOfParamDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfParamDTO(struct soap *soap, const char *URL, ns1__ArrayOfParamDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfParamDTO", p->soap_type() == SOAP_TYPE_ns1__ArrayOfParamDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfParamDTO * SOAP_FMAC4 soap_get_ns1__ArrayOfParamDTO(struct soap*, ns1__ArrayOfParamDTO *, const char*, const char*);

inline int soap_read_ns1__ArrayOfParamDTO(struct soap *soap, ns1__ArrayOfParamDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfParamDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfParamDTO(struct soap *soap, const char *URL, ns1__ArrayOfParamDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfParamDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfParamDTO(struct soap *soap, ns1__ArrayOfParamDTO *p)
{
	if (::soap_read_ns1__ArrayOfParamDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EquipmentProcessParam_DEFINED
#define SOAP_TYPE_ns1__EquipmentProcessParam_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EquipmentProcessParam(struct soap*, const char*, int, const ns1__EquipmentProcessParam *, const char*);
SOAP_FMAC3 ns1__EquipmentProcessParam * SOAP_FMAC4 soap_in_ns1__EquipmentProcessParam(struct soap*, const char*, ns1__EquipmentProcessParam *, const char*);
SOAP_FMAC1 ns1__EquipmentProcessParam * SOAP_FMAC2 soap_instantiate_ns1__EquipmentProcessParam(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EquipmentProcessParam * soap_new_ns1__EquipmentProcessParam(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EquipmentProcessParam(soap, n, NULL, NULL, NULL);
}

inline ns1__EquipmentProcessParam * soap_new_req_ns1__EquipmentProcessParam(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__EquipmentProcessParam *_p = ::soap_new_ns1__EquipmentProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__EquipmentProcessParam * soap_new_set_ns1__EquipmentProcessParam(
	struct soap *soap,
	ns1__ArrayOfParamDTO *ParamList,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__EquipmentProcessParam *_p = ::soap_new_ns1__EquipmentProcessParam(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentProcessParam::ParamList = ParamList;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__EquipmentProcessParam(struct soap *soap, ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EquipmentProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EquipmentProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EquipmentProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentProcessParam", p->soap_type() == SOAP_TYPE_ns1__EquipmentProcessParam ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EquipmentProcessParam * SOAP_FMAC4 soap_get_ns1__EquipmentProcessParam(struct soap*, ns1__EquipmentProcessParam *, const char*, const char*);

inline int soap_read_ns1__EquipmentProcessParam(struct soap *soap, ns1__EquipmentProcessParam *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EquipmentProcessParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EquipmentProcessParam(struct soap *soap, const char *URL, ns1__EquipmentProcessParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EquipmentProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EquipmentProcessParam(struct soap *soap, ns1__EquipmentProcessParam *p)
{
	if (::soap_read_ns1__EquipmentProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DownReason_DEFINED
#define SOAP_TYPE_ns1__DownReason_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DownReason(struct soap*, const char*, int, const ns1__DownReason *, const char*);
SOAP_FMAC3 ns1__DownReason * SOAP_FMAC4 soap_in_ns1__DownReason(struct soap*, const char*, ns1__DownReason *, const char*);
SOAP_FMAC1 ns1__DownReason * SOAP_FMAC2 soap_instantiate_ns1__DownReason(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DownReason * soap_new_ns1__DownReason(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DownReason(soap, n, NULL, NULL, NULL);
}

inline ns1__DownReason * soap_new_req_ns1__DownReason(
	struct soap *soap,
	time_t BeginTime,
	time_t EndTime,
	time_t LocalTime__1)
{
	ns1__DownReason *_p = ::soap_new_ns1__DownReason(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DownReason::BeginTime = BeginTime;
		_p->ns1__DownReason::EndTime = EndTime;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__DownReason * soap_new_set_ns1__DownReason(
	struct soap *soap,
	wchar_t *DownReasonCode,
	time_t BeginTime,
	time_t EndTime,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__DownReason *_p = ::soap_new_ns1__DownReason(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DownReason::DownReasonCode = DownReasonCode;
		_p->ns1__DownReason::BeginTime = BeginTime;
		_p->ns1__DownReason::EndTime = EndTime;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__DownReason(struct soap *soap, ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE_ns1__DownReason ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DownReason(struct soap *soap, const char *URL, ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE_ns1__DownReason ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DownReason(struct soap *soap, const char *URL, ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE_ns1__DownReason ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DownReason(struct soap *soap, const char *URL, ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DownReason", p->soap_type() == SOAP_TYPE_ns1__DownReason ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DownReason * SOAP_FMAC4 soap_get_ns1__DownReason(struct soap*, ns1__DownReason *, const char*, const char*);

inline int soap_read_ns1__DownReason(struct soap *soap, ns1__DownReason *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DownReason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DownReason(struct soap *soap, const char *URL, ns1__DownReason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DownReason(struct soap *soap, ns1__DownReason *p)
{
	if (::soap_read_ns1__DownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDownReason_DEFINED
#define SOAP_TYPE_ns1__ArrayOfDownReason_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfDownReason(struct soap*, const char*, int, const ns1__ArrayOfDownReason *, const char*);
SOAP_FMAC3 ns1__ArrayOfDownReason * SOAP_FMAC4 soap_in_ns1__ArrayOfDownReason(struct soap*, const char*, ns1__ArrayOfDownReason *, const char*);
SOAP_FMAC1 ns1__ArrayOfDownReason * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfDownReason(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfDownReason * soap_new_ns1__ArrayOfDownReason(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfDownReason(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfDownReason * soap_new_req_ns1__ArrayOfDownReason(
	struct soap *soap)
{
	ns1__ArrayOfDownReason *_p = ::soap_new_ns1__ArrayOfDownReason(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfDownReason * soap_new_set_ns1__ArrayOfDownReason(
	struct soap *soap,
	const std::vector<ns1__DownReason *> & DownReason)
{
	ns1__ArrayOfDownReason *_p = ::soap_new_ns1__ArrayOfDownReason(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfDownReason::DownReason = DownReason;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfDownReason(struct soap *soap, ns1__ArrayOfDownReason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDownReason", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDownReason ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfDownReason(struct soap *soap, const char *URL, ns1__ArrayOfDownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDownReason", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDownReason ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfDownReason(struct soap *soap, const char *URL, ns1__ArrayOfDownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDownReason", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDownReason ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfDownReason(struct soap *soap, const char *URL, ns1__ArrayOfDownReason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDownReason", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDownReason ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfDownReason * SOAP_FMAC4 soap_get_ns1__ArrayOfDownReason(struct soap*, ns1__ArrayOfDownReason *, const char*, const char*);

inline int soap_read_ns1__ArrayOfDownReason(struct soap *soap, ns1__ArrayOfDownReason *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfDownReason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfDownReason(struct soap *soap, const char *URL, ns1__ArrayOfDownReason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfDownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfDownReason(struct soap *soap, ns1__ArrayOfDownReason *p)
{
	if (::soap_read_ns1__ArrayOfDownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CCDFileUploadCompleteSFC_DEFINED
#define SOAP_TYPE_ns1__CCDFileUploadCompleteSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCDFileUploadCompleteSFC(struct soap*, const char*, int, const ns1__CCDFileUploadCompleteSFC *, const char*);
SOAP_FMAC3 ns1__CCDFileUploadCompleteSFC * SOAP_FMAC4 soap_in_ns1__CCDFileUploadCompleteSFC(struct soap*, const char*, ns1__CCDFileUploadCompleteSFC *, const char*);
SOAP_FMAC1 ns1__CCDFileUploadCompleteSFC * SOAP_FMAC2 soap_instantiate_ns1__CCDFileUploadCompleteSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCDFileUploadCompleteSFC * soap_new_ns1__CCDFileUploadCompleteSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CCDFileUploadCompleteSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__CCDFileUploadCompleteSFC * soap_new_req_ns1__CCDFileUploadCompleteSFC(
	struct soap *soap,
	int *Passed,
	time_t Timestamp)
{
	ns1__CCDFileUploadCompleteSFC *_p = ::soap_new_ns1__CCDFileUploadCompleteSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCDFileUploadCompleteSFC::Passed = Passed;
		_p->ns1__CCDFileUploadCompleteSFC::Timestamp = Timestamp;
	}
	return _p;
}

inline ns1__CCDFileUploadCompleteSFC * soap_new_set_ns1__CCDFileUploadCompleteSFC(
	struct soap *soap,
	wchar_t *SFC,
	int *Passed,
	wchar_t *URI,
	time_t Timestamp)
{
	ns1__CCDFileUploadCompleteSFC *_p = ::soap_new_ns1__CCDFileUploadCompleteSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCDFileUploadCompleteSFC::SFC = SFC;
		_p->ns1__CCDFileUploadCompleteSFC::Passed = Passed;
		_p->ns1__CCDFileUploadCompleteSFC::URI = URI;
		_p->ns1__CCDFileUploadCompleteSFC::Timestamp = Timestamp;
	}
	return _p;
}

inline int soap_write_ns1__CCDFileUploadCompleteSFC(struct soap *soap, ns1__CCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__CCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__CCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__CCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCDFileUploadCompleteSFC * SOAP_FMAC4 soap_get_ns1__CCDFileUploadCompleteSFC(struct soap*, ns1__CCDFileUploadCompleteSFC *, const char*, const char*);

inline int soap_read_ns1__CCDFileUploadCompleteSFC(struct soap *soap, ns1__CCDFileUploadCompleteSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CCDFileUploadCompleteSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__CCDFileUploadCompleteSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CCDFileUploadCompleteSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCDFileUploadCompleteSFC(struct soap *soap, ns1__CCDFileUploadCompleteSFC *p)
{
	if (::soap_read_ns1__CCDFileUploadCompleteSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCCDFileUploadCompleteSFC_DEFINED
#define SOAP_TYPE_ns1__ArrayOfCCDFileUploadCompleteSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, const char*, int, const ns1__ArrayOfCCDFileUploadCompleteSFC *, const char*);
SOAP_FMAC3 ns1__ArrayOfCCDFileUploadCompleteSFC * SOAP_FMAC4 soap_in_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, const char*, ns1__ArrayOfCCDFileUploadCompleteSFC *, const char*);
SOAP_FMAC1 ns1__ArrayOfCCDFileUploadCompleteSFC * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfCCDFileUploadCompleteSFC * soap_new_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfCCDFileUploadCompleteSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfCCDFileUploadCompleteSFC * soap_new_req_ns1__ArrayOfCCDFileUploadCompleteSFC(
	struct soap *soap)
{
	ns1__ArrayOfCCDFileUploadCompleteSFC *_p = ::soap_new_ns1__ArrayOfCCDFileUploadCompleteSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfCCDFileUploadCompleteSFC * soap_new_set_ns1__ArrayOfCCDFileUploadCompleteSFC(
	struct soap *soap,
	const std::vector<ns1__CCDFileUploadCompleteSFC *> & CCDFileUploadCompleteSFC)
{
	ns1__ArrayOfCCDFileUploadCompleteSFC *_p = ::soap_new_ns1__ArrayOfCCDFileUploadCompleteSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfCCDFileUploadCompleteSFC::CCDFileUploadCompleteSFC = CCDFileUploadCompleteSFC;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, ns1__ArrayOfCCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfCCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__ArrayOfCCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfCCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__ArrayOfCCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfCCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__ArrayOfCCDFileUploadCompleteSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCDFileUploadCompleteSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfCCDFileUploadCompleteSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfCCDFileUploadCompleteSFC * SOAP_FMAC4 soap_get_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, ns1__ArrayOfCCDFileUploadCompleteSFC *, const char*, const char*);

inline int soap_read_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, ns1__ArrayOfCCDFileUploadCompleteSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfCCDFileUploadCompleteSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, const char *URL, ns1__ArrayOfCCDFileUploadCompleteSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfCCDFileUploadCompleteSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfCCDFileUploadCompleteSFC(struct soap *soap, ns1__ArrayOfCCDFileUploadCompleteSFC *p)
{
	if (::soap_read_ns1__ArrayOfCCDFileUploadCompleteSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CCDFileUploadComplete_DEFINED
#define SOAP_TYPE_ns1__CCDFileUploadComplete_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCDFileUploadComplete(struct soap*, const char*, int, const ns1__CCDFileUploadComplete *, const char*);
SOAP_FMAC3 ns1__CCDFileUploadComplete * SOAP_FMAC4 soap_in_ns1__CCDFileUploadComplete(struct soap*, const char*, ns1__CCDFileUploadComplete *, const char*);
SOAP_FMAC1 ns1__CCDFileUploadComplete * SOAP_FMAC2 soap_instantiate_ns1__CCDFileUploadComplete(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCDFileUploadComplete * soap_new_ns1__CCDFileUploadComplete(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CCDFileUploadComplete(soap, n, NULL, NULL, NULL);
}

inline ns1__CCDFileUploadComplete * soap_new_req_ns1__CCDFileUploadComplete(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__CCDFileUploadComplete *_p = ::soap_new_ns1__CCDFileUploadComplete(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__CCDFileUploadComplete * soap_new_set_ns1__CCDFileUploadComplete(
	struct soap *soap,
	ns1__ArrayOfCCDFileUploadCompleteSFC *SFCs,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__CCDFileUploadComplete *_p = ::soap_new_ns1__CCDFileUploadComplete(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCDFileUploadComplete::SFCs = SFCs;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__CCDFileUploadComplete(struct soap *soap, ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCDFileUploadComplete", p->soap_type() == SOAP_TYPE_ns1__CCDFileUploadComplete ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCDFileUploadComplete * SOAP_FMAC4 soap_get_ns1__CCDFileUploadComplete(struct soap*, ns1__CCDFileUploadComplete *, const char*, const char*);

inline int soap_read_ns1__CCDFileUploadComplete(struct soap *soap, ns1__CCDFileUploadComplete *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CCDFileUploadComplete(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, ns1__CCDFileUploadComplete *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CCDFileUploadComplete(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCDFileUploadComplete(struct soap *soap, ns1__CCDFileUploadComplete *p)
{
	if (::soap_read_ns1__CCDFileUploadComplete(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString_DEFINED
#define SOAP_TYPE_ns1__ArrayOfString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap*, const char*, int, const ns1__ArrayOfString *, const char*);
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString *, const char*);
SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfString * soap_new_ns1__ArrayOfString(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfString(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfString * soap_new_req_ns1__ArrayOfString(
	struct soap *soap)
{
	ns1__ArrayOfString *_p = ::soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfString * soap_new_set_ns1__ArrayOfString(
	struct soap *soap,
	const std::vector<std::wstring> & string)
{
	ns1__ArrayOfString *_p = ::soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfString::string = string;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap*, ns1__ArrayOfString *, const char*, const char*);

inline int soap_read_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (::soap_read_ns1__ArrayOfString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BindSFCByScadaDTO_DEFINED
#define SOAP_TYPE_ns1__BindSFCByScadaDTO_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BindSFCByScadaDTO(struct soap*, const char*, int, const ns1__BindSFCByScadaDTO *, const char*);
SOAP_FMAC3 ns1__BindSFCByScadaDTO * SOAP_FMAC4 soap_in_ns1__BindSFCByScadaDTO(struct soap*, const char*, ns1__BindSFCByScadaDTO *, const char*);
SOAP_FMAC1 ns1__BindSFCByScadaDTO * SOAP_FMAC2 soap_instantiate_ns1__BindSFCByScadaDTO(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BindSFCByScadaDTO * soap_new_ns1__BindSFCByScadaDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BindSFCByScadaDTO(soap, n, NULL, NULL, NULL);
}

inline ns1__BindSFCByScadaDTO * soap_new_req_ns1__BindSFCByScadaDTO(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__BindSFCByScadaDTO *_p = ::soap_new_ns1__BindSFCByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__BindSFCByScadaDTO * soap_new_set_ns1__BindSFCByScadaDTO(
	struct soap *soap,
	wchar_t *SFC,
	ns1__ArrayOfString *BindSFCs,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__BindSFCByScadaDTO *_p = ::soap_new_ns1__BindSFCByScadaDTO(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BindSFCByScadaDTO::SFC = SFC;
		_p->ns1__BindSFCByScadaDTO::BindSFCs = BindSFCs;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__BindSFCByScadaDTO(struct soap *soap, ns1__BindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__BindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__BindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__BindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__BindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__BindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__BindSFCByScadaDTO const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindSFCByScadaDTO", p->soap_type() == SOAP_TYPE_ns1__BindSFCByScadaDTO ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BindSFCByScadaDTO * SOAP_FMAC4 soap_get_ns1__BindSFCByScadaDTO(struct soap*, ns1__BindSFCByScadaDTO *, const char*, const char*);

inline int soap_read_ns1__BindSFCByScadaDTO(struct soap *soap, ns1__BindSFCByScadaDTO *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BindSFCByScadaDTO(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BindSFCByScadaDTO(struct soap *soap, const char *URL, ns1__BindSFCByScadaDTO *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BindSFCByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BindSFCByScadaDTO(struct soap *soap, ns1__BindSFCByScadaDTO *p)
{
	if (::soap_read_ns1__BindSFCByScadaDTO(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BindContainerSFC_DEFINED
#define SOAP_TYPE_ns1__BindContainerSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BindContainerSFC(struct soap*, const char*, int, const ns1__BindContainerSFC *, const char*);
SOAP_FMAC3 ns1__BindContainerSFC * SOAP_FMAC4 soap_in_ns1__BindContainerSFC(struct soap*, const char*, ns1__BindContainerSFC *, const char*);
SOAP_FMAC1 ns1__BindContainerSFC * SOAP_FMAC2 soap_instantiate_ns1__BindContainerSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BindContainerSFC * soap_new_ns1__BindContainerSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BindContainerSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__BindContainerSFC * soap_new_req_ns1__BindContainerSFC(
	struct soap *soap)
{
	ns1__BindContainerSFC *_p = ::soap_new_ns1__BindContainerSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__BindContainerSFC * soap_new_set_ns1__BindContainerSFC(
	struct soap *soap,
	wchar_t *SFC,
	wchar_t *Location)
{
	ns1__BindContainerSFC *_p = ::soap_new_ns1__BindContainerSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BindContainerSFC::SFC = SFC;
		_p->ns1__BindContainerSFC::Location = Location;
	}
	return _p;
}

inline int soap_write_ns1__BindContainerSFC(struct soap *soap, ns1__BindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__BindContainerSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BindContainerSFC(struct soap *soap, const char *URL, ns1__BindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__BindContainerSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BindContainerSFC(struct soap *soap, const char *URL, ns1__BindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__BindContainerSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BindContainerSFC(struct soap *soap, const char *URL, ns1__BindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__BindContainerSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BindContainerSFC * SOAP_FMAC4 soap_get_ns1__BindContainerSFC(struct soap*, ns1__BindContainerSFC *, const char*, const char*);

inline int soap_read_ns1__BindContainerSFC(struct soap *soap, ns1__BindContainerSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BindContainerSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BindContainerSFC(struct soap *soap, const char *URL, ns1__BindContainerSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BindContainerSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BindContainerSFC(struct soap *soap, ns1__BindContainerSFC *p)
{
	if (::soap_read_ns1__BindContainerSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfBindContainerSFC_DEFINED
#define SOAP_TYPE_ns1__ArrayOfBindContainerSFC_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfBindContainerSFC(struct soap*, const char*, int, const ns1__ArrayOfBindContainerSFC *, const char*);
SOAP_FMAC3 ns1__ArrayOfBindContainerSFC * SOAP_FMAC4 soap_in_ns1__ArrayOfBindContainerSFC(struct soap*, const char*, ns1__ArrayOfBindContainerSFC *, const char*);
SOAP_FMAC1 ns1__ArrayOfBindContainerSFC * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfBindContainerSFC(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfBindContainerSFC * soap_new_ns1__ArrayOfBindContainerSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfBindContainerSFC(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfBindContainerSFC * soap_new_req_ns1__ArrayOfBindContainerSFC(
	struct soap *soap)
{
	ns1__ArrayOfBindContainerSFC *_p = ::soap_new_ns1__ArrayOfBindContainerSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfBindContainerSFC * soap_new_set_ns1__ArrayOfBindContainerSFC(
	struct soap *soap,
	const std::vector<ns1__BindContainerSFC *> & BindContainerSFC)
{
	ns1__ArrayOfBindContainerSFC *_p = ::soap_new_ns1__ArrayOfBindContainerSFC(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfBindContainerSFC::BindContainerSFC = BindContainerSFC;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfBindContainerSFC(struct soap *soap, ns1__ArrayOfBindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfBindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfBindContainerSFC ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfBindContainerSFC(struct soap *soap, const char *URL, ns1__ArrayOfBindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfBindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfBindContainerSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfBindContainerSFC(struct soap *soap, const char *URL, ns1__ArrayOfBindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfBindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfBindContainerSFC ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfBindContainerSFC(struct soap *soap, const char *URL, ns1__ArrayOfBindContainerSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfBindContainerSFC", p->soap_type() == SOAP_TYPE_ns1__ArrayOfBindContainerSFC ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfBindContainerSFC * SOAP_FMAC4 soap_get_ns1__ArrayOfBindContainerSFC(struct soap*, ns1__ArrayOfBindContainerSFC *, const char*, const char*);

inline int soap_read_ns1__ArrayOfBindContainerSFC(struct soap *soap, ns1__ArrayOfBindContainerSFC *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfBindContainerSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfBindContainerSFC(struct soap *soap, const char *URL, ns1__ArrayOfBindContainerSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfBindContainerSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfBindContainerSFC(struct soap *soap, ns1__ArrayOfBindContainerSFC *p)
{
	if (::soap_read_ns1__ArrayOfBindContainerSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BindContainer_DEFINED
#define SOAP_TYPE_ns1__BindContainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BindContainer(struct soap*, const char*, int, const ns1__BindContainer *, const char*);
SOAP_FMAC3 ns1__BindContainer * SOAP_FMAC4 soap_in_ns1__BindContainer(struct soap*, const char*, ns1__BindContainer *, const char*);
SOAP_FMAC1 ns1__BindContainer * SOAP_FMAC2 soap_instantiate_ns1__BindContainer(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BindContainer * soap_new_ns1__BindContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BindContainer(soap, n, NULL, NULL, NULL);
}

inline ns1__BindContainer * soap_new_req_ns1__BindContainer(
	struct soap *soap,
	time_t LocalTime__1)
{
	ns1__BindContainer *_p = ::soap_new_ns1__BindContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__BindContainer * soap_new_set_ns1__BindContainer(
	struct soap *soap,
	wchar_t *ContainerCode,
	ns1__ArrayOfBindContainerSFC *ContainerSFCs,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__BindContainer *_p = ::soap_new_ns1__BindContainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BindContainer::ContainerCode = ContainerCode;
		_p->ns1__BindContainer::ContainerSFCs = ContainerSFCs;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__BindContainer(struct soap *soap, ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE_ns1__BindContainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BindContainer(struct soap *soap, const char *URL, ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE_ns1__BindContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BindContainer(struct soap *soap, const char *URL, ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE_ns1__BindContainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BindContainer(struct soap *soap, const char *URL, ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindContainer", p->soap_type() == SOAP_TYPE_ns1__BindContainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BindContainer * SOAP_FMAC4 soap_get_ns1__BindContainer(struct soap*, ns1__BindContainer *, const char*, const char*);

inline int soap_read_ns1__BindContainer(struct soap *soap, ns1__BindContainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BindContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BindContainer(struct soap *soap, const char *URL, ns1__BindContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BindContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BindContainer(struct soap *soap, ns1__BindContainer *p)
{
	if (::soap_read_ns1__BindContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__LoginSoapHeader_DEFINED
#define SOAP_TYPE_ns1__LoginSoapHeader_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LoginSoapHeader(struct soap*, const char*, int, const ns1__LoginSoapHeader *, const char*);
SOAP_FMAC3 ns1__LoginSoapHeader * SOAP_FMAC4 soap_in_ns1__LoginSoapHeader(struct soap*, const char*, ns1__LoginSoapHeader *, const char*);
SOAP_FMAC1 ns1__LoginSoapHeader * SOAP_FMAC2 soap_instantiate_ns1__LoginSoapHeader(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LoginSoapHeader * soap_new_ns1__LoginSoapHeader(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LoginSoapHeader(soap, n, NULL, NULL, NULL);
}

inline ns1__LoginSoapHeader * soap_new_req_ns1__LoginSoapHeader(
	struct soap *soap)
{
	ns1__LoginSoapHeader *_p = ::soap_new_ns1__LoginSoapHeader(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__LoginSoapHeader * soap_new_set_ns1__LoginSoapHeader(
	struct soap *soap,
	wchar_t *EquUserID,
	wchar_t *EquPassword,
	wchar_t *OperatorUserID,
	wchar_t *OperatorPassword,
	char *__anyAttribute)
{
	ns1__LoginSoapHeader *_p = ::soap_new_ns1__LoginSoapHeader(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginSoapHeader::EquUserID = EquUserID;
		_p->ns1__LoginSoapHeader::EquPassword = EquPassword;
		_p->ns1__LoginSoapHeader::OperatorUserID = OperatorUserID;
		_p->ns1__LoginSoapHeader::OperatorPassword = OperatorPassword;
		_p->ns1__LoginSoapHeader::__anyAttribute = __anyAttribute;
	}
	return _p;
}

inline int soap_write_ns1__LoginSoapHeader(struct soap *soap, ns1__LoginSoapHeader const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginSoapHeader", p->soap_type() == SOAP_TYPE_ns1__LoginSoapHeader ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LoginSoapHeader(struct soap *soap, const char *URL, ns1__LoginSoapHeader const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginSoapHeader", p->soap_type() == SOAP_TYPE_ns1__LoginSoapHeader ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__LoginSoapHeader(struct soap *soap, const char *URL, ns1__LoginSoapHeader const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginSoapHeader", p->soap_type() == SOAP_TYPE_ns1__LoginSoapHeader ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LoginSoapHeader(struct soap *soap, const char *URL, ns1__LoginSoapHeader const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginSoapHeader", p->soap_type() == SOAP_TYPE_ns1__LoginSoapHeader ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LoginSoapHeader * SOAP_FMAC4 soap_get_ns1__LoginSoapHeader(struct soap*, ns1__LoginSoapHeader *, const char*, const char*);

inline int soap_read_ns1__LoginSoapHeader(struct soap *soap, ns1__LoginSoapHeader *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__LoginSoapHeader(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LoginSoapHeader(struct soap *soap, const char *URL, ns1__LoginSoapHeader *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__LoginSoapHeader(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__LoginSoapHeader(struct soap *soap, ns1__LoginSoapHeader *p)
{
	if (::soap_read_ns1__LoginSoapHeader(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BaseApiResponseForScada_DEFINED
#define SOAP_TYPE_ns1__BaseApiResponseForScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BaseApiResponseForScada(struct soap*, const char*, int, const ns1__BaseApiResponseForScada *, const char*);
SOAP_FMAC3 ns1__BaseApiResponseForScada * SOAP_FMAC4 soap_in_ns1__BaseApiResponseForScada(struct soap*, const char*, ns1__BaseApiResponseForScada *, const char*);
SOAP_FMAC1 ns1__BaseApiResponseForScada * SOAP_FMAC2 soap_instantiate_ns1__BaseApiResponseForScada(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BaseApiResponseForScada * soap_new_ns1__BaseApiResponseForScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BaseApiResponseForScada(soap, n, NULL, NULL, NULL);
}

inline ns1__BaseApiResponseForScada * soap_new_req_ns1__BaseApiResponseForScada(
	struct soap *soap,
	int Code)
{
	ns1__BaseApiResponseForScada *_p = ::soap_new_ns1__BaseApiResponseForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code;
	}
	return _p;
}

inline ns1__BaseApiResponseForScada * soap_new_set_ns1__BaseApiResponseForScada(
	struct soap *soap,
	int Code,
	wchar_t *Msg)
{
	ns1__BaseApiResponseForScada *_p = ::soap_new_ns1__BaseApiResponseForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code;
		_p->ns1__BaseApiResponseForScada::Msg = Msg;
	}
	return _p;
}

inline int soap_write_ns1__BaseApiResponseForScada(struct soap *soap, ns1__BaseApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiResponseForScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BaseApiResponseForScada(struct soap *soap, const char *URL, ns1__BaseApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiResponseForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BaseApiResponseForScada(struct soap *soap, const char *URL, ns1__BaseApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiResponseForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BaseApiResponseForScada(struct soap *soap, const char *URL, ns1__BaseApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiResponseForScada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BaseApiResponseForScada * SOAP_FMAC4 soap_get_ns1__BaseApiResponseForScada(struct soap*, ns1__BaseApiResponseForScada *, const char*, const char*);

inline int soap_read_ns1__BaseApiResponseForScada(struct soap *soap, ns1__BaseApiResponseForScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BaseApiResponseForScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BaseApiResponseForScada(struct soap *soap, const char *URL, ns1__BaseApiResponseForScada *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BaseApiResponseForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BaseApiResponseForScada(struct soap *soap, ns1__BaseApiResponseForScada *p)
{
	if (::soap_read_ns1__BaseApiResponseForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ApiResponseForScada_DEFINED
#define SOAP_TYPE_ns1__ApiResponseForScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ApiResponseForScada(struct soap*, const char*, int, const ns1__ApiResponseForScada *, const char*);
SOAP_FMAC3 ns1__ApiResponseForScada * SOAP_FMAC4 soap_in_ns1__ApiResponseForScada(struct soap*, const char*, ns1__ApiResponseForScada *, const char*);
SOAP_FMAC1 ns1__ApiResponseForScada * SOAP_FMAC2 soap_instantiate_ns1__ApiResponseForScada(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ApiResponseForScada * soap_new_ns1__ApiResponseForScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ApiResponseForScada(soap, n, NULL, NULL, NULL);
}

inline ns1__ApiResponseForScada * soap_new_req_ns1__ApiResponseForScada(
	struct soap *soap,
	int Code__1)
{
	ns1__ApiResponseForScada *_p = ::soap_new_ns1__ApiResponseForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
	}
	return _p;
}

inline ns1__ApiResponseForScada * soap_new_set_ns1__ApiResponseForScada(
	struct soap *soap,
	int Code__1,
	wchar_t *Msg__1)
{
	ns1__ApiResponseForScada *_p = ::soap_new_ns1__ApiResponseForScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiResponseForScada::Code = Code__1;
		_p->ns1__BaseApiResponseForScada::Msg = Msg__1;
	}
	return _p;
}

inline int soap_write_ns1__ApiResponseForScada(struct soap *soap, ns1__ApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseForScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ApiResponseForScada(struct soap *soap, const char *URL, ns1__ApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ApiResponseForScada(struct soap *soap, const char *URL, ns1__ApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseForScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ApiResponseForScada(struct soap *soap, const char *URL, ns1__ApiResponseForScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ApiResponseForScada", p->soap_type() == SOAP_TYPE_ns1__ApiResponseForScada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ApiResponseForScada * SOAP_FMAC4 soap_get_ns1__ApiResponseForScada(struct soap*, ns1__ApiResponseForScada *, const char*, const char*);

inline int soap_read_ns1__ApiResponseForScada(struct soap *soap, ns1__ApiResponseForScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ApiResponseForScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ApiResponseForScada(struct soap *soap, const char *URL, ns1__ApiResponseForScada *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ApiResponseForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ApiResponseForScada(struct soap *soap, ns1__ApiResponseForScada *p)
{
	if (::soap_read_ns1__ApiResponseForScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BaseApiRequestByScada_DEFINED
#define SOAP_TYPE_ns1__BaseApiRequestByScada_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BaseApiRequestByScada(struct soap*, const char*, int, const ns1__BaseApiRequestByScada *, const char*);
SOAP_FMAC3 ns1__BaseApiRequestByScada * SOAP_FMAC4 soap_in_ns1__BaseApiRequestByScada(struct soap*, const char*, ns1__BaseApiRequestByScada *, const char*);
SOAP_FMAC1 ns1__BaseApiRequestByScada * SOAP_FMAC2 soap_instantiate_ns1__BaseApiRequestByScada(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BaseApiRequestByScada * soap_new_ns1__BaseApiRequestByScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BaseApiRequestByScada(soap, n, NULL, NULL, NULL);
}

inline ns1__BaseApiRequestByScada * soap_new_req_ns1__BaseApiRequestByScada(
	struct soap *soap,
	time_t LocalTime)
{
	ns1__BaseApiRequestByScada *_p = ::soap_new_ns1__BaseApiRequestByScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime;
	}
	return _p;
}

inline ns1__BaseApiRequestByScada * soap_new_set_ns1__BaseApiRequestByScada(
	struct soap *soap,
	wchar_t *ResourceCode,
	wchar_t *EquipmentCode,
	time_t LocalTime)
{
	ns1__BaseApiRequestByScada *_p = ::soap_new_ns1__BaseApiRequestByScada(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime;
	}
	return _p;
}

inline int soap_write_ns1__BaseApiRequestByScada(struct soap *soap, ns1__BaseApiRequestByScada const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiRequestByScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiRequestByScada ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BaseApiRequestByScada(struct soap *soap, const char *URL, ns1__BaseApiRequestByScada const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiRequestByScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiRequestByScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BaseApiRequestByScada(struct soap *soap, const char *URL, ns1__BaseApiRequestByScada const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiRequestByScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiRequestByScada ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BaseApiRequestByScada(struct soap *soap, const char *URL, ns1__BaseApiRequestByScada const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseApiRequestByScada", p->soap_type() == SOAP_TYPE_ns1__BaseApiRequestByScada ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BaseApiRequestByScada * SOAP_FMAC4 soap_get_ns1__BaseApiRequestByScada(struct soap*, ns1__BaseApiRequestByScada *, const char*, const char*);

inline int soap_read_ns1__BaseApiRequestByScada(struct soap *soap, ns1__BaseApiRequestByScada *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BaseApiRequestByScada(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BaseApiRequestByScada(struct soap *soap, const char *URL, ns1__BaseApiRequestByScada *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BaseApiRequestByScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BaseApiRequestByScada(struct soap *soap, ns1__BaseApiRequestByScada *p)
{
	if (::soap_read_ns1__BaseApiRequestByScada(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Alarm_DEFINED
#define SOAP_TYPE_ns1__Alarm_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Alarm(struct soap*, const char*, int, const ns1__Alarm *, const char*);
SOAP_FMAC3 ns1__Alarm * SOAP_FMAC4 soap_in_ns1__Alarm(struct soap*, const char*, ns1__Alarm *, const char*);
SOAP_FMAC1 ns1__Alarm * SOAP_FMAC2 soap_instantiate_ns1__Alarm(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Alarm * soap_new_ns1__Alarm(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Alarm(soap, n, NULL, NULL, NULL);
}

inline ns1__Alarm * soap_new_req_ns1__Alarm(
	struct soap *soap,
	int Status,
	time_t LocalTime__1)
{
	ns1__Alarm *_p = ::soap_new_ns1__Alarm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Alarm::Status = Status;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline ns1__Alarm * soap_new_set_ns1__Alarm(
	struct soap *soap,
	wchar_t *AlarmCode,
	int Status,
	wchar_t *AlarmMsg,
	wchar_t *ResourceCode__1,
	wchar_t *EquipmentCode__1,
	time_t LocalTime__1)
{
	ns1__Alarm *_p = ::soap_new_ns1__Alarm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Alarm::AlarmCode = AlarmCode;
		_p->ns1__Alarm::Status = Status;
		_p->ns1__Alarm::AlarmMsg = AlarmMsg;
		_p->ns1__BaseApiRequestByScada::ResourceCode = ResourceCode__1;
		_p->ns1__BaseApiRequestByScada::EquipmentCode = EquipmentCode__1;
		_p->ns1__BaseApiRequestByScada::LocalTime = LocalTime__1;
	}
	return _p;
}

inline int soap_write_ns1__Alarm(struct soap *soap, ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE_ns1__Alarm ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Alarm(struct soap *soap, const char *URL, ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE_ns1__Alarm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Alarm(struct soap *soap, const char *URL, ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE_ns1__Alarm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Alarm(struct soap *soap, const char *URL, ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarm", p->soap_type() == SOAP_TYPE_ns1__Alarm ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Alarm * SOAP_FMAC4 soap_get_ns1__Alarm(struct soap*, ns1__Alarm *, const char*, const char*);

inline int soap_read_ns1__Alarm(struct soap *soap, ns1__Alarm *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Alarm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Alarm(struct soap *soap, const char *URL, ns1__Alarm *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Alarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Alarm(struct soap *soap, ns1__Alarm *p)
{
	if (::soap_read_ns1__Alarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAlarm_DEFINED
#define SOAP_TYPE_ns1__ArrayOfAlarm_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfAlarm(struct soap*, const char*, int, const ns1__ArrayOfAlarm *, const char*);
SOAP_FMAC3 ns1__ArrayOfAlarm * SOAP_FMAC4 soap_in_ns1__ArrayOfAlarm(struct soap*, const char*, ns1__ArrayOfAlarm *, const char*);
SOAP_FMAC1 ns1__ArrayOfAlarm * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfAlarm(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfAlarm * soap_new_ns1__ArrayOfAlarm(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfAlarm(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfAlarm * soap_new_req_ns1__ArrayOfAlarm(
	struct soap *soap)
{
	ns1__ArrayOfAlarm *_p = ::soap_new_ns1__ArrayOfAlarm(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfAlarm * soap_new_set_ns1__ArrayOfAlarm(
	struct soap *soap,
	const std::vector<ns1__Alarm *> & Alarm)
{
	ns1__ArrayOfAlarm *_p = ::soap_new_ns1__ArrayOfAlarm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfAlarm::Alarm = Alarm;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfAlarm(struct soap *soap, ns1__ArrayOfAlarm const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAlarm", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAlarm ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfAlarm(struct soap *soap, const char *URL, ns1__ArrayOfAlarm const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAlarm", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAlarm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfAlarm(struct soap *soap, const char *URL, ns1__ArrayOfAlarm const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAlarm", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAlarm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfAlarm(struct soap *soap, const char *URL, ns1__ArrayOfAlarm const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAlarm", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAlarm ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfAlarm * SOAP_FMAC4 soap_get_ns1__ArrayOfAlarm(struct soap*, ns1__ArrayOfAlarm *, const char*, const char*);

inline int soap_read_ns1__ArrayOfAlarm(struct soap *soap, ns1__ArrayOfAlarm *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfAlarm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfAlarm(struct soap *soap, const char *URL, ns1__ArrayOfAlarm *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfAlarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfAlarm(struct soap *soap, ns1__ArrayOfAlarm *p)
{
	if (::soap_read_ns1__ArrayOfAlarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::wstring *);

#define soap_xsd__decimal2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdwchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::wstring*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__wstring


#define soap_new_xsd__decimal soap_new_std__wstring

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::wstring *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED

inline void soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__wstring(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__wstring(struct soap *soap, std::wstring *p)
{
	if (::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__UnBindSFC__DEFINED
#define SOAP_TYPE___ns1__UnBindSFC__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UnBindSFC_(struct soap*, struct __ns1__UnBindSFC_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UnBindSFC_(struct soap*, const struct __ns1__UnBindSFC_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UnBindSFC_(struct soap*, const char*, int, const struct __ns1__UnBindSFC_ *, const char*);
SOAP_FMAC3 struct __ns1__UnBindSFC_ * SOAP_FMAC4 soap_in___ns1__UnBindSFC_(struct soap*, const char*, struct __ns1__UnBindSFC_ *, const char*);
SOAP_FMAC1 struct __ns1__UnBindSFC_ * SOAP_FMAC2 soap_instantiate___ns1__UnBindSFC_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UnBindSFC_ * soap_new___ns1__UnBindSFC_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UnBindSFC_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UnBindSFC_ * soap_new_req___ns1__UnBindSFC_(
	struct soap *soap)
{
	struct __ns1__UnBindSFC_ *_p = ::soap_new___ns1__UnBindSFC_(soap);
	if (_p)
	{	::soap_default___ns1__UnBindSFC_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UnBindSFC_ * soap_new_set___ns1__UnBindSFC_(
	struct soap *soap,
	_ns1__UnBindSFC *ns1__UnBindSFC)
{
	struct __ns1__UnBindSFC_ *_p = ::soap_new___ns1__UnBindSFC_(soap);
	if (_p)
	{	::soap_default___ns1__UnBindSFC_(soap, _p);
		_p->ns1__UnBindSFC = ns1__UnBindSFC;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UnBindSFC_(struct soap*, const struct __ns1__UnBindSFC_ *, const char*, const char*);

inline int soap_write___ns1__UnBindSFC_(struct soap *soap, struct __ns1__UnBindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__UnBindSFC_(soap, p), 0) || ::soap_put___ns1__UnBindSFC_(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UnBindSFC_(struct soap *soap, const char *URL, struct __ns1__UnBindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UnBindSFC_(soap, p), 0) || ::soap_put___ns1__UnBindSFC_(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__UnBindSFC_(struct soap *soap, const char *URL, struct __ns1__UnBindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UnBindSFC_(soap, p), 0) || ::soap_put___ns1__UnBindSFC_(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UnBindSFC_(struct soap *soap, const char *URL, struct __ns1__UnBindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UnBindSFC_(soap, p), 0) || ::soap_put___ns1__UnBindSFC_(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UnBindSFC_ * SOAP_FMAC4 soap_get___ns1__UnBindSFC_(struct soap*, struct __ns1__UnBindSFC_ *, const char*, const char*);

inline int soap_read___ns1__UnBindSFC_(struct soap *soap, struct __ns1__UnBindSFC_ *p)
{
	if (p)
	{	::soap_default___ns1__UnBindSFC_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__UnBindSFC_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UnBindSFC_(struct soap *soap, const char *URL, struct __ns1__UnBindSFC_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__UnBindSFC_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__UnBindSFC_(struct soap *soap, struct __ns1__UnBindSFC_ *p)
{
	if (::soap_read___ns1__UnBindSFC_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__UnBindSFC_DEFINED
#define SOAP_TYPE___ns1__UnBindSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UnBindSFC(struct soap*, struct __ns1__UnBindSFC *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UnBindSFC(struct soap*, const struct __ns1__UnBindSFC *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UnBindSFC(struct soap*, const char*, int, const struct __ns1__UnBindSFC *, const char*);
SOAP_FMAC3 struct __ns1__UnBindSFC * SOAP_FMAC4 soap_in___ns1__UnBindSFC(struct soap*, const char*, struct __ns1__UnBindSFC *, const char*);
SOAP_FMAC1 struct __ns1__UnBindSFC * SOAP_FMAC2 soap_instantiate___ns1__UnBindSFC(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UnBindSFC * soap_new___ns1__UnBindSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UnBindSFC(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UnBindSFC * soap_new_req___ns1__UnBindSFC(
	struct soap *soap)
{
	struct __ns1__UnBindSFC *_p = ::soap_new___ns1__UnBindSFC(soap);
	if (_p)
	{	::soap_default___ns1__UnBindSFC(soap, _p);
	}
	return _p;
}

inline struct __ns1__UnBindSFC * soap_new_set___ns1__UnBindSFC(
	struct soap *soap,
	_ns1__UnBindSFC *ns1__UnBindSFC)
{
	struct __ns1__UnBindSFC *_p = ::soap_new___ns1__UnBindSFC(soap);
	if (_p)
	{	::soap_default___ns1__UnBindSFC(soap, _p);
		_p->ns1__UnBindSFC = ns1__UnBindSFC;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UnBindSFC(struct soap*, const struct __ns1__UnBindSFC *, const char*, const char*);

inline int soap_write___ns1__UnBindSFC(struct soap *soap, struct __ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__UnBindSFC(soap, p), 0) || ::soap_put___ns1__UnBindSFC(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UnBindSFC(struct soap *soap, const char *URL, struct __ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UnBindSFC(soap, p), 0) || ::soap_put___ns1__UnBindSFC(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__UnBindSFC(struct soap *soap, const char *URL, struct __ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UnBindSFC(soap, p), 0) || ::soap_put___ns1__UnBindSFC(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UnBindSFC(struct soap *soap, const char *URL, struct __ns1__UnBindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UnBindSFC(soap, p), 0) || ::soap_put___ns1__UnBindSFC(soap, p, "-ns1:UnBindSFC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UnBindSFC * SOAP_FMAC4 soap_get___ns1__UnBindSFC(struct soap*, struct __ns1__UnBindSFC *, const char*, const char*);

inline int soap_read___ns1__UnBindSFC(struct soap *soap, struct __ns1__UnBindSFC *p)
{
	if (p)
	{	::soap_default___ns1__UnBindSFC(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__UnBindSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UnBindSFC(struct soap *soap, const char *URL, struct __ns1__UnBindSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__UnBindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__UnBindSFC(struct soap *soap, struct __ns1__UnBindSFC *p)
{
	if (::soap_read___ns1__UnBindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ToolLife__DEFINED
#define SOAP_TYPE___ns1__ToolLife__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ToolLife_(struct soap*, struct __ns1__ToolLife_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ToolLife_(struct soap*, const struct __ns1__ToolLife_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ToolLife_(struct soap*, const char*, int, const struct __ns1__ToolLife_ *, const char*);
SOAP_FMAC3 struct __ns1__ToolLife_ * SOAP_FMAC4 soap_in___ns1__ToolLife_(struct soap*, const char*, struct __ns1__ToolLife_ *, const char*);
SOAP_FMAC1 struct __ns1__ToolLife_ * SOAP_FMAC2 soap_instantiate___ns1__ToolLife_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ToolLife_ * soap_new___ns1__ToolLife_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ToolLife_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ToolLife_ * soap_new_req___ns1__ToolLife_(
	struct soap *soap)
{
	struct __ns1__ToolLife_ *_p = ::soap_new___ns1__ToolLife_(soap);
	if (_p)
	{	::soap_default___ns1__ToolLife_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ToolLife_ * soap_new_set___ns1__ToolLife_(
	struct soap *soap,
	_ns1__ToolLife *ns1__ToolLife_)
{
	struct __ns1__ToolLife_ *_p = ::soap_new___ns1__ToolLife_(soap);
	if (_p)
	{	::soap_default___ns1__ToolLife_(soap, _p);
		_p->ns1__ToolLife_ = ns1__ToolLife_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ToolLife_(struct soap*, const struct __ns1__ToolLife_ *, const char*, const char*);

inline int soap_write___ns1__ToolLife_(struct soap *soap, struct __ns1__ToolLife_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ToolLife_(soap, p), 0) || ::soap_put___ns1__ToolLife_(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ToolLife_(struct soap *soap, const char *URL, struct __ns1__ToolLife_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolLife_(soap, p), 0) || ::soap_put___ns1__ToolLife_(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ToolLife_(struct soap *soap, const char *URL, struct __ns1__ToolLife_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolLife_(soap, p), 0) || ::soap_put___ns1__ToolLife_(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ToolLife_(struct soap *soap, const char *URL, struct __ns1__ToolLife_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolLife_(soap, p), 0) || ::soap_put___ns1__ToolLife_(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ToolLife_ * SOAP_FMAC4 soap_get___ns1__ToolLife_(struct soap*, struct __ns1__ToolLife_ *, const char*, const char*);

inline int soap_read___ns1__ToolLife_(struct soap *soap, struct __ns1__ToolLife_ *p)
{
	if (p)
	{	::soap_default___ns1__ToolLife_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ToolLife_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ToolLife_(struct soap *soap, const char *URL, struct __ns1__ToolLife_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ToolLife_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ToolLife_(struct soap *soap, struct __ns1__ToolLife_ *p)
{
	if (::soap_read___ns1__ToolLife_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ToolLife_DEFINED
#define SOAP_TYPE___ns1__ToolLife_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ToolLife(struct soap*, struct __ns1__ToolLife *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ToolLife(struct soap*, const struct __ns1__ToolLife *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ToolLife(struct soap*, const char*, int, const struct __ns1__ToolLife *, const char*);
SOAP_FMAC3 struct __ns1__ToolLife * SOAP_FMAC4 soap_in___ns1__ToolLife(struct soap*, const char*, struct __ns1__ToolLife *, const char*);
SOAP_FMAC1 struct __ns1__ToolLife * SOAP_FMAC2 soap_instantiate___ns1__ToolLife(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ToolLife * soap_new___ns1__ToolLife(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ToolLife(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ToolLife * soap_new_req___ns1__ToolLife(
	struct soap *soap)
{
	struct __ns1__ToolLife *_p = ::soap_new___ns1__ToolLife(soap);
	if (_p)
	{	::soap_default___ns1__ToolLife(soap, _p);
	}
	return _p;
}

inline struct __ns1__ToolLife * soap_new_set___ns1__ToolLife(
	struct soap *soap,
	_ns1__ToolLife *ns1__ToolLife_)
{
	struct __ns1__ToolLife *_p = ::soap_new___ns1__ToolLife(soap);
	if (_p)
	{	::soap_default___ns1__ToolLife(soap, _p);
		_p->ns1__ToolLife_ = ns1__ToolLife_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ToolLife(struct soap*, const struct __ns1__ToolLife *, const char*, const char*);

inline int soap_write___ns1__ToolLife(struct soap *soap, struct __ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ToolLife(soap, p), 0) || ::soap_put___ns1__ToolLife(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ToolLife(struct soap *soap, const char *URL, struct __ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolLife(soap, p), 0) || ::soap_put___ns1__ToolLife(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ToolLife(struct soap *soap, const char *URL, struct __ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolLife(soap, p), 0) || ::soap_put___ns1__ToolLife(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ToolLife(struct soap *soap, const char *URL, struct __ns1__ToolLife const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolLife(soap, p), 0) || ::soap_put___ns1__ToolLife(soap, p, "-ns1:ToolLife", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ToolLife * SOAP_FMAC4 soap_get___ns1__ToolLife(struct soap*, struct __ns1__ToolLife *, const char*, const char*);

inline int soap_read___ns1__ToolLife(struct soap *soap, struct __ns1__ToolLife *p)
{
	if (p)
	{	::soap_default___ns1__ToolLife(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ToolLife(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ToolLife(struct soap *soap, const char *URL, struct __ns1__ToolLife *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ToolLife(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ToolLife(struct soap *soap, struct __ns1__ToolLife *p)
{
	if (::soap_read___ns1__ToolLife(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ToolBind__DEFINED
#define SOAP_TYPE___ns1__ToolBind__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ToolBind_(struct soap*, struct __ns1__ToolBind_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ToolBind_(struct soap*, const struct __ns1__ToolBind_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ToolBind_(struct soap*, const char*, int, const struct __ns1__ToolBind_ *, const char*);
SOAP_FMAC3 struct __ns1__ToolBind_ * SOAP_FMAC4 soap_in___ns1__ToolBind_(struct soap*, const char*, struct __ns1__ToolBind_ *, const char*);
SOAP_FMAC1 struct __ns1__ToolBind_ * SOAP_FMAC2 soap_instantiate___ns1__ToolBind_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ToolBind_ * soap_new___ns1__ToolBind_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ToolBind_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ToolBind_ * soap_new_req___ns1__ToolBind_(
	struct soap *soap)
{
	struct __ns1__ToolBind_ *_p = ::soap_new___ns1__ToolBind_(soap);
	if (_p)
	{	::soap_default___ns1__ToolBind_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ToolBind_ * soap_new_set___ns1__ToolBind_(
	struct soap *soap,
	_ns1__ToolBind *ns1__ToolBind_)
{
	struct __ns1__ToolBind_ *_p = ::soap_new___ns1__ToolBind_(soap);
	if (_p)
	{	::soap_default___ns1__ToolBind_(soap, _p);
		_p->ns1__ToolBind_ = ns1__ToolBind_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ToolBind_(struct soap*, const struct __ns1__ToolBind_ *, const char*, const char*);

inline int soap_write___ns1__ToolBind_(struct soap *soap, struct __ns1__ToolBind_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ToolBind_(soap, p), 0) || ::soap_put___ns1__ToolBind_(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ToolBind_(struct soap *soap, const char *URL, struct __ns1__ToolBind_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolBind_(soap, p), 0) || ::soap_put___ns1__ToolBind_(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ToolBind_(struct soap *soap, const char *URL, struct __ns1__ToolBind_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolBind_(soap, p), 0) || ::soap_put___ns1__ToolBind_(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ToolBind_(struct soap *soap, const char *URL, struct __ns1__ToolBind_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolBind_(soap, p), 0) || ::soap_put___ns1__ToolBind_(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ToolBind_ * SOAP_FMAC4 soap_get___ns1__ToolBind_(struct soap*, struct __ns1__ToolBind_ *, const char*, const char*);

inline int soap_read___ns1__ToolBind_(struct soap *soap, struct __ns1__ToolBind_ *p)
{
	if (p)
	{	::soap_default___ns1__ToolBind_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ToolBind_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ToolBind_(struct soap *soap, const char *URL, struct __ns1__ToolBind_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ToolBind_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ToolBind_(struct soap *soap, struct __ns1__ToolBind_ *p)
{
	if (::soap_read___ns1__ToolBind_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ToolBind_DEFINED
#define SOAP_TYPE___ns1__ToolBind_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ToolBind(struct soap*, struct __ns1__ToolBind *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ToolBind(struct soap*, const struct __ns1__ToolBind *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ToolBind(struct soap*, const char*, int, const struct __ns1__ToolBind *, const char*);
SOAP_FMAC3 struct __ns1__ToolBind * SOAP_FMAC4 soap_in___ns1__ToolBind(struct soap*, const char*, struct __ns1__ToolBind *, const char*);
SOAP_FMAC1 struct __ns1__ToolBind * SOAP_FMAC2 soap_instantiate___ns1__ToolBind(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ToolBind * soap_new___ns1__ToolBind(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ToolBind(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ToolBind * soap_new_req___ns1__ToolBind(
	struct soap *soap)
{
	struct __ns1__ToolBind *_p = ::soap_new___ns1__ToolBind(soap);
	if (_p)
	{	::soap_default___ns1__ToolBind(soap, _p);
	}
	return _p;
}

inline struct __ns1__ToolBind * soap_new_set___ns1__ToolBind(
	struct soap *soap,
	_ns1__ToolBind *ns1__ToolBind_)
{
	struct __ns1__ToolBind *_p = ::soap_new___ns1__ToolBind(soap);
	if (_p)
	{	::soap_default___ns1__ToolBind(soap, _p);
		_p->ns1__ToolBind_ = ns1__ToolBind_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ToolBind(struct soap*, const struct __ns1__ToolBind *, const char*, const char*);

inline int soap_write___ns1__ToolBind(struct soap *soap, struct __ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ToolBind(soap, p), 0) || ::soap_put___ns1__ToolBind(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ToolBind(struct soap *soap, const char *URL, struct __ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolBind(soap, p), 0) || ::soap_put___ns1__ToolBind(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ToolBind(struct soap *soap, const char *URL, struct __ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolBind(soap, p), 0) || ::soap_put___ns1__ToolBind(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ToolBind(struct soap *soap, const char *URL, struct __ns1__ToolBind const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ToolBind(soap, p), 0) || ::soap_put___ns1__ToolBind(soap, p, "-ns1:ToolBind", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ToolBind * SOAP_FMAC4 soap_get___ns1__ToolBind(struct soap*, struct __ns1__ToolBind *, const char*, const char*);

inline int soap_read___ns1__ToolBind(struct soap *soap, struct __ns1__ToolBind *p)
{
	if (p)
	{	::soap_default___ns1__ToolBind(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ToolBind(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ToolBind(struct soap *soap, const char *URL, struct __ns1__ToolBind *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ToolBind(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ToolBind(struct soap *soap, struct __ns1__ToolBind *p)
{
	if (::soap_read___ns1__ToolBind(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__State__DEFINED
#define SOAP_TYPE___ns1__State__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__State_(struct soap*, struct __ns1__State_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__State_(struct soap*, const struct __ns1__State_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__State_(struct soap*, const char*, int, const struct __ns1__State_ *, const char*);
SOAP_FMAC3 struct __ns1__State_ * SOAP_FMAC4 soap_in___ns1__State_(struct soap*, const char*, struct __ns1__State_ *, const char*);
SOAP_FMAC1 struct __ns1__State_ * SOAP_FMAC2 soap_instantiate___ns1__State_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__State_ * soap_new___ns1__State_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__State_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__State_ * soap_new_req___ns1__State_(
	struct soap *soap)
{
	struct __ns1__State_ *_p = ::soap_new___ns1__State_(soap);
	if (_p)
	{	::soap_default___ns1__State_(soap, _p);
	}
	return _p;
}

inline struct __ns1__State_ * soap_new_set___ns1__State_(
	struct soap *soap,
	_ns1__State *ns1__State_)
{
	struct __ns1__State_ *_p = ::soap_new___ns1__State_(soap);
	if (_p)
	{	::soap_default___ns1__State_(soap, _p);
		_p->ns1__State_ = ns1__State_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__State_(struct soap*, const struct __ns1__State_ *, const char*, const char*);

inline int soap_write___ns1__State_(struct soap *soap, struct __ns1__State_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__State_(soap, p), 0) || ::soap_put___ns1__State_(soap, p, "-ns1:State", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__State_(struct soap *soap, const char *URL, struct __ns1__State_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__State_(soap, p), 0) || ::soap_put___ns1__State_(soap, p, "-ns1:State", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__State_(struct soap *soap, const char *URL, struct __ns1__State_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__State_(soap, p), 0) || ::soap_put___ns1__State_(soap, p, "-ns1:State", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__State_(struct soap *soap, const char *URL, struct __ns1__State_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__State_(soap, p), 0) || ::soap_put___ns1__State_(soap, p, "-ns1:State", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__State_ * SOAP_FMAC4 soap_get___ns1__State_(struct soap*, struct __ns1__State_ *, const char*, const char*);

inline int soap_read___ns1__State_(struct soap *soap, struct __ns1__State_ *p)
{
	if (p)
	{	::soap_default___ns1__State_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__State_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__State_(struct soap *soap, const char *URL, struct __ns1__State_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__State_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__State_(struct soap *soap, struct __ns1__State_ *p)
{
	if (::soap_read___ns1__State_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__State_DEFINED
#define SOAP_TYPE___ns1__State_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__State(struct soap*, struct __ns1__State *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__State(struct soap*, const struct __ns1__State *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__State(struct soap*, const char*, int, const struct __ns1__State *, const char*);
SOAP_FMAC3 struct __ns1__State * SOAP_FMAC4 soap_in___ns1__State(struct soap*, const char*, struct __ns1__State *, const char*);
SOAP_FMAC1 struct __ns1__State * SOAP_FMAC2 soap_instantiate___ns1__State(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__State * soap_new___ns1__State(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__State(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__State * soap_new_req___ns1__State(
	struct soap *soap)
{
	struct __ns1__State *_p = ::soap_new___ns1__State(soap);
	if (_p)
	{	::soap_default___ns1__State(soap, _p);
	}
	return _p;
}

inline struct __ns1__State * soap_new_set___ns1__State(
	struct soap *soap,
	_ns1__State *ns1__State_)
{
	struct __ns1__State *_p = ::soap_new___ns1__State(soap);
	if (_p)
	{	::soap_default___ns1__State(soap, _p);
		_p->ns1__State_ = ns1__State_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__State(struct soap*, const struct __ns1__State *, const char*, const char*);

inline int soap_write___ns1__State(struct soap *soap, struct __ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__State(soap, p), 0) || ::soap_put___ns1__State(soap, p, "-ns1:State", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__State(struct soap *soap, const char *URL, struct __ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__State(soap, p), 0) || ::soap_put___ns1__State(soap, p, "-ns1:State", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__State(struct soap *soap, const char *URL, struct __ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__State(soap, p), 0) || ::soap_put___ns1__State(soap, p, "-ns1:State", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__State(struct soap *soap, const char *URL, struct __ns1__State const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__State(soap, p), 0) || ::soap_put___ns1__State(soap, p, "-ns1:State", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__State * SOAP_FMAC4 soap_get___ns1__State(struct soap*, struct __ns1__State *, const char*, const char*);

inline int soap_read___ns1__State(struct soap *soap, struct __ns1__State *p)
{
	if (p)
	{	::soap_default___ns1__State(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__State(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__State(struct soap *soap, const char *URL, struct __ns1__State *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__State(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__State(struct soap *soap, struct __ns1__State *p)
{
	if (::soap_read___ns1__State(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__RecipeVersionExamine__DEFINED
#define SOAP_TYPE___ns1__RecipeVersionExamine__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RecipeVersionExamine_(struct soap*, struct __ns1__RecipeVersionExamine_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RecipeVersionExamine_(struct soap*, const struct __ns1__RecipeVersionExamine_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RecipeVersionExamine_(struct soap*, const char*, int, const struct __ns1__RecipeVersionExamine_ *, const char*);
SOAP_FMAC3 struct __ns1__RecipeVersionExamine_ * SOAP_FMAC4 soap_in___ns1__RecipeVersionExamine_(struct soap*, const char*, struct __ns1__RecipeVersionExamine_ *, const char*);
SOAP_FMAC1 struct __ns1__RecipeVersionExamine_ * SOAP_FMAC2 soap_instantiate___ns1__RecipeVersionExamine_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RecipeVersionExamine_ * soap_new___ns1__RecipeVersionExamine_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RecipeVersionExamine_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RecipeVersionExamine_ * soap_new_req___ns1__RecipeVersionExamine_(
	struct soap *soap)
{
	struct __ns1__RecipeVersionExamine_ *_p = ::soap_new___ns1__RecipeVersionExamine_(soap);
	if (_p)
	{	::soap_default___ns1__RecipeVersionExamine_(soap, _p);
	}
	return _p;
}

inline struct __ns1__RecipeVersionExamine_ * soap_new_set___ns1__RecipeVersionExamine_(
	struct soap *soap,
	_ns1__RecipeVersionExamine *ns1__RecipeVersionExamine_)
{
	struct __ns1__RecipeVersionExamine_ *_p = ::soap_new___ns1__RecipeVersionExamine_(soap);
	if (_p)
	{	::soap_default___ns1__RecipeVersionExamine_(soap, _p);
		_p->ns1__RecipeVersionExamine_ = ns1__RecipeVersionExamine_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RecipeVersionExamine_(struct soap*, const struct __ns1__RecipeVersionExamine_ *, const char*, const char*);

inline int soap_write___ns1__RecipeVersionExamine_(struct soap *soap, struct __ns1__RecipeVersionExamine_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__RecipeVersionExamine_(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine_(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RecipeVersionExamine_(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__RecipeVersionExamine_(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine_(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__RecipeVersionExamine_(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__RecipeVersionExamine_(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine_(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RecipeVersionExamine_(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__RecipeVersionExamine_(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine_(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RecipeVersionExamine_ * SOAP_FMAC4 soap_get___ns1__RecipeVersionExamine_(struct soap*, struct __ns1__RecipeVersionExamine_ *, const char*, const char*);

inline int soap_read___ns1__RecipeVersionExamine_(struct soap *soap, struct __ns1__RecipeVersionExamine_ *p)
{
	if (p)
	{	::soap_default___ns1__RecipeVersionExamine_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__RecipeVersionExamine_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RecipeVersionExamine_(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__RecipeVersionExamine_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__RecipeVersionExamine_(struct soap *soap, struct __ns1__RecipeVersionExamine_ *p)
{
	if (::soap_read___ns1__RecipeVersionExamine_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__RecipeVersionExamine_DEFINED
#define SOAP_TYPE___ns1__RecipeVersionExamine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RecipeVersionExamine(struct soap*, struct __ns1__RecipeVersionExamine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RecipeVersionExamine(struct soap*, const struct __ns1__RecipeVersionExamine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RecipeVersionExamine(struct soap*, const char*, int, const struct __ns1__RecipeVersionExamine *, const char*);
SOAP_FMAC3 struct __ns1__RecipeVersionExamine * SOAP_FMAC4 soap_in___ns1__RecipeVersionExamine(struct soap*, const char*, struct __ns1__RecipeVersionExamine *, const char*);
SOAP_FMAC1 struct __ns1__RecipeVersionExamine * SOAP_FMAC2 soap_instantiate___ns1__RecipeVersionExamine(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RecipeVersionExamine * soap_new___ns1__RecipeVersionExamine(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RecipeVersionExamine(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RecipeVersionExamine * soap_new_req___ns1__RecipeVersionExamine(
	struct soap *soap)
{
	struct __ns1__RecipeVersionExamine *_p = ::soap_new___ns1__RecipeVersionExamine(soap);
	if (_p)
	{	::soap_default___ns1__RecipeVersionExamine(soap, _p);
	}
	return _p;
}

inline struct __ns1__RecipeVersionExamine * soap_new_set___ns1__RecipeVersionExamine(
	struct soap *soap,
	_ns1__RecipeVersionExamine *ns1__RecipeVersionExamine_)
{
	struct __ns1__RecipeVersionExamine *_p = ::soap_new___ns1__RecipeVersionExamine(soap);
	if (_p)
	{	::soap_default___ns1__RecipeVersionExamine(soap, _p);
		_p->ns1__RecipeVersionExamine_ = ns1__RecipeVersionExamine_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RecipeVersionExamine(struct soap*, const struct __ns1__RecipeVersionExamine *, const char*, const char*);

inline int soap_write___ns1__RecipeVersionExamine(struct soap *soap, struct __ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__RecipeVersionExamine(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RecipeVersionExamine(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__RecipeVersionExamine(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__RecipeVersionExamine(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__RecipeVersionExamine(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RecipeVersionExamine(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__RecipeVersionExamine(soap, p), 0) || ::soap_put___ns1__RecipeVersionExamine(soap, p, "-ns1:RecipeVersionExamine", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RecipeVersionExamine * SOAP_FMAC4 soap_get___ns1__RecipeVersionExamine(struct soap*, struct __ns1__RecipeVersionExamine *, const char*, const char*);

inline int soap_read___ns1__RecipeVersionExamine(struct soap *soap, struct __ns1__RecipeVersionExamine *p)
{
	if (p)
	{	::soap_default___ns1__RecipeVersionExamine(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__RecipeVersionExamine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RecipeVersionExamine(struct soap *soap, const char *URL, struct __ns1__RecipeVersionExamine *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__RecipeVersionExamine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__RecipeVersionExamine(struct soap *soap, struct __ns1__RecipeVersionExamine *p)
{
	if (::soap_read___ns1__RecipeVersionExamine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetRecipeList__DEFINED
#define SOAP_TYPE___ns1__GetRecipeList__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRecipeList_(struct soap*, struct __ns1__GetRecipeList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRecipeList_(struct soap*, const struct __ns1__GetRecipeList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRecipeList_(struct soap*, const char*, int, const struct __ns1__GetRecipeList_ *, const char*);
SOAP_FMAC3 struct __ns1__GetRecipeList_ * SOAP_FMAC4 soap_in___ns1__GetRecipeList_(struct soap*, const char*, struct __ns1__GetRecipeList_ *, const char*);
SOAP_FMAC1 struct __ns1__GetRecipeList_ * SOAP_FMAC2 soap_instantiate___ns1__GetRecipeList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRecipeList_ * soap_new___ns1__GetRecipeList_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRecipeList_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRecipeList_ * soap_new_req___ns1__GetRecipeList_(
	struct soap *soap)
{
	struct __ns1__GetRecipeList_ *_p = ::soap_new___ns1__GetRecipeList_(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipeList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRecipeList_ * soap_new_set___ns1__GetRecipeList_(
	struct soap *soap,
	_ns1__GetRecipeList *ns1__GetRecipeList)
{
	struct __ns1__GetRecipeList_ *_p = ::soap_new___ns1__GetRecipeList_(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipeList_(soap, _p);
		_p->ns1__GetRecipeList = ns1__GetRecipeList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRecipeList_(struct soap*, const struct __ns1__GetRecipeList_ *, const char*, const char*);

inline int soap_write___ns1__GetRecipeList_(struct soap *soap, struct __ns1__GetRecipeList_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetRecipeList_(soap, p), 0) || ::soap_put___ns1__GetRecipeList_(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRecipeList_(struct soap *soap, const char *URL, struct __ns1__GetRecipeList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipeList_(soap, p), 0) || ::soap_put___ns1__GetRecipeList_(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetRecipeList_(struct soap *soap, const char *URL, struct __ns1__GetRecipeList_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipeList_(soap, p), 0) || ::soap_put___ns1__GetRecipeList_(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRecipeList_(struct soap *soap, const char *URL, struct __ns1__GetRecipeList_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipeList_(soap, p), 0) || ::soap_put___ns1__GetRecipeList_(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRecipeList_ * SOAP_FMAC4 soap_get___ns1__GetRecipeList_(struct soap*, struct __ns1__GetRecipeList_ *, const char*, const char*);

inline int soap_read___ns1__GetRecipeList_(struct soap *soap, struct __ns1__GetRecipeList_ *p)
{
	if (p)
	{	::soap_default___ns1__GetRecipeList_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetRecipeList_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRecipeList_(struct soap *soap, const char *URL, struct __ns1__GetRecipeList_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetRecipeList_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetRecipeList_(struct soap *soap, struct __ns1__GetRecipeList_ *p)
{
	if (::soap_read___ns1__GetRecipeList_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetRecipeList_DEFINED
#define SOAP_TYPE___ns1__GetRecipeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRecipeList(struct soap*, struct __ns1__GetRecipeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRecipeList(struct soap*, const struct __ns1__GetRecipeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRecipeList(struct soap*, const char*, int, const struct __ns1__GetRecipeList *, const char*);
SOAP_FMAC3 struct __ns1__GetRecipeList * SOAP_FMAC4 soap_in___ns1__GetRecipeList(struct soap*, const char*, struct __ns1__GetRecipeList *, const char*);
SOAP_FMAC1 struct __ns1__GetRecipeList * SOAP_FMAC2 soap_instantiate___ns1__GetRecipeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRecipeList * soap_new___ns1__GetRecipeList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRecipeList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRecipeList * soap_new_req___ns1__GetRecipeList(
	struct soap *soap)
{
	struct __ns1__GetRecipeList *_p = ::soap_new___ns1__GetRecipeList(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipeList(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRecipeList * soap_new_set___ns1__GetRecipeList(
	struct soap *soap,
	_ns1__GetRecipeList *ns1__GetRecipeList)
{
	struct __ns1__GetRecipeList *_p = ::soap_new___ns1__GetRecipeList(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipeList(soap, _p);
		_p->ns1__GetRecipeList = ns1__GetRecipeList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRecipeList(struct soap*, const struct __ns1__GetRecipeList *, const char*, const char*);

inline int soap_write___ns1__GetRecipeList(struct soap *soap, struct __ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetRecipeList(soap, p), 0) || ::soap_put___ns1__GetRecipeList(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRecipeList(struct soap *soap, const char *URL, struct __ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipeList(soap, p), 0) || ::soap_put___ns1__GetRecipeList(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetRecipeList(struct soap *soap, const char *URL, struct __ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipeList(soap, p), 0) || ::soap_put___ns1__GetRecipeList(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRecipeList(struct soap *soap, const char *URL, struct __ns1__GetRecipeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipeList(soap, p), 0) || ::soap_put___ns1__GetRecipeList(soap, p, "-ns1:GetRecipeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRecipeList * SOAP_FMAC4 soap_get___ns1__GetRecipeList(struct soap*, struct __ns1__GetRecipeList *, const char*, const char*);

inline int soap_read___ns1__GetRecipeList(struct soap *soap, struct __ns1__GetRecipeList *p)
{
	if (p)
	{	::soap_default___ns1__GetRecipeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetRecipeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRecipeList(struct soap *soap, const char *URL, struct __ns1__GetRecipeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetRecipeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetRecipeList(struct soap *soap, struct __ns1__GetRecipeList *p)
{
	if (::soap_read___ns1__GetRecipeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetRecipe__DEFINED
#define SOAP_TYPE___ns1__GetRecipe__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRecipe_(struct soap*, struct __ns1__GetRecipe_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRecipe_(struct soap*, const struct __ns1__GetRecipe_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRecipe_(struct soap*, const char*, int, const struct __ns1__GetRecipe_ *, const char*);
SOAP_FMAC3 struct __ns1__GetRecipe_ * SOAP_FMAC4 soap_in___ns1__GetRecipe_(struct soap*, const char*, struct __ns1__GetRecipe_ *, const char*);
SOAP_FMAC1 struct __ns1__GetRecipe_ * SOAP_FMAC2 soap_instantiate___ns1__GetRecipe_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRecipe_ * soap_new___ns1__GetRecipe_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRecipe_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRecipe_ * soap_new_req___ns1__GetRecipe_(
	struct soap *soap)
{
	struct __ns1__GetRecipe_ *_p = ::soap_new___ns1__GetRecipe_(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipe_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRecipe_ * soap_new_set___ns1__GetRecipe_(
	struct soap *soap,
	_ns1__GetRecipe *ns1__GetRecipe)
{
	struct __ns1__GetRecipe_ *_p = ::soap_new___ns1__GetRecipe_(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipe_(soap, _p);
		_p->ns1__GetRecipe = ns1__GetRecipe;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRecipe_(struct soap*, const struct __ns1__GetRecipe_ *, const char*, const char*);

inline int soap_write___ns1__GetRecipe_(struct soap *soap, struct __ns1__GetRecipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetRecipe_(soap, p), 0) || ::soap_put___ns1__GetRecipe_(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRecipe_(struct soap *soap, const char *URL, struct __ns1__GetRecipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipe_(soap, p), 0) || ::soap_put___ns1__GetRecipe_(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetRecipe_(struct soap *soap, const char *URL, struct __ns1__GetRecipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipe_(soap, p), 0) || ::soap_put___ns1__GetRecipe_(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRecipe_(struct soap *soap, const char *URL, struct __ns1__GetRecipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipe_(soap, p), 0) || ::soap_put___ns1__GetRecipe_(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRecipe_ * SOAP_FMAC4 soap_get___ns1__GetRecipe_(struct soap*, struct __ns1__GetRecipe_ *, const char*, const char*);

inline int soap_read___ns1__GetRecipe_(struct soap *soap, struct __ns1__GetRecipe_ *p)
{
	if (p)
	{	::soap_default___ns1__GetRecipe_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetRecipe_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRecipe_(struct soap *soap, const char *URL, struct __ns1__GetRecipe_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetRecipe_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetRecipe_(struct soap *soap, struct __ns1__GetRecipe_ *p)
{
	if (::soap_read___ns1__GetRecipe_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GetRecipe_DEFINED
#define SOAP_TYPE___ns1__GetRecipe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRecipe(struct soap*, struct __ns1__GetRecipe *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRecipe(struct soap*, const struct __ns1__GetRecipe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRecipe(struct soap*, const char*, int, const struct __ns1__GetRecipe *, const char*);
SOAP_FMAC3 struct __ns1__GetRecipe * SOAP_FMAC4 soap_in___ns1__GetRecipe(struct soap*, const char*, struct __ns1__GetRecipe *, const char*);
SOAP_FMAC1 struct __ns1__GetRecipe * SOAP_FMAC2 soap_instantiate___ns1__GetRecipe(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRecipe * soap_new___ns1__GetRecipe(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRecipe(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRecipe * soap_new_req___ns1__GetRecipe(
	struct soap *soap)
{
	struct __ns1__GetRecipe *_p = ::soap_new___ns1__GetRecipe(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipe(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRecipe * soap_new_set___ns1__GetRecipe(
	struct soap *soap,
	_ns1__GetRecipe *ns1__GetRecipe)
{
	struct __ns1__GetRecipe *_p = ::soap_new___ns1__GetRecipe(soap);
	if (_p)
	{	::soap_default___ns1__GetRecipe(soap, _p);
		_p->ns1__GetRecipe = ns1__GetRecipe;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRecipe(struct soap*, const struct __ns1__GetRecipe *, const char*, const char*);

inline int soap_write___ns1__GetRecipe(struct soap *soap, struct __ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetRecipe(soap, p), 0) || ::soap_put___ns1__GetRecipe(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRecipe(struct soap *soap, const char *URL, struct __ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipe(soap, p), 0) || ::soap_put___ns1__GetRecipe(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetRecipe(struct soap *soap, const char *URL, struct __ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipe(soap, p), 0) || ::soap_put___ns1__GetRecipe(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRecipe(struct soap *soap, const char *URL, struct __ns1__GetRecipe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetRecipe(soap, p), 0) || ::soap_put___ns1__GetRecipe(soap, p, "-ns1:GetRecipe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRecipe * SOAP_FMAC4 soap_get___ns1__GetRecipe(struct soap*, struct __ns1__GetRecipe *, const char*, const char*);

inline int soap_read___ns1__GetRecipe(struct soap *soap, struct __ns1__GetRecipe *p)
{
	if (p)
	{	::soap_default___ns1__GetRecipe(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetRecipe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRecipe(struct soap *soap, const char *URL, struct __ns1__GetRecipe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetRecipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetRecipe(struct soap *soap, struct __ns1__GetRecipe *p)
{
	if (::soap_read___ns1__GetRecipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Recipe__DEFINED
#define SOAP_TYPE___ns1__Recipe__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Recipe_(struct soap*, struct __ns1__Recipe_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Recipe_(struct soap*, const struct __ns1__Recipe_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Recipe_(struct soap*, const char*, int, const struct __ns1__Recipe_ *, const char*);
SOAP_FMAC3 struct __ns1__Recipe_ * SOAP_FMAC4 soap_in___ns1__Recipe_(struct soap*, const char*, struct __ns1__Recipe_ *, const char*);
SOAP_FMAC1 struct __ns1__Recipe_ * SOAP_FMAC2 soap_instantiate___ns1__Recipe_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Recipe_ * soap_new___ns1__Recipe_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Recipe_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Recipe_ * soap_new_req___ns1__Recipe_(
	struct soap *soap)
{
	struct __ns1__Recipe_ *_p = ::soap_new___ns1__Recipe_(soap);
	if (_p)
	{	::soap_default___ns1__Recipe_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Recipe_ * soap_new_set___ns1__Recipe_(
	struct soap *soap,
	_ns1__Recipe *ns1__Recipe_)
{
	struct __ns1__Recipe_ *_p = ::soap_new___ns1__Recipe_(soap);
	if (_p)
	{	::soap_default___ns1__Recipe_(soap, _p);
		_p->ns1__Recipe_ = ns1__Recipe_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Recipe_(struct soap*, const struct __ns1__Recipe_ *, const char*, const char*);

inline int soap_write___ns1__Recipe_(struct soap *soap, struct __ns1__Recipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Recipe_(soap, p), 0) || ::soap_put___ns1__Recipe_(soap, p, "-ns1:Recipe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Recipe_(struct soap *soap, const char *URL, struct __ns1__Recipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Recipe_(soap, p), 0) || ::soap_put___ns1__Recipe_(soap, p, "-ns1:Recipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Recipe_(struct soap *soap, const char *URL, struct __ns1__Recipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Recipe_(soap, p), 0) || ::soap_put___ns1__Recipe_(soap, p, "-ns1:Recipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Recipe_(struct soap *soap, const char *URL, struct __ns1__Recipe_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Recipe_(soap, p), 0) || ::soap_put___ns1__Recipe_(soap, p, "-ns1:Recipe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Recipe_ * SOAP_FMAC4 soap_get___ns1__Recipe_(struct soap*, struct __ns1__Recipe_ *, const char*, const char*);

inline int soap_read___ns1__Recipe_(struct soap *soap, struct __ns1__Recipe_ *p)
{
	if (p)
	{	::soap_default___ns1__Recipe_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Recipe_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Recipe_(struct soap *soap, const char *URL, struct __ns1__Recipe_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Recipe_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Recipe_(struct soap *soap, struct __ns1__Recipe_ *p)
{
	if (::soap_read___ns1__Recipe_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Recipe_DEFINED
#define SOAP_TYPE___ns1__Recipe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Recipe(struct soap*, struct __ns1__Recipe *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Recipe(struct soap*, const struct __ns1__Recipe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Recipe(struct soap*, const char*, int, const struct __ns1__Recipe *, const char*);
SOAP_FMAC3 struct __ns1__Recipe * SOAP_FMAC4 soap_in___ns1__Recipe(struct soap*, const char*, struct __ns1__Recipe *, const char*);
SOAP_FMAC1 struct __ns1__Recipe * SOAP_FMAC2 soap_instantiate___ns1__Recipe(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Recipe * soap_new___ns1__Recipe(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Recipe(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Recipe * soap_new_req___ns1__Recipe(
	struct soap *soap)
{
	struct __ns1__Recipe *_p = ::soap_new___ns1__Recipe(soap);
	if (_p)
	{	::soap_default___ns1__Recipe(soap, _p);
	}
	return _p;
}

inline struct __ns1__Recipe * soap_new_set___ns1__Recipe(
	struct soap *soap,
	_ns1__Recipe *ns1__Recipe_)
{
	struct __ns1__Recipe *_p = ::soap_new___ns1__Recipe(soap);
	if (_p)
	{	::soap_default___ns1__Recipe(soap, _p);
		_p->ns1__Recipe_ = ns1__Recipe_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Recipe(struct soap*, const struct __ns1__Recipe *, const char*, const char*);

inline int soap_write___ns1__Recipe(struct soap *soap, struct __ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Recipe(soap, p), 0) || ::soap_put___ns1__Recipe(soap, p, "-ns1:Recipe", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Recipe(struct soap *soap, const char *URL, struct __ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Recipe(soap, p), 0) || ::soap_put___ns1__Recipe(soap, p, "-ns1:Recipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Recipe(struct soap *soap, const char *URL, struct __ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Recipe(soap, p), 0) || ::soap_put___ns1__Recipe(soap, p, "-ns1:Recipe", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Recipe(struct soap *soap, const char *URL, struct __ns1__Recipe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Recipe(soap, p), 0) || ::soap_put___ns1__Recipe(soap, p, "-ns1:Recipe", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Recipe * SOAP_FMAC4 soap_get___ns1__Recipe(struct soap*, struct __ns1__Recipe *, const char*, const char*);

inline int soap_read___ns1__Recipe(struct soap *soap, struct __ns1__Recipe *p)
{
	if (p)
	{	::soap_default___ns1__Recipe(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Recipe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Recipe(struct soap *soap, const char *URL, struct __ns1__Recipe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Recipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Recipe(struct soap *soap, struct __ns1__Recipe *p)
{
	if (::soap_read___ns1__Recipe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OutboundMore__DEFINED
#define SOAP_TYPE___ns1__OutboundMore__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutboundMore_(struct soap*, struct __ns1__OutboundMore_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutboundMore_(struct soap*, const struct __ns1__OutboundMore_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutboundMore_(struct soap*, const char*, int, const struct __ns1__OutboundMore_ *, const char*);
SOAP_FMAC3 struct __ns1__OutboundMore_ * SOAP_FMAC4 soap_in___ns1__OutboundMore_(struct soap*, const char*, struct __ns1__OutboundMore_ *, const char*);
SOAP_FMAC1 struct __ns1__OutboundMore_ * SOAP_FMAC2 soap_instantiate___ns1__OutboundMore_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutboundMore_ * soap_new___ns1__OutboundMore_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutboundMore_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutboundMore_ * soap_new_req___ns1__OutboundMore_(
	struct soap *soap)
{
	struct __ns1__OutboundMore_ *_p = ::soap_new___ns1__OutboundMore_(soap);
	if (_p)
	{	::soap_default___ns1__OutboundMore_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutboundMore_ * soap_new_set___ns1__OutboundMore_(
	struct soap *soap,
	_ns1__OutboundMore *ns1__OutboundMore_)
{
	struct __ns1__OutboundMore_ *_p = ::soap_new___ns1__OutboundMore_(soap);
	if (_p)
	{	::soap_default___ns1__OutboundMore_(soap, _p);
		_p->ns1__OutboundMore_ = ns1__OutboundMore_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutboundMore_(struct soap*, const struct __ns1__OutboundMore_ *, const char*, const char*);

inline int soap_write___ns1__OutboundMore_(struct soap *soap, struct __ns1__OutboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OutboundMore_(soap, p), 0) || ::soap_put___ns1__OutboundMore_(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutboundMore_(struct soap *soap, const char *URL, struct __ns1__OutboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundMore_(soap, p), 0) || ::soap_put___ns1__OutboundMore_(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OutboundMore_(struct soap *soap, const char *URL, struct __ns1__OutboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundMore_(soap, p), 0) || ::soap_put___ns1__OutboundMore_(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutboundMore_(struct soap *soap, const char *URL, struct __ns1__OutboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundMore_(soap, p), 0) || ::soap_put___ns1__OutboundMore_(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutboundMore_ * SOAP_FMAC4 soap_get___ns1__OutboundMore_(struct soap*, struct __ns1__OutboundMore_ *, const char*, const char*);

inline int soap_read___ns1__OutboundMore_(struct soap *soap, struct __ns1__OutboundMore_ *p)
{
	if (p)
	{	::soap_default___ns1__OutboundMore_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OutboundMore_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutboundMore_(struct soap *soap, const char *URL, struct __ns1__OutboundMore_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OutboundMore_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OutboundMore_(struct soap *soap, struct __ns1__OutboundMore_ *p)
{
	if (::soap_read___ns1__OutboundMore_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OutboundMore_DEFINED
#define SOAP_TYPE___ns1__OutboundMore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutboundMore(struct soap*, struct __ns1__OutboundMore *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutboundMore(struct soap*, const struct __ns1__OutboundMore *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutboundMore(struct soap*, const char*, int, const struct __ns1__OutboundMore *, const char*);
SOAP_FMAC3 struct __ns1__OutboundMore * SOAP_FMAC4 soap_in___ns1__OutboundMore(struct soap*, const char*, struct __ns1__OutboundMore *, const char*);
SOAP_FMAC1 struct __ns1__OutboundMore * SOAP_FMAC2 soap_instantiate___ns1__OutboundMore(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutboundMore * soap_new___ns1__OutboundMore(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutboundMore(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutboundMore * soap_new_req___ns1__OutboundMore(
	struct soap *soap)
{
	struct __ns1__OutboundMore *_p = ::soap_new___ns1__OutboundMore(soap);
	if (_p)
	{	::soap_default___ns1__OutboundMore(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutboundMore * soap_new_set___ns1__OutboundMore(
	struct soap *soap,
	_ns1__OutboundMore *ns1__OutboundMore_)
{
	struct __ns1__OutboundMore *_p = ::soap_new___ns1__OutboundMore(soap);
	if (_p)
	{	::soap_default___ns1__OutboundMore(soap, _p);
		_p->ns1__OutboundMore_ = ns1__OutboundMore_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutboundMore(struct soap*, const struct __ns1__OutboundMore *, const char*, const char*);

inline int soap_write___ns1__OutboundMore(struct soap *soap, struct __ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OutboundMore(soap, p), 0) || ::soap_put___ns1__OutboundMore(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutboundMore(struct soap *soap, const char *URL, struct __ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundMore(soap, p), 0) || ::soap_put___ns1__OutboundMore(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OutboundMore(struct soap *soap, const char *URL, struct __ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundMore(soap, p), 0) || ::soap_put___ns1__OutboundMore(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutboundMore(struct soap *soap, const char *URL, struct __ns1__OutboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundMore(soap, p), 0) || ::soap_put___ns1__OutboundMore(soap, p, "-ns1:OutboundMore", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutboundMore * SOAP_FMAC4 soap_get___ns1__OutboundMore(struct soap*, struct __ns1__OutboundMore *, const char*, const char*);

inline int soap_read___ns1__OutboundMore(struct soap *soap, struct __ns1__OutboundMore *p)
{
	if (p)
	{	::soap_default___ns1__OutboundMore(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OutboundMore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutboundMore(struct soap *soap, const char *URL, struct __ns1__OutboundMore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OutboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OutboundMore(struct soap *soap, struct __ns1__OutboundMore *p)
{
	if (::soap_read___ns1__OutboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OutboundInSFCOutputQty__DEFINED
#define SOAP_TYPE___ns1__OutboundInSFCOutputQty__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutboundInSFCOutputQty_(struct soap*, struct __ns1__OutboundInSFCOutputQty_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutboundInSFCOutputQty_(struct soap*, const struct __ns1__OutboundInSFCOutputQty_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutboundInSFCOutputQty_(struct soap*, const char*, int, const struct __ns1__OutboundInSFCOutputQty_ *, const char*);
SOAP_FMAC3 struct __ns1__OutboundInSFCOutputQty_ * SOAP_FMAC4 soap_in___ns1__OutboundInSFCOutputQty_(struct soap*, const char*, struct __ns1__OutboundInSFCOutputQty_ *, const char*);
SOAP_FMAC1 struct __ns1__OutboundInSFCOutputQty_ * SOAP_FMAC2 soap_instantiate___ns1__OutboundInSFCOutputQty_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutboundInSFCOutputQty_ * soap_new___ns1__OutboundInSFCOutputQty_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutboundInSFCOutputQty_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutboundInSFCOutputQty_ * soap_new_req___ns1__OutboundInSFCOutputQty_(
	struct soap *soap)
{
	struct __ns1__OutboundInSFCOutputQty_ *_p = ::soap_new___ns1__OutboundInSFCOutputQty_(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInSFCOutputQty_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutboundInSFCOutputQty_ * soap_new_set___ns1__OutboundInSFCOutputQty_(
	struct soap *soap,
	_ns1__OutboundInSFCOutputQty *ns1__OutboundInSFCOutputQty_)
{
	struct __ns1__OutboundInSFCOutputQty_ *_p = ::soap_new___ns1__OutboundInSFCOutputQty_(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInSFCOutputQty_(soap, _p);
		_p->ns1__OutboundInSFCOutputQty_ = ns1__OutboundInSFCOutputQty_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutboundInSFCOutputQty_(struct soap*, const struct __ns1__OutboundInSFCOutputQty_ *, const char*, const char*);

inline int soap_write___ns1__OutboundInSFCOutputQty_(struct soap *soap, struct __ns1__OutboundInSFCOutputQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OutboundInSFCOutputQty_(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty_(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutboundInSFCOutputQty_(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInSFCOutputQty_(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty_(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OutboundInSFCOutputQty_(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInSFCOutputQty_(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty_(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutboundInSFCOutputQty_(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInSFCOutputQty_(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty_(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutboundInSFCOutputQty_ * SOAP_FMAC4 soap_get___ns1__OutboundInSFCOutputQty_(struct soap*, struct __ns1__OutboundInSFCOutputQty_ *, const char*, const char*);

inline int soap_read___ns1__OutboundInSFCOutputQty_(struct soap *soap, struct __ns1__OutboundInSFCOutputQty_ *p)
{
	if (p)
	{	::soap_default___ns1__OutboundInSFCOutputQty_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OutboundInSFCOutputQty_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutboundInSFCOutputQty_(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OutboundInSFCOutputQty_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OutboundInSFCOutputQty_(struct soap *soap, struct __ns1__OutboundInSFCOutputQty_ *p)
{
	if (::soap_read___ns1__OutboundInSFCOutputQty_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OutboundInSFCOutputQty_DEFINED
#define SOAP_TYPE___ns1__OutboundInSFCOutputQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutboundInSFCOutputQty(struct soap*, struct __ns1__OutboundInSFCOutputQty *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutboundInSFCOutputQty(struct soap*, const struct __ns1__OutboundInSFCOutputQty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutboundInSFCOutputQty(struct soap*, const char*, int, const struct __ns1__OutboundInSFCOutputQty *, const char*);
SOAP_FMAC3 struct __ns1__OutboundInSFCOutputQty * SOAP_FMAC4 soap_in___ns1__OutboundInSFCOutputQty(struct soap*, const char*, struct __ns1__OutboundInSFCOutputQty *, const char*);
SOAP_FMAC1 struct __ns1__OutboundInSFCOutputQty * SOAP_FMAC2 soap_instantiate___ns1__OutboundInSFCOutputQty(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutboundInSFCOutputQty * soap_new___ns1__OutboundInSFCOutputQty(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutboundInSFCOutputQty(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutboundInSFCOutputQty * soap_new_req___ns1__OutboundInSFCOutputQty(
	struct soap *soap)
{
	struct __ns1__OutboundInSFCOutputQty *_p = ::soap_new___ns1__OutboundInSFCOutputQty(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInSFCOutputQty(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutboundInSFCOutputQty * soap_new_set___ns1__OutboundInSFCOutputQty(
	struct soap *soap,
	_ns1__OutboundInSFCOutputQty *ns1__OutboundInSFCOutputQty_)
{
	struct __ns1__OutboundInSFCOutputQty *_p = ::soap_new___ns1__OutboundInSFCOutputQty(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInSFCOutputQty(soap, _p);
		_p->ns1__OutboundInSFCOutputQty_ = ns1__OutboundInSFCOutputQty_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutboundInSFCOutputQty(struct soap*, const struct __ns1__OutboundInSFCOutputQty *, const char*, const char*);

inline int soap_write___ns1__OutboundInSFCOutputQty(struct soap *soap, struct __ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OutboundInSFCOutputQty(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInSFCOutputQty(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInSFCOutputQty(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInSFCOutputQty(soap, p), 0) || ::soap_put___ns1__OutboundInSFCOutputQty(soap, p, "-ns1:OutboundInSFCOutputQty", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutboundInSFCOutputQty * SOAP_FMAC4 soap_get___ns1__OutboundInSFCOutputQty(struct soap*, struct __ns1__OutboundInSFCOutputQty *, const char*, const char*);

inline int soap_read___ns1__OutboundInSFCOutputQty(struct soap *soap, struct __ns1__OutboundInSFCOutputQty *p)
{
	if (p)
	{	::soap_default___ns1__OutboundInSFCOutputQty(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OutboundInSFCOutputQty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutboundInSFCOutputQty(struct soap *soap, const char *URL, struct __ns1__OutboundInSFCOutputQty *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OutboundInSFCOutputQty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OutboundInSFCOutputQty(struct soap *soap, struct __ns1__OutboundInSFCOutputQty *p)
{
	if (::soap_read___ns1__OutboundInSFCOutputQty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OutboundInLaminating__DEFINED
#define SOAP_TYPE___ns1__OutboundInLaminating__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutboundInLaminating_(struct soap*, struct __ns1__OutboundInLaminating_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutboundInLaminating_(struct soap*, const struct __ns1__OutboundInLaminating_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutboundInLaminating_(struct soap*, const char*, int, const struct __ns1__OutboundInLaminating_ *, const char*);
SOAP_FMAC3 struct __ns1__OutboundInLaminating_ * SOAP_FMAC4 soap_in___ns1__OutboundInLaminating_(struct soap*, const char*, struct __ns1__OutboundInLaminating_ *, const char*);
SOAP_FMAC1 struct __ns1__OutboundInLaminating_ * SOAP_FMAC2 soap_instantiate___ns1__OutboundInLaminating_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutboundInLaminating_ * soap_new___ns1__OutboundInLaminating_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutboundInLaminating_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutboundInLaminating_ * soap_new_req___ns1__OutboundInLaminating_(
	struct soap *soap)
{
	struct __ns1__OutboundInLaminating_ *_p = ::soap_new___ns1__OutboundInLaminating_(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInLaminating_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutboundInLaminating_ * soap_new_set___ns1__OutboundInLaminating_(
	struct soap *soap,
	_ns1__OutboundInLaminating *ns1__OutboundInLaminating_)
{
	struct __ns1__OutboundInLaminating_ *_p = ::soap_new___ns1__OutboundInLaminating_(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInLaminating_(soap, _p);
		_p->ns1__OutboundInLaminating_ = ns1__OutboundInLaminating_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutboundInLaminating_(struct soap*, const struct __ns1__OutboundInLaminating_ *, const char*, const char*);

inline int soap_write___ns1__OutboundInLaminating_(struct soap *soap, struct __ns1__OutboundInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OutboundInLaminating_(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating_(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutboundInLaminating_(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInLaminating_(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating_(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OutboundInLaminating_(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInLaminating_(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating_(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutboundInLaminating_(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInLaminating_(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating_(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutboundInLaminating_ * SOAP_FMAC4 soap_get___ns1__OutboundInLaminating_(struct soap*, struct __ns1__OutboundInLaminating_ *, const char*, const char*);

inline int soap_read___ns1__OutboundInLaminating_(struct soap *soap, struct __ns1__OutboundInLaminating_ *p)
{
	if (p)
	{	::soap_default___ns1__OutboundInLaminating_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OutboundInLaminating_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutboundInLaminating_(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OutboundInLaminating_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OutboundInLaminating_(struct soap *soap, struct __ns1__OutboundInLaminating_ *p)
{
	if (::soap_read___ns1__OutboundInLaminating_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OutboundInLaminating_DEFINED
#define SOAP_TYPE___ns1__OutboundInLaminating_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OutboundInLaminating(struct soap*, struct __ns1__OutboundInLaminating *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OutboundInLaminating(struct soap*, const struct __ns1__OutboundInLaminating *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OutboundInLaminating(struct soap*, const char*, int, const struct __ns1__OutboundInLaminating *, const char*);
SOAP_FMAC3 struct __ns1__OutboundInLaminating * SOAP_FMAC4 soap_in___ns1__OutboundInLaminating(struct soap*, const char*, struct __ns1__OutboundInLaminating *, const char*);
SOAP_FMAC1 struct __ns1__OutboundInLaminating * SOAP_FMAC2 soap_instantiate___ns1__OutboundInLaminating(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OutboundInLaminating * soap_new___ns1__OutboundInLaminating(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OutboundInLaminating(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OutboundInLaminating * soap_new_req___ns1__OutboundInLaminating(
	struct soap *soap)
{
	struct __ns1__OutboundInLaminating *_p = ::soap_new___ns1__OutboundInLaminating(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInLaminating(soap, _p);
	}
	return _p;
}

inline struct __ns1__OutboundInLaminating * soap_new_set___ns1__OutboundInLaminating(
	struct soap *soap,
	_ns1__OutboundInLaminating *ns1__OutboundInLaminating_)
{
	struct __ns1__OutboundInLaminating *_p = ::soap_new___ns1__OutboundInLaminating(soap);
	if (_p)
	{	::soap_default___ns1__OutboundInLaminating(soap, _p);
		_p->ns1__OutboundInLaminating_ = ns1__OutboundInLaminating_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OutboundInLaminating(struct soap*, const struct __ns1__OutboundInLaminating *, const char*, const char*);

inline int soap_write___ns1__OutboundInLaminating(struct soap *soap, struct __ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OutboundInLaminating(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OutboundInLaminating(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInLaminating(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OutboundInLaminating(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInLaminating(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OutboundInLaminating(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OutboundInLaminating(soap, p), 0) || ::soap_put___ns1__OutboundInLaminating(soap, p, "-ns1:OutboundInLaminating", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OutboundInLaminating * SOAP_FMAC4 soap_get___ns1__OutboundInLaminating(struct soap*, struct __ns1__OutboundInLaminating *, const char*, const char*);

inline int soap_read___ns1__OutboundInLaminating(struct soap *soap, struct __ns1__OutboundInLaminating *p)
{
	if (p)
	{	::soap_default___ns1__OutboundInLaminating(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OutboundInLaminating(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OutboundInLaminating(struct soap *soap, const char *URL, struct __ns1__OutboundInLaminating *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OutboundInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OutboundInLaminating(struct soap *soap, struct __ns1__OutboundInLaminating *p)
{
	if (::soap_read___ns1__OutboundInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Outbound__DEFINED
#define SOAP_TYPE___ns1__Outbound__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Outbound_(struct soap*, struct __ns1__Outbound_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Outbound_(struct soap*, const struct __ns1__Outbound_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Outbound_(struct soap*, const char*, int, const struct __ns1__Outbound_ *, const char*);
SOAP_FMAC3 struct __ns1__Outbound_ * SOAP_FMAC4 soap_in___ns1__Outbound_(struct soap*, const char*, struct __ns1__Outbound_ *, const char*);
SOAP_FMAC1 struct __ns1__Outbound_ * SOAP_FMAC2 soap_instantiate___ns1__Outbound_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Outbound_ * soap_new___ns1__Outbound_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Outbound_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Outbound_ * soap_new_req___ns1__Outbound_(
	struct soap *soap)
{
	struct __ns1__Outbound_ *_p = ::soap_new___ns1__Outbound_(soap);
	if (_p)
	{	::soap_default___ns1__Outbound_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Outbound_ * soap_new_set___ns1__Outbound_(
	struct soap *soap,
	_ns1__Outbound *ns1__Outbound_)
{
	struct __ns1__Outbound_ *_p = ::soap_new___ns1__Outbound_(soap);
	if (_p)
	{	::soap_default___ns1__Outbound_(soap, _p);
		_p->ns1__Outbound_ = ns1__Outbound_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Outbound_(struct soap*, const struct __ns1__Outbound_ *, const char*, const char*);

inline int soap_write___ns1__Outbound_(struct soap *soap, struct __ns1__Outbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Outbound_(soap, p), 0) || ::soap_put___ns1__Outbound_(soap, p, "-ns1:Outbound", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Outbound_(struct soap *soap, const char *URL, struct __ns1__Outbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Outbound_(soap, p), 0) || ::soap_put___ns1__Outbound_(soap, p, "-ns1:Outbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Outbound_(struct soap *soap, const char *URL, struct __ns1__Outbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Outbound_(soap, p), 0) || ::soap_put___ns1__Outbound_(soap, p, "-ns1:Outbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Outbound_(struct soap *soap, const char *URL, struct __ns1__Outbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Outbound_(soap, p), 0) || ::soap_put___ns1__Outbound_(soap, p, "-ns1:Outbound", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Outbound_ * SOAP_FMAC4 soap_get___ns1__Outbound_(struct soap*, struct __ns1__Outbound_ *, const char*, const char*);

inline int soap_read___ns1__Outbound_(struct soap *soap, struct __ns1__Outbound_ *p)
{
	if (p)
	{	::soap_default___ns1__Outbound_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Outbound_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Outbound_(struct soap *soap, const char *URL, struct __ns1__Outbound_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Outbound_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Outbound_(struct soap *soap, struct __ns1__Outbound_ *p)
{
	if (::soap_read___ns1__Outbound_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Outbound_DEFINED
#define SOAP_TYPE___ns1__Outbound_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Outbound(struct soap*, struct __ns1__Outbound *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Outbound(struct soap*, const struct __ns1__Outbound *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Outbound(struct soap*, const char*, int, const struct __ns1__Outbound *, const char*);
SOAP_FMAC3 struct __ns1__Outbound * SOAP_FMAC4 soap_in___ns1__Outbound(struct soap*, const char*, struct __ns1__Outbound *, const char*);
SOAP_FMAC1 struct __ns1__Outbound * SOAP_FMAC2 soap_instantiate___ns1__Outbound(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Outbound * soap_new___ns1__Outbound(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Outbound(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Outbound * soap_new_req___ns1__Outbound(
	struct soap *soap)
{
	struct __ns1__Outbound *_p = ::soap_new___ns1__Outbound(soap);
	if (_p)
	{	::soap_default___ns1__Outbound(soap, _p);
	}
	return _p;
}

inline struct __ns1__Outbound * soap_new_set___ns1__Outbound(
	struct soap *soap,
	_ns1__Outbound *ns1__Outbound_)
{
	struct __ns1__Outbound *_p = ::soap_new___ns1__Outbound(soap);
	if (_p)
	{	::soap_default___ns1__Outbound(soap, _p);
		_p->ns1__Outbound_ = ns1__Outbound_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Outbound(struct soap*, const struct __ns1__Outbound *, const char*, const char*);

inline int soap_write___ns1__Outbound(struct soap *soap, struct __ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Outbound(soap, p), 0) || ::soap_put___ns1__Outbound(soap, p, "-ns1:Outbound", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Outbound(struct soap *soap, const char *URL, struct __ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Outbound(soap, p), 0) || ::soap_put___ns1__Outbound(soap, p, "-ns1:Outbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Outbound(struct soap *soap, const char *URL, struct __ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Outbound(soap, p), 0) || ::soap_put___ns1__Outbound(soap, p, "-ns1:Outbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Outbound(struct soap *soap, const char *URL, struct __ns1__Outbound const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Outbound(soap, p), 0) || ::soap_put___ns1__Outbound(soap, p, "-ns1:Outbound", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Outbound * SOAP_FMAC4 soap_get___ns1__Outbound(struct soap*, struct __ns1__Outbound *, const char*, const char*);

inline int soap_read___ns1__Outbound(struct soap *soap, struct __ns1__Outbound *p)
{
	if (p)
	{	::soap_default___ns1__Outbound(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Outbound(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Outbound(struct soap *soap, const char *URL, struct __ns1__Outbound *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Outbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Outbound(struct soap *soap, struct __ns1__Outbound *p)
{
	if (::soap_read___ns1__Outbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OperatorLogin__DEFINED
#define SOAP_TYPE___ns1__OperatorLogin__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OperatorLogin_(struct soap*, struct __ns1__OperatorLogin_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OperatorLogin_(struct soap*, const struct __ns1__OperatorLogin_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OperatorLogin_(struct soap*, const char*, int, const struct __ns1__OperatorLogin_ *, const char*);
SOAP_FMAC3 struct __ns1__OperatorLogin_ * SOAP_FMAC4 soap_in___ns1__OperatorLogin_(struct soap*, const char*, struct __ns1__OperatorLogin_ *, const char*);
SOAP_FMAC1 struct __ns1__OperatorLogin_ * SOAP_FMAC2 soap_instantiate___ns1__OperatorLogin_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OperatorLogin_ * soap_new___ns1__OperatorLogin_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OperatorLogin_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OperatorLogin_ * soap_new_req___ns1__OperatorLogin_(
	struct soap *soap)
{
	struct __ns1__OperatorLogin_ *_p = ::soap_new___ns1__OperatorLogin_(soap);
	if (_p)
	{	::soap_default___ns1__OperatorLogin_(soap, _p);
	}
	return _p;
}

inline struct __ns1__OperatorLogin_ * soap_new_set___ns1__OperatorLogin_(
	struct soap *soap,
	_ns1__OperatorLogin *ns1__OperatorLogin_)
{
	struct __ns1__OperatorLogin_ *_p = ::soap_new___ns1__OperatorLogin_(soap);
	if (_p)
	{	::soap_default___ns1__OperatorLogin_(soap, _p);
		_p->ns1__OperatorLogin_ = ns1__OperatorLogin_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OperatorLogin_(struct soap*, const struct __ns1__OperatorLogin_ *, const char*, const char*);

inline int soap_write___ns1__OperatorLogin_(struct soap *soap, struct __ns1__OperatorLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OperatorLogin_(soap, p), 0) || ::soap_put___ns1__OperatorLogin_(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OperatorLogin_(struct soap *soap, const char *URL, struct __ns1__OperatorLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OperatorLogin_(soap, p), 0) || ::soap_put___ns1__OperatorLogin_(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OperatorLogin_(struct soap *soap, const char *URL, struct __ns1__OperatorLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OperatorLogin_(soap, p), 0) || ::soap_put___ns1__OperatorLogin_(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OperatorLogin_(struct soap *soap, const char *URL, struct __ns1__OperatorLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OperatorLogin_(soap, p), 0) || ::soap_put___ns1__OperatorLogin_(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OperatorLogin_ * SOAP_FMAC4 soap_get___ns1__OperatorLogin_(struct soap*, struct __ns1__OperatorLogin_ *, const char*, const char*);

inline int soap_read___ns1__OperatorLogin_(struct soap *soap, struct __ns1__OperatorLogin_ *p)
{
	if (p)
	{	::soap_default___ns1__OperatorLogin_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OperatorLogin_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OperatorLogin_(struct soap *soap, const char *URL, struct __ns1__OperatorLogin_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OperatorLogin_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OperatorLogin_(struct soap *soap, struct __ns1__OperatorLogin_ *p)
{
	if (::soap_read___ns1__OperatorLogin_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__OperatorLogin_DEFINED
#define SOAP_TYPE___ns1__OperatorLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OperatorLogin(struct soap*, struct __ns1__OperatorLogin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OperatorLogin(struct soap*, const struct __ns1__OperatorLogin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OperatorLogin(struct soap*, const char*, int, const struct __ns1__OperatorLogin *, const char*);
SOAP_FMAC3 struct __ns1__OperatorLogin * SOAP_FMAC4 soap_in___ns1__OperatorLogin(struct soap*, const char*, struct __ns1__OperatorLogin *, const char*);
SOAP_FMAC1 struct __ns1__OperatorLogin * SOAP_FMAC2 soap_instantiate___ns1__OperatorLogin(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OperatorLogin * soap_new___ns1__OperatorLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__OperatorLogin(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OperatorLogin * soap_new_req___ns1__OperatorLogin(
	struct soap *soap)
{
	struct __ns1__OperatorLogin *_p = ::soap_new___ns1__OperatorLogin(soap);
	if (_p)
	{	::soap_default___ns1__OperatorLogin(soap, _p);
	}
	return _p;
}

inline struct __ns1__OperatorLogin * soap_new_set___ns1__OperatorLogin(
	struct soap *soap,
	_ns1__OperatorLogin *ns1__OperatorLogin_)
{
	struct __ns1__OperatorLogin *_p = ::soap_new___ns1__OperatorLogin(soap);
	if (_p)
	{	::soap_default___ns1__OperatorLogin(soap, _p);
		_p->ns1__OperatorLogin_ = ns1__OperatorLogin_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OperatorLogin(struct soap*, const struct __ns1__OperatorLogin *, const char*, const char*);

inline int soap_write___ns1__OperatorLogin(struct soap *soap, struct __ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__OperatorLogin(soap, p), 0) || ::soap_put___ns1__OperatorLogin(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OperatorLogin(struct soap *soap, const char *URL, struct __ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OperatorLogin(soap, p), 0) || ::soap_put___ns1__OperatorLogin(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__OperatorLogin(struct soap *soap, const char *URL, struct __ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OperatorLogin(soap, p), 0) || ::soap_put___ns1__OperatorLogin(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OperatorLogin(struct soap *soap, const char *URL, struct __ns1__OperatorLogin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__OperatorLogin(soap, p), 0) || ::soap_put___ns1__OperatorLogin(soap, p, "-ns1:OperatorLogin", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OperatorLogin * SOAP_FMAC4 soap_get___ns1__OperatorLogin(struct soap*, struct __ns1__OperatorLogin *, const char*, const char*);

inline int soap_read___ns1__OperatorLogin(struct soap *soap, struct __ns1__OperatorLogin *p)
{
	if (p)
	{	::soap_default___ns1__OperatorLogin(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__OperatorLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OperatorLogin(struct soap *soap, const char *URL, struct __ns1__OperatorLogin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__OperatorLogin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__OperatorLogin(struct soap *soap, struct __ns1__OperatorLogin *p)
{
	if (::soap_read___ns1__OperatorLogin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundMore__DEFINED
#define SOAP_TYPE___ns1__InboundMore__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundMore_(struct soap*, struct __ns1__InboundMore_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundMore_(struct soap*, const struct __ns1__InboundMore_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundMore_(struct soap*, const char*, int, const struct __ns1__InboundMore_ *, const char*);
SOAP_FMAC3 struct __ns1__InboundMore_ * SOAP_FMAC4 soap_in___ns1__InboundMore_(struct soap*, const char*, struct __ns1__InboundMore_ *, const char*);
SOAP_FMAC1 struct __ns1__InboundMore_ * SOAP_FMAC2 soap_instantiate___ns1__InboundMore_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundMore_ * soap_new___ns1__InboundMore_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundMore_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundMore_ * soap_new_req___ns1__InboundMore_(
	struct soap *soap)
{
	struct __ns1__InboundMore_ *_p = ::soap_new___ns1__InboundMore_(soap);
	if (_p)
	{	::soap_default___ns1__InboundMore_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundMore_ * soap_new_set___ns1__InboundMore_(
	struct soap *soap,
	_ns1__InboundMore *ns1__InboundMore_)
{
	struct __ns1__InboundMore_ *_p = ::soap_new___ns1__InboundMore_(soap);
	if (_p)
	{	::soap_default___ns1__InboundMore_(soap, _p);
		_p->ns1__InboundMore_ = ns1__InboundMore_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundMore_(struct soap*, const struct __ns1__InboundMore_ *, const char*, const char*);

inline int soap_write___ns1__InboundMore_(struct soap *soap, struct __ns1__InboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundMore_(soap, p), 0) || ::soap_put___ns1__InboundMore_(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundMore_(struct soap *soap, const char *URL, struct __ns1__InboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundMore_(soap, p), 0) || ::soap_put___ns1__InboundMore_(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundMore_(struct soap *soap, const char *URL, struct __ns1__InboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundMore_(soap, p), 0) || ::soap_put___ns1__InboundMore_(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundMore_(struct soap *soap, const char *URL, struct __ns1__InboundMore_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundMore_(soap, p), 0) || ::soap_put___ns1__InboundMore_(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundMore_ * SOAP_FMAC4 soap_get___ns1__InboundMore_(struct soap*, struct __ns1__InboundMore_ *, const char*, const char*);

inline int soap_read___ns1__InboundMore_(struct soap *soap, struct __ns1__InboundMore_ *p)
{
	if (p)
	{	::soap_default___ns1__InboundMore_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundMore_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundMore_(struct soap *soap, const char *URL, struct __ns1__InboundMore_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundMore_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundMore_(struct soap *soap, struct __ns1__InboundMore_ *p)
{
	if (::soap_read___ns1__InboundMore_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundMore_DEFINED
#define SOAP_TYPE___ns1__InboundMore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundMore(struct soap*, struct __ns1__InboundMore *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundMore(struct soap*, const struct __ns1__InboundMore *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundMore(struct soap*, const char*, int, const struct __ns1__InboundMore *, const char*);
SOAP_FMAC3 struct __ns1__InboundMore * SOAP_FMAC4 soap_in___ns1__InboundMore(struct soap*, const char*, struct __ns1__InboundMore *, const char*);
SOAP_FMAC1 struct __ns1__InboundMore * SOAP_FMAC2 soap_instantiate___ns1__InboundMore(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundMore * soap_new___ns1__InboundMore(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundMore(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundMore * soap_new_req___ns1__InboundMore(
	struct soap *soap)
{
	struct __ns1__InboundMore *_p = ::soap_new___ns1__InboundMore(soap);
	if (_p)
	{	::soap_default___ns1__InboundMore(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundMore * soap_new_set___ns1__InboundMore(
	struct soap *soap,
	_ns1__InboundMore *ns1__InboundMore_)
{
	struct __ns1__InboundMore *_p = ::soap_new___ns1__InboundMore(soap);
	if (_p)
	{	::soap_default___ns1__InboundMore(soap, _p);
		_p->ns1__InboundMore_ = ns1__InboundMore_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundMore(struct soap*, const struct __ns1__InboundMore *, const char*, const char*);

inline int soap_write___ns1__InboundMore(struct soap *soap, struct __ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundMore(soap, p), 0) || ::soap_put___ns1__InboundMore(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundMore(struct soap *soap, const char *URL, struct __ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundMore(soap, p), 0) || ::soap_put___ns1__InboundMore(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundMore(struct soap *soap, const char *URL, struct __ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundMore(soap, p), 0) || ::soap_put___ns1__InboundMore(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundMore(struct soap *soap, const char *URL, struct __ns1__InboundMore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundMore(soap, p), 0) || ::soap_put___ns1__InboundMore(soap, p, "-ns1:InboundMore", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundMore * SOAP_FMAC4 soap_get___ns1__InboundMore(struct soap*, struct __ns1__InboundMore *, const char*, const char*);

inline int soap_read___ns1__InboundMore(struct soap *soap, struct __ns1__InboundMore *p)
{
	if (p)
	{	::soap_default___ns1__InboundMore(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundMore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundMore(struct soap *soap, const char *URL, struct __ns1__InboundMore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundMore(struct soap *soap, struct __ns1__InboundMore *p)
{
	if (::soap_read___ns1__InboundMore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundInTwoInjection__DEFINED
#define SOAP_TYPE___ns1__InboundInTwoInjection__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundInTwoInjection_(struct soap*, struct __ns1__InboundInTwoInjection_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundInTwoInjection_(struct soap*, const struct __ns1__InboundInTwoInjection_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundInTwoInjection_(struct soap*, const char*, int, const struct __ns1__InboundInTwoInjection_ *, const char*);
SOAP_FMAC3 struct __ns1__InboundInTwoInjection_ * SOAP_FMAC4 soap_in___ns1__InboundInTwoInjection_(struct soap*, const char*, struct __ns1__InboundInTwoInjection_ *, const char*);
SOAP_FMAC1 struct __ns1__InboundInTwoInjection_ * SOAP_FMAC2 soap_instantiate___ns1__InboundInTwoInjection_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundInTwoInjection_ * soap_new___ns1__InboundInTwoInjection_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundInTwoInjection_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundInTwoInjection_ * soap_new_req___ns1__InboundInTwoInjection_(
	struct soap *soap)
{
	struct __ns1__InboundInTwoInjection_ *_p = ::soap_new___ns1__InboundInTwoInjection_(soap);
	if (_p)
	{	::soap_default___ns1__InboundInTwoInjection_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundInTwoInjection_ * soap_new_set___ns1__InboundInTwoInjection_(
	struct soap *soap,
	_ns1__InboundInTwoInjection *ns1__InboundInTwoInjection_)
{
	struct __ns1__InboundInTwoInjection_ *_p = ::soap_new___ns1__InboundInTwoInjection_(soap);
	if (_p)
	{	::soap_default___ns1__InboundInTwoInjection_(soap, _p);
		_p->ns1__InboundInTwoInjection_ = ns1__InboundInTwoInjection_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundInTwoInjection_(struct soap*, const struct __ns1__InboundInTwoInjection_ *, const char*, const char*);

inline int soap_write___ns1__InboundInTwoInjection_(struct soap *soap, struct __ns1__InboundInTwoInjection_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundInTwoInjection_(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection_(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundInTwoInjection_(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInTwoInjection_(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection_(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundInTwoInjection_(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInTwoInjection_(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection_(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundInTwoInjection_(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInTwoInjection_(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection_(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundInTwoInjection_ * SOAP_FMAC4 soap_get___ns1__InboundInTwoInjection_(struct soap*, struct __ns1__InboundInTwoInjection_ *, const char*, const char*);

inline int soap_read___ns1__InboundInTwoInjection_(struct soap *soap, struct __ns1__InboundInTwoInjection_ *p)
{
	if (p)
	{	::soap_default___ns1__InboundInTwoInjection_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundInTwoInjection_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundInTwoInjection_(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundInTwoInjection_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundInTwoInjection_(struct soap *soap, struct __ns1__InboundInTwoInjection_ *p)
{
	if (::soap_read___ns1__InboundInTwoInjection_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundInTwoInjection_DEFINED
#define SOAP_TYPE___ns1__InboundInTwoInjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundInTwoInjection(struct soap*, struct __ns1__InboundInTwoInjection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundInTwoInjection(struct soap*, const struct __ns1__InboundInTwoInjection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundInTwoInjection(struct soap*, const char*, int, const struct __ns1__InboundInTwoInjection *, const char*);
SOAP_FMAC3 struct __ns1__InboundInTwoInjection * SOAP_FMAC4 soap_in___ns1__InboundInTwoInjection(struct soap*, const char*, struct __ns1__InboundInTwoInjection *, const char*);
SOAP_FMAC1 struct __ns1__InboundInTwoInjection * SOAP_FMAC2 soap_instantiate___ns1__InboundInTwoInjection(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundInTwoInjection * soap_new___ns1__InboundInTwoInjection(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundInTwoInjection(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundInTwoInjection * soap_new_req___ns1__InboundInTwoInjection(
	struct soap *soap)
{
	struct __ns1__InboundInTwoInjection *_p = ::soap_new___ns1__InboundInTwoInjection(soap);
	if (_p)
	{	::soap_default___ns1__InboundInTwoInjection(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundInTwoInjection * soap_new_set___ns1__InboundInTwoInjection(
	struct soap *soap,
	_ns1__InboundInTwoInjection *ns1__InboundInTwoInjection_)
{
	struct __ns1__InboundInTwoInjection *_p = ::soap_new___ns1__InboundInTwoInjection(soap);
	if (_p)
	{	::soap_default___ns1__InboundInTwoInjection(soap, _p);
		_p->ns1__InboundInTwoInjection_ = ns1__InboundInTwoInjection_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundInTwoInjection(struct soap*, const struct __ns1__InboundInTwoInjection *, const char*, const char*);

inline int soap_write___ns1__InboundInTwoInjection(struct soap *soap, struct __ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundInTwoInjection(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundInTwoInjection(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInTwoInjection(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundInTwoInjection(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInTwoInjection(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundInTwoInjection(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInTwoInjection(soap, p), 0) || ::soap_put___ns1__InboundInTwoInjection(soap, p, "-ns1:InboundInTwoInjection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundInTwoInjection * SOAP_FMAC4 soap_get___ns1__InboundInTwoInjection(struct soap*, struct __ns1__InboundInTwoInjection *, const char*, const char*);

inline int soap_read___ns1__InboundInTwoInjection(struct soap *soap, struct __ns1__InboundInTwoInjection *p)
{
	if (p)
	{	::soap_default___ns1__InboundInTwoInjection(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundInTwoInjection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundInTwoInjection(struct soap *soap, const char *URL, struct __ns1__InboundInTwoInjection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundInTwoInjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundInTwoInjection(struct soap *soap, struct __ns1__InboundInTwoInjection *p)
{
	if (::soap_read___ns1__InboundInTwoInjection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundInSFCContainer__DEFINED
#define SOAP_TYPE___ns1__InboundInSFCContainer__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundInSFCContainer_(struct soap*, struct __ns1__InboundInSFCContainer_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundInSFCContainer_(struct soap*, const struct __ns1__InboundInSFCContainer_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundInSFCContainer_(struct soap*, const char*, int, const struct __ns1__InboundInSFCContainer_ *, const char*);
SOAP_FMAC3 struct __ns1__InboundInSFCContainer_ * SOAP_FMAC4 soap_in___ns1__InboundInSFCContainer_(struct soap*, const char*, struct __ns1__InboundInSFCContainer_ *, const char*);
SOAP_FMAC1 struct __ns1__InboundInSFCContainer_ * SOAP_FMAC2 soap_instantiate___ns1__InboundInSFCContainer_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundInSFCContainer_ * soap_new___ns1__InboundInSFCContainer_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundInSFCContainer_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundInSFCContainer_ * soap_new_req___ns1__InboundInSFCContainer_(
	struct soap *soap)
{
	struct __ns1__InboundInSFCContainer_ *_p = ::soap_new___ns1__InboundInSFCContainer_(soap);
	if (_p)
	{	::soap_default___ns1__InboundInSFCContainer_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundInSFCContainer_ * soap_new_set___ns1__InboundInSFCContainer_(
	struct soap *soap,
	_ns1__InboundInSFCContainer *ns1__InboundInSFCContainer_)
{
	struct __ns1__InboundInSFCContainer_ *_p = ::soap_new___ns1__InboundInSFCContainer_(soap);
	if (_p)
	{	::soap_default___ns1__InboundInSFCContainer_(soap, _p);
		_p->ns1__InboundInSFCContainer_ = ns1__InboundInSFCContainer_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundInSFCContainer_(struct soap*, const struct __ns1__InboundInSFCContainer_ *, const char*, const char*);

inline int soap_write___ns1__InboundInSFCContainer_(struct soap *soap, struct __ns1__InboundInSFCContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundInSFCContainer_(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer_(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundInSFCContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInSFCContainer_(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer_(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundInSFCContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInSFCContainer_(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer_(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundInSFCContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInSFCContainer_(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer_(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundInSFCContainer_ * SOAP_FMAC4 soap_get___ns1__InboundInSFCContainer_(struct soap*, struct __ns1__InboundInSFCContainer_ *, const char*, const char*);

inline int soap_read___ns1__InboundInSFCContainer_(struct soap *soap, struct __ns1__InboundInSFCContainer_ *p)
{
	if (p)
	{	::soap_default___ns1__InboundInSFCContainer_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundInSFCContainer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundInSFCContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundInSFCContainer_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundInSFCContainer_(struct soap *soap, struct __ns1__InboundInSFCContainer_ *p)
{
	if (::soap_read___ns1__InboundInSFCContainer_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundInSFCContainer_DEFINED
#define SOAP_TYPE___ns1__InboundInSFCContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundInSFCContainer(struct soap*, struct __ns1__InboundInSFCContainer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundInSFCContainer(struct soap*, const struct __ns1__InboundInSFCContainer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundInSFCContainer(struct soap*, const char*, int, const struct __ns1__InboundInSFCContainer *, const char*);
SOAP_FMAC3 struct __ns1__InboundInSFCContainer * SOAP_FMAC4 soap_in___ns1__InboundInSFCContainer(struct soap*, const char*, struct __ns1__InboundInSFCContainer *, const char*);
SOAP_FMAC1 struct __ns1__InboundInSFCContainer * SOAP_FMAC2 soap_instantiate___ns1__InboundInSFCContainer(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundInSFCContainer * soap_new___ns1__InboundInSFCContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundInSFCContainer(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundInSFCContainer * soap_new_req___ns1__InboundInSFCContainer(
	struct soap *soap)
{
	struct __ns1__InboundInSFCContainer *_p = ::soap_new___ns1__InboundInSFCContainer(soap);
	if (_p)
	{	::soap_default___ns1__InboundInSFCContainer(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundInSFCContainer * soap_new_set___ns1__InboundInSFCContainer(
	struct soap *soap,
	_ns1__InboundInSFCContainer *ns1__InboundInSFCContainer_)
{
	struct __ns1__InboundInSFCContainer *_p = ::soap_new___ns1__InboundInSFCContainer(soap);
	if (_p)
	{	::soap_default___ns1__InboundInSFCContainer(soap, _p);
		_p->ns1__InboundInSFCContainer_ = ns1__InboundInSFCContainer_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundInSFCContainer(struct soap*, const struct __ns1__InboundInSFCContainer *, const char*, const char*);

inline int soap_write___ns1__InboundInSFCContainer(struct soap *soap, struct __ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundInSFCContainer(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundInSFCContainer(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInSFCContainer(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundInSFCContainer(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInSFCContainer(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundInSFCContainer(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInSFCContainer(soap, p), 0) || ::soap_put___ns1__InboundInSFCContainer(soap, p, "-ns1:InboundInSFCContainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundInSFCContainer * SOAP_FMAC4 soap_get___ns1__InboundInSFCContainer(struct soap*, struct __ns1__InboundInSFCContainer *, const char*, const char*);

inline int soap_read___ns1__InboundInSFCContainer(struct soap *soap, struct __ns1__InboundInSFCContainer *p)
{
	if (p)
	{	::soap_default___ns1__InboundInSFCContainer(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundInSFCContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundInSFCContainer(struct soap *soap, const char *URL, struct __ns1__InboundInSFCContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundInSFCContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundInSFCContainer(struct soap *soap, struct __ns1__InboundInSFCContainer *p)
{
	if (::soap_read___ns1__InboundInSFCContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundInContainer__DEFINED
#define SOAP_TYPE___ns1__InboundInContainer__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundInContainer_(struct soap*, struct __ns1__InboundInContainer_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundInContainer_(struct soap*, const struct __ns1__InboundInContainer_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundInContainer_(struct soap*, const char*, int, const struct __ns1__InboundInContainer_ *, const char*);
SOAP_FMAC3 struct __ns1__InboundInContainer_ * SOAP_FMAC4 soap_in___ns1__InboundInContainer_(struct soap*, const char*, struct __ns1__InboundInContainer_ *, const char*);
SOAP_FMAC1 struct __ns1__InboundInContainer_ * SOAP_FMAC2 soap_instantiate___ns1__InboundInContainer_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundInContainer_ * soap_new___ns1__InboundInContainer_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundInContainer_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundInContainer_ * soap_new_req___ns1__InboundInContainer_(
	struct soap *soap)
{
	struct __ns1__InboundInContainer_ *_p = ::soap_new___ns1__InboundInContainer_(soap);
	if (_p)
	{	::soap_default___ns1__InboundInContainer_(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundInContainer_ * soap_new_set___ns1__InboundInContainer_(
	struct soap *soap,
	_ns1__InboundInContainer *ns1__InboundInContainer_)
{
	struct __ns1__InboundInContainer_ *_p = ::soap_new___ns1__InboundInContainer_(soap);
	if (_p)
	{	::soap_default___ns1__InboundInContainer_(soap, _p);
		_p->ns1__InboundInContainer_ = ns1__InboundInContainer_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundInContainer_(struct soap*, const struct __ns1__InboundInContainer_ *, const char*, const char*);

inline int soap_write___ns1__InboundInContainer_(struct soap *soap, struct __ns1__InboundInContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundInContainer_(soap, p), 0) || ::soap_put___ns1__InboundInContainer_(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundInContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInContainer_(soap, p), 0) || ::soap_put___ns1__InboundInContainer_(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundInContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInContainer_(soap, p), 0) || ::soap_put___ns1__InboundInContainer_(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundInContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInContainer_(soap, p), 0) || ::soap_put___ns1__InboundInContainer_(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundInContainer_ * SOAP_FMAC4 soap_get___ns1__InboundInContainer_(struct soap*, struct __ns1__InboundInContainer_ *, const char*, const char*);

inline int soap_read___ns1__InboundInContainer_(struct soap *soap, struct __ns1__InboundInContainer_ *p)
{
	if (p)
	{	::soap_default___ns1__InboundInContainer_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundInContainer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundInContainer_(struct soap *soap, const char *URL, struct __ns1__InboundInContainer_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundInContainer_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundInContainer_(struct soap *soap, struct __ns1__InboundInContainer_ *p)
{
	if (::soap_read___ns1__InboundInContainer_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__InboundInContainer_DEFINED
#define SOAP_TYPE___ns1__InboundInContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InboundInContainer(struct soap*, struct __ns1__InboundInContainer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InboundInContainer(struct soap*, const struct __ns1__InboundInContainer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InboundInContainer(struct soap*, const char*, int, const struct __ns1__InboundInContainer *, const char*);
SOAP_FMAC3 struct __ns1__InboundInContainer * SOAP_FMAC4 soap_in___ns1__InboundInContainer(struct soap*, const char*, struct __ns1__InboundInContainer *, const char*);
SOAP_FMAC1 struct __ns1__InboundInContainer * SOAP_FMAC2 soap_instantiate___ns1__InboundInContainer(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InboundInContainer * soap_new___ns1__InboundInContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InboundInContainer(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InboundInContainer * soap_new_req___ns1__InboundInContainer(
	struct soap *soap)
{
	struct __ns1__InboundInContainer *_p = ::soap_new___ns1__InboundInContainer(soap);
	if (_p)
	{	::soap_default___ns1__InboundInContainer(soap, _p);
	}
	return _p;
}

inline struct __ns1__InboundInContainer * soap_new_set___ns1__InboundInContainer(
	struct soap *soap,
	_ns1__InboundInContainer *ns1__InboundInContainer_)
{
	struct __ns1__InboundInContainer *_p = ::soap_new___ns1__InboundInContainer(soap);
	if (_p)
	{	::soap_default___ns1__InboundInContainer(soap, _p);
		_p->ns1__InboundInContainer_ = ns1__InboundInContainer_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InboundInContainer(struct soap*, const struct __ns1__InboundInContainer *, const char*, const char*);

inline int soap_write___ns1__InboundInContainer(struct soap *soap, struct __ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__InboundInContainer(soap, p), 0) || ::soap_put___ns1__InboundInContainer(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InboundInContainer(struct soap *soap, const char *URL, struct __ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInContainer(soap, p), 0) || ::soap_put___ns1__InboundInContainer(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__InboundInContainer(struct soap *soap, const char *URL, struct __ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInContainer(soap, p), 0) || ::soap_put___ns1__InboundInContainer(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InboundInContainer(struct soap *soap, const char *URL, struct __ns1__InboundInContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__InboundInContainer(soap, p), 0) || ::soap_put___ns1__InboundInContainer(soap, p, "-ns1:InboundInContainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InboundInContainer * SOAP_FMAC4 soap_get___ns1__InboundInContainer(struct soap*, struct __ns1__InboundInContainer *, const char*, const char*);

inline int soap_read___ns1__InboundInContainer(struct soap *soap, struct __ns1__InboundInContainer *p)
{
	if (p)
	{	::soap_default___ns1__InboundInContainer(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__InboundInContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InboundInContainer(struct soap *soap, const char *URL, struct __ns1__InboundInContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__InboundInContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__InboundInContainer(struct soap *soap, struct __ns1__InboundInContainer *p)
{
	if (::soap_read___ns1__InboundInContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Inbound__DEFINED
#define SOAP_TYPE___ns1__Inbound__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Inbound_(struct soap*, struct __ns1__Inbound_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Inbound_(struct soap*, const struct __ns1__Inbound_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Inbound_(struct soap*, const char*, int, const struct __ns1__Inbound_ *, const char*);
SOAP_FMAC3 struct __ns1__Inbound_ * SOAP_FMAC4 soap_in___ns1__Inbound_(struct soap*, const char*, struct __ns1__Inbound_ *, const char*);
SOAP_FMAC1 struct __ns1__Inbound_ * SOAP_FMAC2 soap_instantiate___ns1__Inbound_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Inbound_ * soap_new___ns1__Inbound_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Inbound_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Inbound_ * soap_new_req___ns1__Inbound_(
	struct soap *soap)
{
	struct __ns1__Inbound_ *_p = ::soap_new___ns1__Inbound_(soap);
	if (_p)
	{	::soap_default___ns1__Inbound_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Inbound_ * soap_new_set___ns1__Inbound_(
	struct soap *soap,
	_ns1__Inbound *ns1__Inbound_)
{
	struct __ns1__Inbound_ *_p = ::soap_new___ns1__Inbound_(soap);
	if (_p)
	{	::soap_default___ns1__Inbound_(soap, _p);
		_p->ns1__Inbound_ = ns1__Inbound_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Inbound_(struct soap*, const struct __ns1__Inbound_ *, const char*, const char*);

inline int soap_write___ns1__Inbound_(struct soap *soap, struct __ns1__Inbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Inbound_(soap, p), 0) || ::soap_put___ns1__Inbound_(soap, p, "-ns1:Inbound", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Inbound_(struct soap *soap, const char *URL, struct __ns1__Inbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Inbound_(soap, p), 0) || ::soap_put___ns1__Inbound_(soap, p, "-ns1:Inbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Inbound_(struct soap *soap, const char *URL, struct __ns1__Inbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Inbound_(soap, p), 0) || ::soap_put___ns1__Inbound_(soap, p, "-ns1:Inbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Inbound_(struct soap *soap, const char *URL, struct __ns1__Inbound_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Inbound_(soap, p), 0) || ::soap_put___ns1__Inbound_(soap, p, "-ns1:Inbound", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Inbound_ * SOAP_FMAC4 soap_get___ns1__Inbound_(struct soap*, struct __ns1__Inbound_ *, const char*, const char*);

inline int soap_read___ns1__Inbound_(struct soap *soap, struct __ns1__Inbound_ *p)
{
	if (p)
	{	::soap_default___ns1__Inbound_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Inbound_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Inbound_(struct soap *soap, const char *URL, struct __ns1__Inbound_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Inbound_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Inbound_(struct soap *soap, struct __ns1__Inbound_ *p)
{
	if (::soap_read___ns1__Inbound_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Inbound_DEFINED
#define SOAP_TYPE___ns1__Inbound_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Inbound(struct soap*, struct __ns1__Inbound *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Inbound(struct soap*, const struct __ns1__Inbound *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Inbound(struct soap*, const char*, int, const struct __ns1__Inbound *, const char*);
SOAP_FMAC3 struct __ns1__Inbound * SOAP_FMAC4 soap_in___ns1__Inbound(struct soap*, const char*, struct __ns1__Inbound *, const char*);
SOAP_FMAC1 struct __ns1__Inbound * SOAP_FMAC2 soap_instantiate___ns1__Inbound(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Inbound * soap_new___ns1__Inbound(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Inbound(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Inbound * soap_new_req___ns1__Inbound(
	struct soap *soap)
{
	struct __ns1__Inbound *_p = ::soap_new___ns1__Inbound(soap);
	if (_p)
	{	::soap_default___ns1__Inbound(soap, _p);
	}
	return _p;
}

inline struct __ns1__Inbound * soap_new_set___ns1__Inbound(
	struct soap *soap,
	_ns1__Inbound *ns1__Inbound_)
{
	struct __ns1__Inbound *_p = ::soap_new___ns1__Inbound(soap);
	if (_p)
	{	::soap_default___ns1__Inbound(soap, _p);
		_p->ns1__Inbound_ = ns1__Inbound_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Inbound(struct soap*, const struct __ns1__Inbound *, const char*, const char*);

inline int soap_write___ns1__Inbound(struct soap *soap, struct __ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Inbound(soap, p), 0) || ::soap_put___ns1__Inbound(soap, p, "-ns1:Inbound", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Inbound(struct soap *soap, const char *URL, struct __ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Inbound(soap, p), 0) || ::soap_put___ns1__Inbound(soap, p, "-ns1:Inbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Inbound(struct soap *soap, const char *URL, struct __ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Inbound(soap, p), 0) || ::soap_put___ns1__Inbound(soap, p, "-ns1:Inbound", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Inbound(struct soap *soap, const char *URL, struct __ns1__Inbound const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Inbound(soap, p), 0) || ::soap_put___ns1__Inbound(soap, p, "-ns1:Inbound", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Inbound * SOAP_FMAC4 soap_get___ns1__Inbound(struct soap*, struct __ns1__Inbound *, const char*, const char*);

inline int soap_read___ns1__Inbound(struct soap *soap, struct __ns1__Inbound *p)
{
	if (p)
	{	::soap_default___ns1__Inbound(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Inbound(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Inbound(struct soap *soap, const char *URL, struct __ns1__Inbound *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Inbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Inbound(struct soap *soap, struct __ns1__Inbound *p)
{
	if (::soap_read___ns1__Inbound(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Heartbeat__DEFINED
#define SOAP_TYPE___ns1__Heartbeat__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Heartbeat_(struct soap*, struct __ns1__Heartbeat_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Heartbeat_(struct soap*, const struct __ns1__Heartbeat_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Heartbeat_(struct soap*, const char*, int, const struct __ns1__Heartbeat_ *, const char*);
SOAP_FMAC3 struct __ns1__Heartbeat_ * SOAP_FMAC4 soap_in___ns1__Heartbeat_(struct soap*, const char*, struct __ns1__Heartbeat_ *, const char*);
SOAP_FMAC1 struct __ns1__Heartbeat_ * SOAP_FMAC2 soap_instantiate___ns1__Heartbeat_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Heartbeat_ * soap_new___ns1__Heartbeat_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Heartbeat_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Heartbeat_ * soap_new_req___ns1__Heartbeat_(
	struct soap *soap)
{
	struct __ns1__Heartbeat_ *_p = ::soap_new___ns1__Heartbeat_(soap);
	if (_p)
	{	::soap_default___ns1__Heartbeat_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Heartbeat_ * soap_new_set___ns1__Heartbeat_(
	struct soap *soap,
	_ns1__Heartbeat *ns1__Heartbeat_)
{
	struct __ns1__Heartbeat_ *_p = ::soap_new___ns1__Heartbeat_(soap);
	if (_p)
	{	::soap_default___ns1__Heartbeat_(soap, _p);
		_p->ns1__Heartbeat_ = ns1__Heartbeat_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Heartbeat_(struct soap*, const struct __ns1__Heartbeat_ *, const char*, const char*);

inline int soap_write___ns1__Heartbeat_(struct soap *soap, struct __ns1__Heartbeat_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Heartbeat_(soap, p), 0) || ::soap_put___ns1__Heartbeat_(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Heartbeat_(struct soap *soap, const char *URL, struct __ns1__Heartbeat_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Heartbeat_(soap, p), 0) || ::soap_put___ns1__Heartbeat_(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Heartbeat_(struct soap *soap, const char *URL, struct __ns1__Heartbeat_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Heartbeat_(soap, p), 0) || ::soap_put___ns1__Heartbeat_(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Heartbeat_(struct soap *soap, const char *URL, struct __ns1__Heartbeat_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Heartbeat_(soap, p), 0) || ::soap_put___ns1__Heartbeat_(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Heartbeat_ * SOAP_FMAC4 soap_get___ns1__Heartbeat_(struct soap*, struct __ns1__Heartbeat_ *, const char*, const char*);

inline int soap_read___ns1__Heartbeat_(struct soap *soap, struct __ns1__Heartbeat_ *p)
{
	if (p)
	{	::soap_default___ns1__Heartbeat_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Heartbeat_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Heartbeat_(struct soap *soap, const char *URL, struct __ns1__Heartbeat_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Heartbeat_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Heartbeat_(struct soap *soap, struct __ns1__Heartbeat_ *p)
{
	if (::soap_read___ns1__Heartbeat_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Heartbeat_DEFINED
#define SOAP_TYPE___ns1__Heartbeat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Heartbeat(struct soap*, struct __ns1__Heartbeat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Heartbeat(struct soap*, const struct __ns1__Heartbeat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Heartbeat(struct soap*, const char*, int, const struct __ns1__Heartbeat *, const char*);
SOAP_FMAC3 struct __ns1__Heartbeat * SOAP_FMAC4 soap_in___ns1__Heartbeat(struct soap*, const char*, struct __ns1__Heartbeat *, const char*);
SOAP_FMAC1 struct __ns1__Heartbeat * SOAP_FMAC2 soap_instantiate___ns1__Heartbeat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Heartbeat * soap_new___ns1__Heartbeat(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Heartbeat(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Heartbeat * soap_new_req___ns1__Heartbeat(
	struct soap *soap)
{
	struct __ns1__Heartbeat *_p = ::soap_new___ns1__Heartbeat(soap);
	if (_p)
	{	::soap_default___ns1__Heartbeat(soap, _p);
	}
	return _p;
}

inline struct __ns1__Heartbeat * soap_new_set___ns1__Heartbeat(
	struct soap *soap,
	_ns1__Heartbeat *ns1__Heartbeat_)
{
	struct __ns1__Heartbeat *_p = ::soap_new___ns1__Heartbeat(soap);
	if (_p)
	{	::soap_default___ns1__Heartbeat(soap, _p);
		_p->ns1__Heartbeat_ = ns1__Heartbeat_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Heartbeat(struct soap*, const struct __ns1__Heartbeat *, const char*, const char*);

inline int soap_write___ns1__Heartbeat(struct soap *soap, struct __ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Heartbeat(soap, p), 0) || ::soap_put___ns1__Heartbeat(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Heartbeat(struct soap *soap, const char *URL, struct __ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Heartbeat(soap, p), 0) || ::soap_put___ns1__Heartbeat(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Heartbeat(struct soap *soap, const char *URL, struct __ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Heartbeat(soap, p), 0) || ::soap_put___ns1__Heartbeat(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Heartbeat(struct soap *soap, const char *URL, struct __ns1__Heartbeat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Heartbeat(soap, p), 0) || ::soap_put___ns1__Heartbeat(soap, p, "-ns1:Heartbeat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Heartbeat * SOAP_FMAC4 soap_get___ns1__Heartbeat(struct soap*, struct __ns1__Heartbeat *, const char*, const char*);

inline int soap_read___ns1__Heartbeat(struct soap *soap, struct __ns1__Heartbeat *p)
{
	if (p)
	{	::soap_default___ns1__Heartbeat(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Heartbeat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Heartbeat(struct soap *soap, const char *URL, struct __ns1__Heartbeat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Heartbeat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Heartbeat(struct soap *soap, struct __ns1__Heartbeat *p)
{
	if (::soap_read___ns1__Heartbeat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GenerateCellSFC__DEFINED
#define SOAP_TYPE___ns1__GenerateCellSFC__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GenerateCellSFC_(struct soap*, struct __ns1__GenerateCellSFC_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GenerateCellSFC_(struct soap*, const struct __ns1__GenerateCellSFC_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GenerateCellSFC_(struct soap*, const char*, int, const struct __ns1__GenerateCellSFC_ *, const char*);
SOAP_FMAC3 struct __ns1__GenerateCellSFC_ * SOAP_FMAC4 soap_in___ns1__GenerateCellSFC_(struct soap*, const char*, struct __ns1__GenerateCellSFC_ *, const char*);
SOAP_FMAC1 struct __ns1__GenerateCellSFC_ * SOAP_FMAC2 soap_instantiate___ns1__GenerateCellSFC_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GenerateCellSFC_ * soap_new___ns1__GenerateCellSFC_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GenerateCellSFC_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GenerateCellSFC_ * soap_new_req___ns1__GenerateCellSFC_(
	struct soap *soap)
{
	struct __ns1__GenerateCellSFC_ *_p = ::soap_new___ns1__GenerateCellSFC_(soap);
	if (_p)
	{	::soap_default___ns1__GenerateCellSFC_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GenerateCellSFC_ * soap_new_set___ns1__GenerateCellSFC_(
	struct soap *soap,
	_ns1__GenerateCellSFC *ns1__GenerateCellSFC_)
{
	struct __ns1__GenerateCellSFC_ *_p = ::soap_new___ns1__GenerateCellSFC_(soap);
	if (_p)
	{	::soap_default___ns1__GenerateCellSFC_(soap, _p);
		_p->ns1__GenerateCellSFC_ = ns1__GenerateCellSFC_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GenerateCellSFC_(struct soap*, const struct __ns1__GenerateCellSFC_ *, const char*, const char*);

inline int soap_write___ns1__GenerateCellSFC_(struct soap *soap, struct __ns1__GenerateCellSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GenerateCellSFC_(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC_(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GenerateCellSFC_(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GenerateCellSFC_(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC_(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GenerateCellSFC_(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GenerateCellSFC_(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC_(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GenerateCellSFC_(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GenerateCellSFC_(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC_(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GenerateCellSFC_ * SOAP_FMAC4 soap_get___ns1__GenerateCellSFC_(struct soap*, struct __ns1__GenerateCellSFC_ *, const char*, const char*);

inline int soap_read___ns1__GenerateCellSFC_(struct soap *soap, struct __ns1__GenerateCellSFC_ *p)
{
	if (p)
	{	::soap_default___ns1__GenerateCellSFC_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GenerateCellSFC_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GenerateCellSFC_(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GenerateCellSFC_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GenerateCellSFC_(struct soap *soap, struct __ns1__GenerateCellSFC_ *p)
{
	if (::soap_read___ns1__GenerateCellSFC_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__GenerateCellSFC_DEFINED
#define SOAP_TYPE___ns1__GenerateCellSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GenerateCellSFC(struct soap*, struct __ns1__GenerateCellSFC *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GenerateCellSFC(struct soap*, const struct __ns1__GenerateCellSFC *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GenerateCellSFC(struct soap*, const char*, int, const struct __ns1__GenerateCellSFC *, const char*);
SOAP_FMAC3 struct __ns1__GenerateCellSFC * SOAP_FMAC4 soap_in___ns1__GenerateCellSFC(struct soap*, const char*, struct __ns1__GenerateCellSFC *, const char*);
SOAP_FMAC1 struct __ns1__GenerateCellSFC * SOAP_FMAC2 soap_instantiate___ns1__GenerateCellSFC(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GenerateCellSFC * soap_new___ns1__GenerateCellSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GenerateCellSFC(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GenerateCellSFC * soap_new_req___ns1__GenerateCellSFC(
	struct soap *soap)
{
	struct __ns1__GenerateCellSFC *_p = ::soap_new___ns1__GenerateCellSFC(soap);
	if (_p)
	{	::soap_default___ns1__GenerateCellSFC(soap, _p);
	}
	return _p;
}

inline struct __ns1__GenerateCellSFC * soap_new_set___ns1__GenerateCellSFC(
	struct soap *soap,
	_ns1__GenerateCellSFC *ns1__GenerateCellSFC_)
{
	struct __ns1__GenerateCellSFC *_p = ::soap_new___ns1__GenerateCellSFC(soap);
	if (_p)
	{	::soap_default___ns1__GenerateCellSFC(soap, _p);
		_p->ns1__GenerateCellSFC_ = ns1__GenerateCellSFC_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GenerateCellSFC(struct soap*, const struct __ns1__GenerateCellSFC *, const char*, const char*);

inline int soap_write___ns1__GenerateCellSFC(struct soap *soap, struct __ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GenerateCellSFC(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GenerateCellSFC(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GenerateCellSFC(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GenerateCellSFC(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GenerateCellSFC(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GenerateCellSFC(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GenerateCellSFC(soap, p), 0) || ::soap_put___ns1__GenerateCellSFC(soap, p, "-ns1:GenerateCellSFC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GenerateCellSFC * SOAP_FMAC4 soap_get___ns1__GenerateCellSFC(struct soap*, struct __ns1__GenerateCellSFC *, const char*, const char*);

inline int soap_read___ns1__GenerateCellSFC(struct soap *soap, struct __ns1__GenerateCellSFC *p)
{
	if (p)
	{	::soap_default___ns1__GenerateCellSFC(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GenerateCellSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GenerateCellSFC(struct soap *soap, const char *URL, struct __ns1__GenerateCellSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GenerateCellSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GenerateCellSFC(struct soap *soap, struct __ns1__GenerateCellSFC *p)
{
	if (::soap_read___ns1__GenerateCellSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__FillingData__DEFINED
#define SOAP_TYPE___ns1__FillingData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FillingData_(struct soap*, struct __ns1__FillingData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FillingData_(struct soap*, const struct __ns1__FillingData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FillingData_(struct soap*, const char*, int, const struct __ns1__FillingData_ *, const char*);
SOAP_FMAC3 struct __ns1__FillingData_ * SOAP_FMAC4 soap_in___ns1__FillingData_(struct soap*, const char*, struct __ns1__FillingData_ *, const char*);
SOAP_FMAC1 struct __ns1__FillingData_ * SOAP_FMAC2 soap_instantiate___ns1__FillingData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FillingData_ * soap_new___ns1__FillingData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__FillingData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__FillingData_ * soap_new_req___ns1__FillingData_(
	struct soap *soap)
{
	struct __ns1__FillingData_ *_p = ::soap_new___ns1__FillingData_(soap);
	if (_p)
	{	::soap_default___ns1__FillingData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__FillingData_ * soap_new_set___ns1__FillingData_(
	struct soap *soap,
	_ns1__FillingData *ns1__FillingData_)
{
	struct __ns1__FillingData_ *_p = ::soap_new___ns1__FillingData_(soap);
	if (_p)
	{	::soap_default___ns1__FillingData_(soap, _p);
		_p->ns1__FillingData_ = ns1__FillingData_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FillingData_(struct soap*, const struct __ns1__FillingData_ *, const char*, const char*);

inline int soap_write___ns1__FillingData_(struct soap *soap, struct __ns1__FillingData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__FillingData_(soap, p), 0) || ::soap_put___ns1__FillingData_(soap, p, "-ns1:FillingData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__FillingData_(struct soap *soap, const char *URL, struct __ns1__FillingData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FillingData_(soap, p), 0) || ::soap_put___ns1__FillingData_(soap, p, "-ns1:FillingData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__FillingData_(struct soap *soap, const char *URL, struct __ns1__FillingData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FillingData_(soap, p), 0) || ::soap_put___ns1__FillingData_(soap, p, "-ns1:FillingData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__FillingData_(struct soap *soap, const char *URL, struct __ns1__FillingData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FillingData_(soap, p), 0) || ::soap_put___ns1__FillingData_(soap, p, "-ns1:FillingData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__FillingData_ * SOAP_FMAC4 soap_get___ns1__FillingData_(struct soap*, struct __ns1__FillingData_ *, const char*, const char*);

inline int soap_read___ns1__FillingData_(struct soap *soap, struct __ns1__FillingData_ *p)
{
	if (p)
	{	::soap_default___ns1__FillingData_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__FillingData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__FillingData_(struct soap *soap, const char *URL, struct __ns1__FillingData_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__FillingData_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__FillingData_(struct soap *soap, struct __ns1__FillingData_ *p)
{
	if (::soap_read___ns1__FillingData_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__FillingData_DEFINED
#define SOAP_TYPE___ns1__FillingData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FillingData(struct soap*, struct __ns1__FillingData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FillingData(struct soap*, const struct __ns1__FillingData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FillingData(struct soap*, const char*, int, const struct __ns1__FillingData *, const char*);
SOAP_FMAC3 struct __ns1__FillingData * SOAP_FMAC4 soap_in___ns1__FillingData(struct soap*, const char*, struct __ns1__FillingData *, const char*);
SOAP_FMAC1 struct __ns1__FillingData * SOAP_FMAC2 soap_instantiate___ns1__FillingData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FillingData * soap_new___ns1__FillingData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__FillingData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__FillingData * soap_new_req___ns1__FillingData(
	struct soap *soap)
{
	struct __ns1__FillingData *_p = ::soap_new___ns1__FillingData(soap);
	if (_p)
	{	::soap_default___ns1__FillingData(soap, _p);
	}
	return _p;
}

inline struct __ns1__FillingData * soap_new_set___ns1__FillingData(
	struct soap *soap,
	_ns1__FillingData *ns1__FillingData_)
{
	struct __ns1__FillingData *_p = ::soap_new___ns1__FillingData(soap);
	if (_p)
	{	::soap_default___ns1__FillingData(soap, _p);
		_p->ns1__FillingData_ = ns1__FillingData_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FillingData(struct soap*, const struct __ns1__FillingData *, const char*, const char*);

inline int soap_write___ns1__FillingData(struct soap *soap, struct __ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__FillingData(soap, p), 0) || ::soap_put___ns1__FillingData(soap, p, "-ns1:FillingData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__FillingData(struct soap *soap, const char *URL, struct __ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FillingData(soap, p), 0) || ::soap_put___ns1__FillingData(soap, p, "-ns1:FillingData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__FillingData(struct soap *soap, const char *URL, struct __ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FillingData(soap, p), 0) || ::soap_put___ns1__FillingData(soap, p, "-ns1:FillingData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__FillingData(struct soap *soap, const char *URL, struct __ns1__FillingData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FillingData(soap, p), 0) || ::soap_put___ns1__FillingData(soap, p, "-ns1:FillingData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__FillingData * SOAP_FMAC4 soap_get___ns1__FillingData(struct soap*, struct __ns1__FillingData *, const char*, const char*);

inline int soap_read___ns1__FillingData(struct soap *soap, struct __ns1__FillingData *p)
{
	if (p)
	{	::soap_default___ns1__FillingData(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__FillingData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__FillingData(struct soap *soap, const char *URL, struct __ns1__FillingData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__FillingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__FillingData(struct soap *soap, struct __ns1__FillingData *p)
{
	if (::soap_read___ns1__FillingData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__FeedingDJInLaminating__DEFINED
#define SOAP_TYPE___ns1__FeedingDJInLaminating__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FeedingDJInLaminating_(struct soap*, struct __ns1__FeedingDJInLaminating_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FeedingDJInLaminating_(struct soap*, const struct __ns1__FeedingDJInLaminating_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FeedingDJInLaminating_(struct soap*, const char*, int, const struct __ns1__FeedingDJInLaminating_ *, const char*);
SOAP_FMAC3 struct __ns1__FeedingDJInLaminating_ * SOAP_FMAC4 soap_in___ns1__FeedingDJInLaminating_(struct soap*, const char*, struct __ns1__FeedingDJInLaminating_ *, const char*);
SOAP_FMAC1 struct __ns1__FeedingDJInLaminating_ * SOAP_FMAC2 soap_instantiate___ns1__FeedingDJInLaminating_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FeedingDJInLaminating_ * soap_new___ns1__FeedingDJInLaminating_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__FeedingDJInLaminating_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__FeedingDJInLaminating_ * soap_new_req___ns1__FeedingDJInLaminating_(
	struct soap *soap)
{
	struct __ns1__FeedingDJInLaminating_ *_p = ::soap_new___ns1__FeedingDJInLaminating_(soap);
	if (_p)
	{	::soap_default___ns1__FeedingDJInLaminating_(soap, _p);
	}
	return _p;
}

inline struct __ns1__FeedingDJInLaminating_ * soap_new_set___ns1__FeedingDJInLaminating_(
	struct soap *soap,
	_ns1__FeedingDJInLaminating *ns1__FeedingDJInLaminating)
{
	struct __ns1__FeedingDJInLaminating_ *_p = ::soap_new___ns1__FeedingDJInLaminating_(soap);
	if (_p)
	{	::soap_default___ns1__FeedingDJInLaminating_(soap, _p);
		_p->ns1__FeedingDJInLaminating = ns1__FeedingDJInLaminating;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FeedingDJInLaminating_(struct soap*, const struct __ns1__FeedingDJInLaminating_ *, const char*, const char*);

inline int soap_write___ns1__FeedingDJInLaminating_(struct soap *soap, struct __ns1__FeedingDJInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__FeedingDJInLaminating_(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating_(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__FeedingDJInLaminating_(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FeedingDJInLaminating_(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating_(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__FeedingDJInLaminating_(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FeedingDJInLaminating_(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating_(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__FeedingDJInLaminating_(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FeedingDJInLaminating_(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating_(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__FeedingDJInLaminating_ * SOAP_FMAC4 soap_get___ns1__FeedingDJInLaminating_(struct soap*, struct __ns1__FeedingDJInLaminating_ *, const char*, const char*);

inline int soap_read___ns1__FeedingDJInLaminating_(struct soap *soap, struct __ns1__FeedingDJInLaminating_ *p)
{
	if (p)
	{	::soap_default___ns1__FeedingDJInLaminating_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__FeedingDJInLaminating_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__FeedingDJInLaminating_(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__FeedingDJInLaminating_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__FeedingDJInLaminating_(struct soap *soap, struct __ns1__FeedingDJInLaminating_ *p)
{
	if (::soap_read___ns1__FeedingDJInLaminating_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__FeedingDJInLaminating_DEFINED
#define SOAP_TYPE___ns1__FeedingDJInLaminating_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FeedingDJInLaminating(struct soap*, struct __ns1__FeedingDJInLaminating *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FeedingDJInLaminating(struct soap*, const struct __ns1__FeedingDJInLaminating *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FeedingDJInLaminating(struct soap*, const char*, int, const struct __ns1__FeedingDJInLaminating *, const char*);
SOAP_FMAC3 struct __ns1__FeedingDJInLaminating * SOAP_FMAC4 soap_in___ns1__FeedingDJInLaminating(struct soap*, const char*, struct __ns1__FeedingDJInLaminating *, const char*);
SOAP_FMAC1 struct __ns1__FeedingDJInLaminating * SOAP_FMAC2 soap_instantiate___ns1__FeedingDJInLaminating(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FeedingDJInLaminating * soap_new___ns1__FeedingDJInLaminating(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__FeedingDJInLaminating(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__FeedingDJInLaminating * soap_new_req___ns1__FeedingDJInLaminating(
	struct soap *soap)
{
	struct __ns1__FeedingDJInLaminating *_p = ::soap_new___ns1__FeedingDJInLaminating(soap);
	if (_p)
	{	::soap_default___ns1__FeedingDJInLaminating(soap, _p);
	}
	return _p;
}

inline struct __ns1__FeedingDJInLaminating * soap_new_set___ns1__FeedingDJInLaminating(
	struct soap *soap,
	_ns1__FeedingDJInLaminating *ns1__FeedingDJInLaminating)
{
	struct __ns1__FeedingDJInLaminating *_p = ::soap_new___ns1__FeedingDJInLaminating(soap);
	if (_p)
	{	::soap_default___ns1__FeedingDJInLaminating(soap, _p);
		_p->ns1__FeedingDJInLaminating = ns1__FeedingDJInLaminating;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FeedingDJInLaminating(struct soap*, const struct __ns1__FeedingDJInLaminating *, const char*, const char*);

inline int soap_write___ns1__FeedingDJInLaminating(struct soap *soap, struct __ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__FeedingDJInLaminating(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FeedingDJInLaminating(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FeedingDJInLaminating(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__FeedingDJInLaminating(soap, p), 0) || ::soap_put___ns1__FeedingDJInLaminating(soap, p, "-ns1:FeedingDJInLaminating", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__FeedingDJInLaminating * SOAP_FMAC4 soap_get___ns1__FeedingDJInLaminating(struct soap*, struct __ns1__FeedingDJInLaminating *, const char*, const char*);

inline int soap_read___ns1__FeedingDJInLaminating(struct soap *soap, struct __ns1__FeedingDJInLaminating *p)
{
	if (p)
	{	::soap_default___ns1__FeedingDJInLaminating(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__FeedingDJInLaminating(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__FeedingDJInLaminating(struct soap *soap, const char *URL, struct __ns1__FeedingDJInLaminating *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__FeedingDJInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__FeedingDJInLaminating(struct soap *soap, struct __ns1__FeedingDJInLaminating *p)
{
	if (::soap_read___ns1__FeedingDJInLaminating(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Feeding__DEFINED
#define SOAP_TYPE___ns1__Feeding__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Feeding_(struct soap*, struct __ns1__Feeding_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Feeding_(struct soap*, const struct __ns1__Feeding_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Feeding_(struct soap*, const char*, int, const struct __ns1__Feeding_ *, const char*);
SOAP_FMAC3 struct __ns1__Feeding_ * SOAP_FMAC4 soap_in___ns1__Feeding_(struct soap*, const char*, struct __ns1__Feeding_ *, const char*);
SOAP_FMAC1 struct __ns1__Feeding_ * SOAP_FMAC2 soap_instantiate___ns1__Feeding_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Feeding_ * soap_new___ns1__Feeding_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Feeding_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Feeding_ * soap_new_req___ns1__Feeding_(
	struct soap *soap)
{
	struct __ns1__Feeding_ *_p = ::soap_new___ns1__Feeding_(soap);
	if (_p)
	{	::soap_default___ns1__Feeding_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Feeding_ * soap_new_set___ns1__Feeding_(
	struct soap *soap,
	_ns1__Feeding *ns1__Feeding)
{
	struct __ns1__Feeding_ *_p = ::soap_new___ns1__Feeding_(soap);
	if (_p)
	{	::soap_default___ns1__Feeding_(soap, _p);
		_p->ns1__Feeding = ns1__Feeding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Feeding_(struct soap*, const struct __ns1__Feeding_ *, const char*, const char*);

inline int soap_write___ns1__Feeding_(struct soap *soap, struct __ns1__Feeding_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Feeding_(soap, p), 0) || ::soap_put___ns1__Feeding_(soap, p, "-ns1:Feeding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Feeding_(struct soap *soap, const char *URL, struct __ns1__Feeding_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Feeding_(soap, p), 0) || ::soap_put___ns1__Feeding_(soap, p, "-ns1:Feeding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Feeding_(struct soap *soap, const char *URL, struct __ns1__Feeding_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Feeding_(soap, p), 0) || ::soap_put___ns1__Feeding_(soap, p, "-ns1:Feeding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Feeding_(struct soap *soap, const char *URL, struct __ns1__Feeding_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Feeding_(soap, p), 0) || ::soap_put___ns1__Feeding_(soap, p, "-ns1:Feeding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Feeding_ * SOAP_FMAC4 soap_get___ns1__Feeding_(struct soap*, struct __ns1__Feeding_ *, const char*, const char*);

inline int soap_read___ns1__Feeding_(struct soap *soap, struct __ns1__Feeding_ *p)
{
	if (p)
	{	::soap_default___ns1__Feeding_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Feeding_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Feeding_(struct soap *soap, const char *URL, struct __ns1__Feeding_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Feeding_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Feeding_(struct soap *soap, struct __ns1__Feeding_ *p)
{
	if (::soap_read___ns1__Feeding_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Feeding_DEFINED
#define SOAP_TYPE___ns1__Feeding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Feeding(struct soap*, struct __ns1__Feeding *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Feeding(struct soap*, const struct __ns1__Feeding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Feeding(struct soap*, const char*, int, const struct __ns1__Feeding *, const char*);
SOAP_FMAC3 struct __ns1__Feeding * SOAP_FMAC4 soap_in___ns1__Feeding(struct soap*, const char*, struct __ns1__Feeding *, const char*);
SOAP_FMAC1 struct __ns1__Feeding * SOAP_FMAC2 soap_instantiate___ns1__Feeding(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Feeding * soap_new___ns1__Feeding(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Feeding(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Feeding * soap_new_req___ns1__Feeding(
	struct soap *soap)
{
	struct __ns1__Feeding *_p = ::soap_new___ns1__Feeding(soap);
	if (_p)
	{	::soap_default___ns1__Feeding(soap, _p);
	}
	return _p;
}

inline struct __ns1__Feeding * soap_new_set___ns1__Feeding(
	struct soap *soap,
	_ns1__Feeding *ns1__Feeding)
{
	struct __ns1__Feeding *_p = ::soap_new___ns1__Feeding(soap);
	if (_p)
	{	::soap_default___ns1__Feeding(soap, _p);
		_p->ns1__Feeding = ns1__Feeding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Feeding(struct soap*, const struct __ns1__Feeding *, const char*, const char*);

inline int soap_write___ns1__Feeding(struct soap *soap, struct __ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Feeding(soap, p), 0) || ::soap_put___ns1__Feeding(soap, p, "-ns1:Feeding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Feeding(struct soap *soap, const char *URL, struct __ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Feeding(soap, p), 0) || ::soap_put___ns1__Feeding(soap, p, "-ns1:Feeding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Feeding(struct soap *soap, const char *URL, struct __ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Feeding(soap, p), 0) || ::soap_put___ns1__Feeding(soap, p, "-ns1:Feeding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Feeding(struct soap *soap, const char *URL, struct __ns1__Feeding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Feeding(soap, p), 0) || ::soap_put___ns1__Feeding(soap, p, "-ns1:Feeding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Feeding * SOAP_FMAC4 soap_get___ns1__Feeding(struct soap*, struct __ns1__Feeding *, const char*, const char*);

inline int soap_read___ns1__Feeding(struct soap *soap, struct __ns1__Feeding *p)
{
	if (p)
	{	::soap_default___ns1__Feeding(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Feeding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Feeding(struct soap *soap, const char *URL, struct __ns1__Feeding *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Feeding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Feeding(struct soap *soap, struct __ns1__Feeding *p)
{
	if (::soap_read___ns1__Feeding(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ExamineExists__DEFINED
#define SOAP_TYPE___ns1__ExamineExists__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExamineExists_(struct soap*, struct __ns1__ExamineExists_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExamineExists_(struct soap*, const struct __ns1__ExamineExists_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExamineExists_(struct soap*, const char*, int, const struct __ns1__ExamineExists_ *, const char*);
SOAP_FMAC3 struct __ns1__ExamineExists_ * SOAP_FMAC4 soap_in___ns1__ExamineExists_(struct soap*, const char*, struct __ns1__ExamineExists_ *, const char*);
SOAP_FMAC1 struct __ns1__ExamineExists_ * SOAP_FMAC2 soap_instantiate___ns1__ExamineExists_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExamineExists_ * soap_new___ns1__ExamineExists_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ExamineExists_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ExamineExists_ * soap_new_req___ns1__ExamineExists_(
	struct soap *soap)
{
	struct __ns1__ExamineExists_ *_p = ::soap_new___ns1__ExamineExists_(soap);
	if (_p)
	{	::soap_default___ns1__ExamineExists_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExamineExists_ * soap_new_set___ns1__ExamineExists_(
	struct soap *soap,
	_ns1__ExamineExists *ns1__ExamineExists)
{
	struct __ns1__ExamineExists_ *_p = ::soap_new___ns1__ExamineExists_(soap);
	if (_p)
	{	::soap_default___ns1__ExamineExists_(soap, _p);
		_p->ns1__ExamineExists = ns1__ExamineExists;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExamineExists_(struct soap*, const struct __ns1__ExamineExists_ *, const char*, const char*);

inline int soap_write___ns1__ExamineExists_(struct soap *soap, struct __ns1__ExamineExists_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ExamineExists_(soap, p), 0) || ::soap_put___ns1__ExamineExists_(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ExamineExists_(struct soap *soap, const char *URL, struct __ns1__ExamineExists_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ExamineExists_(soap, p), 0) || ::soap_put___ns1__ExamineExists_(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ExamineExists_(struct soap *soap, const char *URL, struct __ns1__ExamineExists_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ExamineExists_(soap, p), 0) || ::soap_put___ns1__ExamineExists_(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ExamineExists_(struct soap *soap, const char *URL, struct __ns1__ExamineExists_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ExamineExists_(soap, p), 0) || ::soap_put___ns1__ExamineExists_(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ExamineExists_ * SOAP_FMAC4 soap_get___ns1__ExamineExists_(struct soap*, struct __ns1__ExamineExists_ *, const char*, const char*);

inline int soap_read___ns1__ExamineExists_(struct soap *soap, struct __ns1__ExamineExists_ *p)
{
	if (p)
	{	::soap_default___ns1__ExamineExists_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ExamineExists_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ExamineExists_(struct soap *soap, const char *URL, struct __ns1__ExamineExists_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ExamineExists_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ExamineExists_(struct soap *soap, struct __ns1__ExamineExists_ *p)
{
	if (::soap_read___ns1__ExamineExists_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ExamineExists_DEFINED
#define SOAP_TYPE___ns1__ExamineExists_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExamineExists(struct soap*, struct __ns1__ExamineExists *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExamineExists(struct soap*, const struct __ns1__ExamineExists *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExamineExists(struct soap*, const char*, int, const struct __ns1__ExamineExists *, const char*);
SOAP_FMAC3 struct __ns1__ExamineExists * SOAP_FMAC4 soap_in___ns1__ExamineExists(struct soap*, const char*, struct __ns1__ExamineExists *, const char*);
SOAP_FMAC1 struct __ns1__ExamineExists * SOAP_FMAC2 soap_instantiate___ns1__ExamineExists(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExamineExists * soap_new___ns1__ExamineExists(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ExamineExists(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ExamineExists * soap_new_req___ns1__ExamineExists(
	struct soap *soap)
{
	struct __ns1__ExamineExists *_p = ::soap_new___ns1__ExamineExists(soap);
	if (_p)
	{	::soap_default___ns1__ExamineExists(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExamineExists * soap_new_set___ns1__ExamineExists(
	struct soap *soap,
	_ns1__ExamineExists *ns1__ExamineExists)
{
	struct __ns1__ExamineExists *_p = ::soap_new___ns1__ExamineExists(soap);
	if (_p)
	{	::soap_default___ns1__ExamineExists(soap, _p);
		_p->ns1__ExamineExists = ns1__ExamineExists;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExamineExists(struct soap*, const struct __ns1__ExamineExists *, const char*, const char*);

inline int soap_write___ns1__ExamineExists(struct soap *soap, struct __ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ExamineExists(soap, p), 0) || ::soap_put___ns1__ExamineExists(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ExamineExists(struct soap *soap, const char *URL, struct __ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ExamineExists(soap, p), 0) || ::soap_put___ns1__ExamineExists(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ExamineExists(struct soap *soap, const char *URL, struct __ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ExamineExists(soap, p), 0) || ::soap_put___ns1__ExamineExists(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ExamineExists(struct soap *soap, const char *URL, struct __ns1__ExamineExists const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ExamineExists(soap, p), 0) || ::soap_put___ns1__ExamineExists(soap, p, "-ns1:ExamineExists", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ExamineExists * SOAP_FMAC4 soap_get___ns1__ExamineExists(struct soap*, struct __ns1__ExamineExists *, const char*, const char*);

inline int soap_read___ns1__ExamineExists(struct soap *soap, struct __ns1__ExamineExists *p)
{
	if (p)
	{	::soap_default___ns1__ExamineExists(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ExamineExists(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ExamineExists(struct soap *soap, const char *URL, struct __ns1__ExamineExists *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ExamineExists(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ExamineExists(struct soap *soap, struct __ns1__ExamineExists *p)
{
	if (::soap_read___ns1__ExamineExists(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__EquipmentProductProcessParam__DEFINED
#define SOAP_TYPE___ns1__EquipmentProductProcessParam__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EquipmentProductProcessParam_(struct soap*, struct __ns1__EquipmentProductProcessParam_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EquipmentProductProcessParam_(struct soap*, const struct __ns1__EquipmentProductProcessParam_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EquipmentProductProcessParam_(struct soap*, const char*, int, const struct __ns1__EquipmentProductProcessParam_ *, const char*);
SOAP_FMAC3 struct __ns1__EquipmentProductProcessParam_ * SOAP_FMAC4 soap_in___ns1__EquipmentProductProcessParam_(struct soap*, const char*, struct __ns1__EquipmentProductProcessParam_ *, const char*);
SOAP_FMAC1 struct __ns1__EquipmentProductProcessParam_ * SOAP_FMAC2 soap_instantiate___ns1__EquipmentProductProcessParam_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EquipmentProductProcessParam_ * soap_new___ns1__EquipmentProductProcessParam_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EquipmentProductProcessParam_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EquipmentProductProcessParam_ * soap_new_req___ns1__EquipmentProductProcessParam_(
	struct soap *soap)
{
	struct __ns1__EquipmentProductProcessParam_ *_p = ::soap_new___ns1__EquipmentProductProcessParam_(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProductProcessParam_(soap, _p);
	}
	return _p;
}

inline struct __ns1__EquipmentProductProcessParam_ * soap_new_set___ns1__EquipmentProductProcessParam_(
	struct soap *soap,
	_ns1__EquipmentProductProcessParam *ns1__EquipmentProductProcessParam_)
{
	struct __ns1__EquipmentProductProcessParam_ *_p = ::soap_new___ns1__EquipmentProductProcessParam_(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProductProcessParam_(soap, _p);
		_p->ns1__EquipmentProductProcessParam_ = ns1__EquipmentProductProcessParam_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EquipmentProductProcessParam_(struct soap*, const struct __ns1__EquipmentProductProcessParam_ *, const char*, const char*);

inline int soap_write___ns1__EquipmentProductProcessParam_(struct soap *soap, struct __ns1__EquipmentProductProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__EquipmentProductProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam_(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EquipmentProductProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProductProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam_(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__EquipmentProductProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProductProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam_(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EquipmentProductProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProductProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam_(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EquipmentProductProcessParam_ * SOAP_FMAC4 soap_get___ns1__EquipmentProductProcessParam_(struct soap*, struct __ns1__EquipmentProductProcessParam_ *, const char*, const char*);

inline int soap_read___ns1__EquipmentProductProcessParam_(struct soap *soap, struct __ns1__EquipmentProductProcessParam_ *p)
{
	if (p)
	{	::soap_default___ns1__EquipmentProductProcessParam_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__EquipmentProductProcessParam_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EquipmentProductProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__EquipmentProductProcessParam_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__EquipmentProductProcessParam_(struct soap *soap, struct __ns1__EquipmentProductProcessParam_ *p)
{
	if (::soap_read___ns1__EquipmentProductProcessParam_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__EquipmentProductProcessParam_DEFINED
#define SOAP_TYPE___ns1__EquipmentProductProcessParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EquipmentProductProcessParam(struct soap*, struct __ns1__EquipmentProductProcessParam *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EquipmentProductProcessParam(struct soap*, const struct __ns1__EquipmentProductProcessParam *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EquipmentProductProcessParam(struct soap*, const char*, int, const struct __ns1__EquipmentProductProcessParam *, const char*);
SOAP_FMAC3 struct __ns1__EquipmentProductProcessParam * SOAP_FMAC4 soap_in___ns1__EquipmentProductProcessParam(struct soap*, const char*, struct __ns1__EquipmentProductProcessParam *, const char*);
SOAP_FMAC1 struct __ns1__EquipmentProductProcessParam * SOAP_FMAC2 soap_instantiate___ns1__EquipmentProductProcessParam(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EquipmentProductProcessParam * soap_new___ns1__EquipmentProductProcessParam(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EquipmentProductProcessParam(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EquipmentProductProcessParam * soap_new_req___ns1__EquipmentProductProcessParam(
	struct soap *soap)
{
	struct __ns1__EquipmentProductProcessParam *_p = ::soap_new___ns1__EquipmentProductProcessParam(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProductProcessParam(soap, _p);
	}
	return _p;
}

inline struct __ns1__EquipmentProductProcessParam * soap_new_set___ns1__EquipmentProductProcessParam(
	struct soap *soap,
	_ns1__EquipmentProductProcessParam *ns1__EquipmentProductProcessParam_)
{
	struct __ns1__EquipmentProductProcessParam *_p = ::soap_new___ns1__EquipmentProductProcessParam(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProductProcessParam(soap, _p);
		_p->ns1__EquipmentProductProcessParam_ = ns1__EquipmentProductProcessParam_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EquipmentProductProcessParam(struct soap*, const struct __ns1__EquipmentProductProcessParam *, const char*, const char*);

inline int soap_write___ns1__EquipmentProductProcessParam(struct soap *soap, struct __ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__EquipmentProductProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProductProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProductProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProductProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProductProcessParam(soap, p, "-ns1:EquipmentProductProcessParam", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EquipmentProductProcessParam * SOAP_FMAC4 soap_get___ns1__EquipmentProductProcessParam(struct soap*, struct __ns1__EquipmentProductProcessParam *, const char*, const char*);

inline int soap_read___ns1__EquipmentProductProcessParam(struct soap *soap, struct __ns1__EquipmentProductProcessParam *p)
{
	if (p)
	{	::soap_default___ns1__EquipmentProductProcessParam(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__EquipmentProductProcessParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EquipmentProductProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProductProcessParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__EquipmentProductProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__EquipmentProductProcessParam(struct soap *soap, struct __ns1__EquipmentProductProcessParam *p)
{
	if (::soap_read___ns1__EquipmentProductProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__EquipmentProcessParam__DEFINED
#define SOAP_TYPE___ns1__EquipmentProcessParam__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EquipmentProcessParam_(struct soap*, struct __ns1__EquipmentProcessParam_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EquipmentProcessParam_(struct soap*, const struct __ns1__EquipmentProcessParam_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EquipmentProcessParam_(struct soap*, const char*, int, const struct __ns1__EquipmentProcessParam_ *, const char*);
SOAP_FMAC3 struct __ns1__EquipmentProcessParam_ * SOAP_FMAC4 soap_in___ns1__EquipmentProcessParam_(struct soap*, const char*, struct __ns1__EquipmentProcessParam_ *, const char*);
SOAP_FMAC1 struct __ns1__EquipmentProcessParam_ * SOAP_FMAC2 soap_instantiate___ns1__EquipmentProcessParam_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EquipmentProcessParam_ * soap_new___ns1__EquipmentProcessParam_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EquipmentProcessParam_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EquipmentProcessParam_ * soap_new_req___ns1__EquipmentProcessParam_(
	struct soap *soap)
{
	struct __ns1__EquipmentProcessParam_ *_p = ::soap_new___ns1__EquipmentProcessParam_(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProcessParam_(soap, _p);
	}
	return _p;
}

inline struct __ns1__EquipmentProcessParam_ * soap_new_set___ns1__EquipmentProcessParam_(
	struct soap *soap,
	_ns1__EquipmentProcessParam *ns1__EquipmentProcessParam_)
{
	struct __ns1__EquipmentProcessParam_ *_p = ::soap_new___ns1__EquipmentProcessParam_(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProcessParam_(soap, _p);
		_p->ns1__EquipmentProcessParam_ = ns1__EquipmentProcessParam_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EquipmentProcessParam_(struct soap*, const struct __ns1__EquipmentProcessParam_ *, const char*, const char*);

inline int soap_write___ns1__EquipmentProcessParam_(struct soap *soap, struct __ns1__EquipmentProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__EquipmentProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam_(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EquipmentProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam_(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__EquipmentProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam_(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EquipmentProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProcessParam_(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam_(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EquipmentProcessParam_ * SOAP_FMAC4 soap_get___ns1__EquipmentProcessParam_(struct soap*, struct __ns1__EquipmentProcessParam_ *, const char*, const char*);

inline int soap_read___ns1__EquipmentProcessParam_(struct soap *soap, struct __ns1__EquipmentProcessParam_ *p)
{
	if (p)
	{	::soap_default___ns1__EquipmentProcessParam_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__EquipmentProcessParam_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EquipmentProcessParam_(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__EquipmentProcessParam_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__EquipmentProcessParam_(struct soap *soap, struct __ns1__EquipmentProcessParam_ *p)
{
	if (::soap_read___ns1__EquipmentProcessParam_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__EquipmentProcessParam_DEFINED
#define SOAP_TYPE___ns1__EquipmentProcessParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EquipmentProcessParam(struct soap*, struct __ns1__EquipmentProcessParam *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EquipmentProcessParam(struct soap*, const struct __ns1__EquipmentProcessParam *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EquipmentProcessParam(struct soap*, const char*, int, const struct __ns1__EquipmentProcessParam *, const char*);
SOAP_FMAC3 struct __ns1__EquipmentProcessParam * SOAP_FMAC4 soap_in___ns1__EquipmentProcessParam(struct soap*, const char*, struct __ns1__EquipmentProcessParam *, const char*);
SOAP_FMAC1 struct __ns1__EquipmentProcessParam * SOAP_FMAC2 soap_instantiate___ns1__EquipmentProcessParam(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EquipmentProcessParam * soap_new___ns1__EquipmentProcessParam(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EquipmentProcessParam(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EquipmentProcessParam * soap_new_req___ns1__EquipmentProcessParam(
	struct soap *soap)
{
	struct __ns1__EquipmentProcessParam *_p = ::soap_new___ns1__EquipmentProcessParam(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProcessParam(soap, _p);
	}
	return _p;
}

inline struct __ns1__EquipmentProcessParam * soap_new_set___ns1__EquipmentProcessParam(
	struct soap *soap,
	_ns1__EquipmentProcessParam *ns1__EquipmentProcessParam_)
{
	struct __ns1__EquipmentProcessParam *_p = ::soap_new___ns1__EquipmentProcessParam(soap);
	if (_p)
	{	::soap_default___ns1__EquipmentProcessParam(soap, _p);
		_p->ns1__EquipmentProcessParam_ = ns1__EquipmentProcessParam_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EquipmentProcessParam(struct soap*, const struct __ns1__EquipmentProcessParam *, const char*, const char*);

inline int soap_write___ns1__EquipmentProcessParam(struct soap *soap, struct __ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__EquipmentProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EquipmentProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__EquipmentProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EquipmentProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__EquipmentProcessParam(soap, p), 0) || ::soap_put___ns1__EquipmentProcessParam(soap, p, "-ns1:EquipmentProcessParam", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EquipmentProcessParam * SOAP_FMAC4 soap_get___ns1__EquipmentProcessParam(struct soap*, struct __ns1__EquipmentProcessParam *, const char*, const char*);

inline int soap_read___ns1__EquipmentProcessParam(struct soap *soap, struct __ns1__EquipmentProcessParam *p)
{
	if (p)
	{	::soap_default___ns1__EquipmentProcessParam(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__EquipmentProcessParam(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EquipmentProcessParam(struct soap *soap, const char *URL, struct __ns1__EquipmentProcessParam *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__EquipmentProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__EquipmentProcessParam(struct soap *soap, struct __ns1__EquipmentProcessParam *p)
{
	if (::soap_read___ns1__EquipmentProcessParam(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__DownReason__DEFINED
#define SOAP_TYPE___ns1__DownReason__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownReason_(struct soap*, struct __ns1__DownReason_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownReason_(struct soap*, const struct __ns1__DownReason_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownReason_(struct soap*, const char*, int, const struct __ns1__DownReason_ *, const char*);
SOAP_FMAC3 struct __ns1__DownReason_ * SOAP_FMAC4 soap_in___ns1__DownReason_(struct soap*, const char*, struct __ns1__DownReason_ *, const char*);
SOAP_FMAC1 struct __ns1__DownReason_ * SOAP_FMAC2 soap_instantiate___ns1__DownReason_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DownReason_ * soap_new___ns1__DownReason_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DownReason_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DownReason_ * soap_new_req___ns1__DownReason_(
	struct soap *soap)
{
	struct __ns1__DownReason_ *_p = ::soap_new___ns1__DownReason_(soap);
	if (_p)
	{	::soap_default___ns1__DownReason_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DownReason_ * soap_new_set___ns1__DownReason_(
	struct soap *soap,
	_ns1__DownReason *ns1__DownReason_)
{
	struct __ns1__DownReason_ *_p = ::soap_new___ns1__DownReason_(soap);
	if (_p)
	{	::soap_default___ns1__DownReason_(soap, _p);
		_p->ns1__DownReason_ = ns1__DownReason_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownReason_(struct soap*, const struct __ns1__DownReason_ *, const char*, const char*);

inline int soap_write___ns1__DownReason_(struct soap *soap, struct __ns1__DownReason_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DownReason_(soap, p), 0) || ::soap_put___ns1__DownReason_(soap, p, "-ns1:DownReason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DownReason_(struct soap *soap, const char *URL, struct __ns1__DownReason_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DownReason_(soap, p), 0) || ::soap_put___ns1__DownReason_(soap, p, "-ns1:DownReason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DownReason_(struct soap *soap, const char *URL, struct __ns1__DownReason_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DownReason_(soap, p), 0) || ::soap_put___ns1__DownReason_(soap, p, "-ns1:DownReason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DownReason_(struct soap *soap, const char *URL, struct __ns1__DownReason_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DownReason_(soap, p), 0) || ::soap_put___ns1__DownReason_(soap, p, "-ns1:DownReason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DownReason_ * SOAP_FMAC4 soap_get___ns1__DownReason_(struct soap*, struct __ns1__DownReason_ *, const char*, const char*);

inline int soap_read___ns1__DownReason_(struct soap *soap, struct __ns1__DownReason_ *p)
{
	if (p)
	{	::soap_default___ns1__DownReason_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DownReason_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DownReason_(struct soap *soap, const char *URL, struct __ns1__DownReason_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DownReason_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__DownReason_(struct soap *soap, struct __ns1__DownReason_ *p)
{
	if (::soap_read___ns1__DownReason_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__DownReason_DEFINED
#define SOAP_TYPE___ns1__DownReason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DownReason(struct soap*, struct __ns1__DownReason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DownReason(struct soap*, const struct __ns1__DownReason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DownReason(struct soap*, const char*, int, const struct __ns1__DownReason *, const char*);
SOAP_FMAC3 struct __ns1__DownReason * SOAP_FMAC4 soap_in___ns1__DownReason(struct soap*, const char*, struct __ns1__DownReason *, const char*);
SOAP_FMAC1 struct __ns1__DownReason * SOAP_FMAC2 soap_instantiate___ns1__DownReason(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DownReason * soap_new___ns1__DownReason(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DownReason(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DownReason * soap_new_req___ns1__DownReason(
	struct soap *soap)
{
	struct __ns1__DownReason *_p = ::soap_new___ns1__DownReason(soap);
	if (_p)
	{	::soap_default___ns1__DownReason(soap, _p);
	}
	return _p;
}

inline struct __ns1__DownReason * soap_new_set___ns1__DownReason(
	struct soap *soap,
	_ns1__DownReason *ns1__DownReason_)
{
	struct __ns1__DownReason *_p = ::soap_new___ns1__DownReason(soap);
	if (_p)
	{	::soap_default___ns1__DownReason(soap, _p);
		_p->ns1__DownReason_ = ns1__DownReason_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DownReason(struct soap*, const struct __ns1__DownReason *, const char*, const char*);

inline int soap_write___ns1__DownReason(struct soap *soap, struct __ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DownReason(soap, p), 0) || ::soap_put___ns1__DownReason(soap, p, "-ns1:DownReason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DownReason(struct soap *soap, const char *URL, struct __ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DownReason(soap, p), 0) || ::soap_put___ns1__DownReason(soap, p, "-ns1:DownReason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DownReason(struct soap *soap, const char *URL, struct __ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DownReason(soap, p), 0) || ::soap_put___ns1__DownReason(soap, p, "-ns1:DownReason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DownReason(struct soap *soap, const char *URL, struct __ns1__DownReason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DownReason(soap, p), 0) || ::soap_put___ns1__DownReason(soap, p, "-ns1:DownReason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DownReason * SOAP_FMAC4 soap_get___ns1__DownReason(struct soap*, struct __ns1__DownReason *, const char*, const char*);

inline int soap_read___ns1__DownReason(struct soap *soap, struct __ns1__DownReason *p)
{
	if (p)
	{	::soap_default___ns1__DownReason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DownReason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DownReason(struct soap *soap, const char *URL, struct __ns1__DownReason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__DownReason(struct soap *soap, struct __ns1__DownReason *p)
{
	if (::soap_read___ns1__DownReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__CCDFileUploadComplete__DEFINED
#define SOAP_TYPE___ns1__CCDFileUploadComplete__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CCDFileUploadComplete_(struct soap*, struct __ns1__CCDFileUploadComplete_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CCDFileUploadComplete_(struct soap*, const struct __ns1__CCDFileUploadComplete_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CCDFileUploadComplete_(struct soap*, const char*, int, const struct __ns1__CCDFileUploadComplete_ *, const char*);
SOAP_FMAC3 struct __ns1__CCDFileUploadComplete_ * SOAP_FMAC4 soap_in___ns1__CCDFileUploadComplete_(struct soap*, const char*, struct __ns1__CCDFileUploadComplete_ *, const char*);
SOAP_FMAC1 struct __ns1__CCDFileUploadComplete_ * SOAP_FMAC2 soap_instantiate___ns1__CCDFileUploadComplete_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CCDFileUploadComplete_ * soap_new___ns1__CCDFileUploadComplete_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CCDFileUploadComplete_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CCDFileUploadComplete_ * soap_new_req___ns1__CCDFileUploadComplete_(
	struct soap *soap)
{
	struct __ns1__CCDFileUploadComplete_ *_p = ::soap_new___ns1__CCDFileUploadComplete_(soap);
	if (_p)
	{	::soap_default___ns1__CCDFileUploadComplete_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CCDFileUploadComplete_ * soap_new_set___ns1__CCDFileUploadComplete_(
	struct soap *soap,
	_ns1__CCDFileUploadComplete *ns1__CCDFileUploadComplete_)
{
	struct __ns1__CCDFileUploadComplete_ *_p = ::soap_new___ns1__CCDFileUploadComplete_(soap);
	if (_p)
	{	::soap_default___ns1__CCDFileUploadComplete_(soap, _p);
		_p->ns1__CCDFileUploadComplete_ = ns1__CCDFileUploadComplete_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CCDFileUploadComplete_(struct soap*, const struct __ns1__CCDFileUploadComplete_ *, const char*, const char*);

inline int soap_write___ns1__CCDFileUploadComplete_(struct soap *soap, struct __ns1__CCDFileUploadComplete_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__CCDFileUploadComplete_(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete_(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CCDFileUploadComplete_(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CCDFileUploadComplete_(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete_(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__CCDFileUploadComplete_(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CCDFileUploadComplete_(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete_(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CCDFileUploadComplete_(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CCDFileUploadComplete_(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete_(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CCDFileUploadComplete_ * SOAP_FMAC4 soap_get___ns1__CCDFileUploadComplete_(struct soap*, struct __ns1__CCDFileUploadComplete_ *, const char*, const char*);

inline int soap_read___ns1__CCDFileUploadComplete_(struct soap *soap, struct __ns1__CCDFileUploadComplete_ *p)
{
	if (p)
	{	::soap_default___ns1__CCDFileUploadComplete_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__CCDFileUploadComplete_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CCDFileUploadComplete_(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__CCDFileUploadComplete_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__CCDFileUploadComplete_(struct soap *soap, struct __ns1__CCDFileUploadComplete_ *p)
{
	if (::soap_read___ns1__CCDFileUploadComplete_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__CCDFileUploadComplete_DEFINED
#define SOAP_TYPE___ns1__CCDFileUploadComplete_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CCDFileUploadComplete(struct soap*, struct __ns1__CCDFileUploadComplete *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CCDFileUploadComplete(struct soap*, const struct __ns1__CCDFileUploadComplete *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CCDFileUploadComplete(struct soap*, const char*, int, const struct __ns1__CCDFileUploadComplete *, const char*);
SOAP_FMAC3 struct __ns1__CCDFileUploadComplete * SOAP_FMAC4 soap_in___ns1__CCDFileUploadComplete(struct soap*, const char*, struct __ns1__CCDFileUploadComplete *, const char*);
SOAP_FMAC1 struct __ns1__CCDFileUploadComplete * SOAP_FMAC2 soap_instantiate___ns1__CCDFileUploadComplete(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CCDFileUploadComplete * soap_new___ns1__CCDFileUploadComplete(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CCDFileUploadComplete(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CCDFileUploadComplete * soap_new_req___ns1__CCDFileUploadComplete(
	struct soap *soap)
{
	struct __ns1__CCDFileUploadComplete *_p = ::soap_new___ns1__CCDFileUploadComplete(soap);
	if (_p)
	{	::soap_default___ns1__CCDFileUploadComplete(soap, _p);
	}
	return _p;
}

inline struct __ns1__CCDFileUploadComplete * soap_new_set___ns1__CCDFileUploadComplete(
	struct soap *soap,
	_ns1__CCDFileUploadComplete *ns1__CCDFileUploadComplete_)
{
	struct __ns1__CCDFileUploadComplete *_p = ::soap_new___ns1__CCDFileUploadComplete(soap);
	if (_p)
	{	::soap_default___ns1__CCDFileUploadComplete(soap, _p);
		_p->ns1__CCDFileUploadComplete_ = ns1__CCDFileUploadComplete_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CCDFileUploadComplete(struct soap*, const struct __ns1__CCDFileUploadComplete *, const char*, const char*);

inline int soap_write___ns1__CCDFileUploadComplete(struct soap *soap, struct __ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__CCDFileUploadComplete(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CCDFileUploadComplete(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CCDFileUploadComplete(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CCDFileUploadComplete(soap, p), 0) || ::soap_put___ns1__CCDFileUploadComplete(soap, p, "-ns1:CCDFileUploadComplete", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CCDFileUploadComplete * SOAP_FMAC4 soap_get___ns1__CCDFileUploadComplete(struct soap*, struct __ns1__CCDFileUploadComplete *, const char*, const char*);

inline int soap_read___ns1__CCDFileUploadComplete(struct soap *soap, struct __ns1__CCDFileUploadComplete *p)
{
	if (p)
	{	::soap_default___ns1__CCDFileUploadComplete(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__CCDFileUploadComplete(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CCDFileUploadComplete(struct soap *soap, const char *URL, struct __ns1__CCDFileUploadComplete *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__CCDFileUploadComplete(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__CCDFileUploadComplete(struct soap *soap, struct __ns1__CCDFileUploadComplete *p)
{
	if (::soap_read___ns1__CCDFileUploadComplete(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BindSFC__DEFINED
#define SOAP_TYPE___ns1__BindSFC__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindSFC_(struct soap*, struct __ns1__BindSFC_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindSFC_(struct soap*, const struct __ns1__BindSFC_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindSFC_(struct soap*, const char*, int, const struct __ns1__BindSFC_ *, const char*);
SOAP_FMAC3 struct __ns1__BindSFC_ * SOAP_FMAC4 soap_in___ns1__BindSFC_(struct soap*, const char*, struct __ns1__BindSFC_ *, const char*);
SOAP_FMAC1 struct __ns1__BindSFC_ * SOAP_FMAC2 soap_instantiate___ns1__BindSFC_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindSFC_ * soap_new___ns1__BindSFC_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindSFC_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindSFC_ * soap_new_req___ns1__BindSFC_(
	struct soap *soap)
{
	struct __ns1__BindSFC_ *_p = ::soap_new___ns1__BindSFC_(soap);
	if (_p)
	{	::soap_default___ns1__BindSFC_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindSFC_ * soap_new_set___ns1__BindSFC_(
	struct soap *soap,
	_ns1__BindSFC *ns1__BindSFC)
{
	struct __ns1__BindSFC_ *_p = ::soap_new___ns1__BindSFC_(soap);
	if (_p)
	{	::soap_default___ns1__BindSFC_(soap, _p);
		_p->ns1__BindSFC = ns1__BindSFC;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindSFC_(struct soap*, const struct __ns1__BindSFC_ *, const char*, const char*);

inline int soap_write___ns1__BindSFC_(struct soap *soap, struct __ns1__BindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BindSFC_(soap, p), 0) || ::soap_put___ns1__BindSFC_(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BindSFC_(struct soap *soap, const char *URL, struct __ns1__BindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindSFC_(soap, p), 0) || ::soap_put___ns1__BindSFC_(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BindSFC_(struct soap *soap, const char *URL, struct __ns1__BindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindSFC_(soap, p), 0) || ::soap_put___ns1__BindSFC_(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BindSFC_(struct soap *soap, const char *URL, struct __ns1__BindSFC_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindSFC_(soap, p), 0) || ::soap_put___ns1__BindSFC_(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindSFC_ * SOAP_FMAC4 soap_get___ns1__BindSFC_(struct soap*, struct __ns1__BindSFC_ *, const char*, const char*);

inline int soap_read___ns1__BindSFC_(struct soap *soap, struct __ns1__BindSFC_ *p)
{
	if (p)
	{	::soap_default___ns1__BindSFC_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BindSFC_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BindSFC_(struct soap *soap, const char *URL, struct __ns1__BindSFC_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BindSFC_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BindSFC_(struct soap *soap, struct __ns1__BindSFC_ *p)
{
	if (::soap_read___ns1__BindSFC_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BindSFC_DEFINED
#define SOAP_TYPE___ns1__BindSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindSFC(struct soap*, struct __ns1__BindSFC *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindSFC(struct soap*, const struct __ns1__BindSFC *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindSFC(struct soap*, const char*, int, const struct __ns1__BindSFC *, const char*);
SOAP_FMAC3 struct __ns1__BindSFC * SOAP_FMAC4 soap_in___ns1__BindSFC(struct soap*, const char*, struct __ns1__BindSFC *, const char*);
SOAP_FMAC1 struct __ns1__BindSFC * SOAP_FMAC2 soap_instantiate___ns1__BindSFC(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindSFC * soap_new___ns1__BindSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindSFC(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindSFC * soap_new_req___ns1__BindSFC(
	struct soap *soap)
{
	struct __ns1__BindSFC *_p = ::soap_new___ns1__BindSFC(soap);
	if (_p)
	{	::soap_default___ns1__BindSFC(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindSFC * soap_new_set___ns1__BindSFC(
	struct soap *soap,
	_ns1__BindSFC *ns1__BindSFC)
{
	struct __ns1__BindSFC *_p = ::soap_new___ns1__BindSFC(soap);
	if (_p)
	{	::soap_default___ns1__BindSFC(soap, _p);
		_p->ns1__BindSFC = ns1__BindSFC;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindSFC(struct soap*, const struct __ns1__BindSFC *, const char*, const char*);

inline int soap_write___ns1__BindSFC(struct soap *soap, struct __ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BindSFC(soap, p), 0) || ::soap_put___ns1__BindSFC(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BindSFC(struct soap *soap, const char *URL, struct __ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindSFC(soap, p), 0) || ::soap_put___ns1__BindSFC(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BindSFC(struct soap *soap, const char *URL, struct __ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindSFC(soap, p), 0) || ::soap_put___ns1__BindSFC(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BindSFC(struct soap *soap, const char *URL, struct __ns1__BindSFC const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindSFC(soap, p), 0) || ::soap_put___ns1__BindSFC(soap, p, "-ns1:BindSFC", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindSFC * SOAP_FMAC4 soap_get___ns1__BindSFC(struct soap*, struct __ns1__BindSFC *, const char*, const char*);

inline int soap_read___ns1__BindSFC(struct soap *soap, struct __ns1__BindSFC *p)
{
	if (p)
	{	::soap_default___ns1__BindSFC(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BindSFC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BindSFC(struct soap *soap, const char *URL, struct __ns1__BindSFC *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BindSFC(struct soap *soap, struct __ns1__BindSFC *p)
{
	if (::soap_read___ns1__BindSFC(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BindContainer__DEFINED
#define SOAP_TYPE___ns1__BindContainer__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindContainer_(struct soap*, struct __ns1__BindContainer_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindContainer_(struct soap*, const struct __ns1__BindContainer_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindContainer_(struct soap*, const char*, int, const struct __ns1__BindContainer_ *, const char*);
SOAP_FMAC3 struct __ns1__BindContainer_ * SOAP_FMAC4 soap_in___ns1__BindContainer_(struct soap*, const char*, struct __ns1__BindContainer_ *, const char*);
SOAP_FMAC1 struct __ns1__BindContainer_ * SOAP_FMAC2 soap_instantiate___ns1__BindContainer_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindContainer_ * soap_new___ns1__BindContainer_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindContainer_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindContainer_ * soap_new_req___ns1__BindContainer_(
	struct soap *soap)
{
	struct __ns1__BindContainer_ *_p = ::soap_new___ns1__BindContainer_(soap);
	if (_p)
	{	::soap_default___ns1__BindContainer_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindContainer_ * soap_new_set___ns1__BindContainer_(
	struct soap *soap,
	_ns1__BindContainer *ns1__BindContainer_)
{
	struct __ns1__BindContainer_ *_p = ::soap_new___ns1__BindContainer_(soap);
	if (_p)
	{	::soap_default___ns1__BindContainer_(soap, _p);
		_p->ns1__BindContainer_ = ns1__BindContainer_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindContainer_(struct soap*, const struct __ns1__BindContainer_ *, const char*, const char*);

inline int soap_write___ns1__BindContainer_(struct soap *soap, struct __ns1__BindContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BindContainer_(soap, p), 0) || ::soap_put___ns1__BindContainer_(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BindContainer_(struct soap *soap, const char *URL, struct __ns1__BindContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindContainer_(soap, p), 0) || ::soap_put___ns1__BindContainer_(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BindContainer_(struct soap *soap, const char *URL, struct __ns1__BindContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindContainer_(soap, p), 0) || ::soap_put___ns1__BindContainer_(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BindContainer_(struct soap *soap, const char *URL, struct __ns1__BindContainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindContainer_(soap, p), 0) || ::soap_put___ns1__BindContainer_(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindContainer_ * SOAP_FMAC4 soap_get___ns1__BindContainer_(struct soap*, struct __ns1__BindContainer_ *, const char*, const char*);

inline int soap_read___ns1__BindContainer_(struct soap *soap, struct __ns1__BindContainer_ *p)
{
	if (p)
	{	::soap_default___ns1__BindContainer_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BindContainer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BindContainer_(struct soap *soap, const char *URL, struct __ns1__BindContainer_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BindContainer_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BindContainer_(struct soap *soap, struct __ns1__BindContainer_ *p)
{
	if (::soap_read___ns1__BindContainer_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__BindContainer_DEFINED
#define SOAP_TYPE___ns1__BindContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindContainer(struct soap*, struct __ns1__BindContainer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindContainer(struct soap*, const struct __ns1__BindContainer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindContainer(struct soap*, const char*, int, const struct __ns1__BindContainer *, const char*);
SOAP_FMAC3 struct __ns1__BindContainer * SOAP_FMAC4 soap_in___ns1__BindContainer(struct soap*, const char*, struct __ns1__BindContainer *, const char*);
SOAP_FMAC1 struct __ns1__BindContainer * SOAP_FMAC2 soap_instantiate___ns1__BindContainer(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindContainer * soap_new___ns1__BindContainer(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindContainer(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindContainer * soap_new_req___ns1__BindContainer(
	struct soap *soap)
{
	struct __ns1__BindContainer *_p = ::soap_new___ns1__BindContainer(soap);
	if (_p)
	{	::soap_default___ns1__BindContainer(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindContainer * soap_new_set___ns1__BindContainer(
	struct soap *soap,
	_ns1__BindContainer *ns1__BindContainer_)
{
	struct __ns1__BindContainer *_p = ::soap_new___ns1__BindContainer(soap);
	if (_p)
	{	::soap_default___ns1__BindContainer(soap, _p);
		_p->ns1__BindContainer_ = ns1__BindContainer_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindContainer(struct soap*, const struct __ns1__BindContainer *, const char*, const char*);

inline int soap_write___ns1__BindContainer(struct soap *soap, struct __ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__BindContainer(soap, p), 0) || ::soap_put___ns1__BindContainer(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BindContainer(struct soap *soap, const char *URL, struct __ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindContainer(soap, p), 0) || ::soap_put___ns1__BindContainer(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__BindContainer(struct soap *soap, const char *URL, struct __ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindContainer(soap, p), 0) || ::soap_put___ns1__BindContainer(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BindContainer(struct soap *soap, const char *URL, struct __ns1__BindContainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__BindContainer(soap, p), 0) || ::soap_put___ns1__BindContainer(soap, p, "-ns1:BindContainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindContainer * SOAP_FMAC4 soap_get___ns1__BindContainer(struct soap*, struct __ns1__BindContainer *, const char*, const char*);

inline int soap_read___ns1__BindContainer(struct soap *soap, struct __ns1__BindContainer *p)
{
	if (p)
	{	::soap_default___ns1__BindContainer(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__BindContainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BindContainer(struct soap *soap, const char *URL, struct __ns1__BindContainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__BindContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__BindContainer(struct soap *soap, struct __ns1__BindContainer *p)
{
	if (::soap_read___ns1__BindContainer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Alarm__DEFINED
#define SOAP_TYPE___ns1__Alarm__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Alarm_(struct soap*, struct __ns1__Alarm_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Alarm_(struct soap*, const struct __ns1__Alarm_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Alarm_(struct soap*, const char*, int, const struct __ns1__Alarm_ *, const char*);
SOAP_FMAC3 struct __ns1__Alarm_ * SOAP_FMAC4 soap_in___ns1__Alarm_(struct soap*, const char*, struct __ns1__Alarm_ *, const char*);
SOAP_FMAC1 struct __ns1__Alarm_ * SOAP_FMAC2 soap_instantiate___ns1__Alarm_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Alarm_ * soap_new___ns1__Alarm_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Alarm_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Alarm_ * soap_new_req___ns1__Alarm_(
	struct soap *soap)
{
	struct __ns1__Alarm_ *_p = ::soap_new___ns1__Alarm_(soap);
	if (_p)
	{	::soap_default___ns1__Alarm_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Alarm_ * soap_new_set___ns1__Alarm_(
	struct soap *soap,
	_ns1__Alarm *ns1__Alarm_)
{
	struct __ns1__Alarm_ *_p = ::soap_new___ns1__Alarm_(soap);
	if (_p)
	{	::soap_default___ns1__Alarm_(soap, _p);
		_p->ns1__Alarm_ = ns1__Alarm_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Alarm_(struct soap*, const struct __ns1__Alarm_ *, const char*, const char*);

inline int soap_write___ns1__Alarm_(struct soap *soap, struct __ns1__Alarm_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Alarm_(soap, p), 0) || ::soap_put___ns1__Alarm_(soap, p, "-ns1:Alarm", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Alarm_(struct soap *soap, const char *URL, struct __ns1__Alarm_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Alarm_(soap, p), 0) || ::soap_put___ns1__Alarm_(soap, p, "-ns1:Alarm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Alarm_(struct soap *soap, const char *URL, struct __ns1__Alarm_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Alarm_(soap, p), 0) || ::soap_put___ns1__Alarm_(soap, p, "-ns1:Alarm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Alarm_(struct soap *soap, const char *URL, struct __ns1__Alarm_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Alarm_(soap, p), 0) || ::soap_put___ns1__Alarm_(soap, p, "-ns1:Alarm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Alarm_ * SOAP_FMAC4 soap_get___ns1__Alarm_(struct soap*, struct __ns1__Alarm_ *, const char*, const char*);

inline int soap_read___ns1__Alarm_(struct soap *soap, struct __ns1__Alarm_ *p)
{
	if (p)
	{	::soap_default___ns1__Alarm_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Alarm_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Alarm_(struct soap *soap, const char *URL, struct __ns1__Alarm_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Alarm_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Alarm_(struct soap *soap, struct __ns1__Alarm_ *p)
{
	if (::soap_read___ns1__Alarm_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__Alarm_DEFINED
#define SOAP_TYPE___ns1__Alarm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Alarm(struct soap*, struct __ns1__Alarm *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Alarm(struct soap*, const struct __ns1__Alarm *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Alarm(struct soap*, const char*, int, const struct __ns1__Alarm *, const char*);
SOAP_FMAC3 struct __ns1__Alarm * SOAP_FMAC4 soap_in___ns1__Alarm(struct soap*, const char*, struct __ns1__Alarm *, const char*);
SOAP_FMAC1 struct __ns1__Alarm * SOAP_FMAC2 soap_instantiate___ns1__Alarm(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Alarm * soap_new___ns1__Alarm(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Alarm(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Alarm * soap_new_req___ns1__Alarm(
	struct soap *soap)
{
	struct __ns1__Alarm *_p = ::soap_new___ns1__Alarm(soap);
	if (_p)
	{	::soap_default___ns1__Alarm(soap, _p);
	}
	return _p;
}

inline struct __ns1__Alarm * soap_new_set___ns1__Alarm(
	struct soap *soap,
	_ns1__Alarm *ns1__Alarm_)
{
	struct __ns1__Alarm *_p = ::soap_new___ns1__Alarm(soap);
	if (_p)
	{	::soap_default___ns1__Alarm(soap, _p);
		_p->ns1__Alarm_ = ns1__Alarm_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Alarm(struct soap*, const struct __ns1__Alarm *, const char*, const char*);

inline int soap_write___ns1__Alarm(struct soap *soap, struct __ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Alarm(soap, p), 0) || ::soap_put___ns1__Alarm(soap, p, "-ns1:Alarm", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Alarm(struct soap *soap, const char *URL, struct __ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Alarm(soap, p), 0) || ::soap_put___ns1__Alarm(soap, p, "-ns1:Alarm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Alarm(struct soap *soap, const char *URL, struct __ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Alarm(soap, p), 0) || ::soap_put___ns1__Alarm(soap, p, "-ns1:Alarm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Alarm(struct soap *soap, const char *URL, struct __ns1__Alarm const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Alarm(soap, p), 0) || ::soap_put___ns1__Alarm(soap, p, "-ns1:Alarm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Alarm * SOAP_FMAC4 soap_get___ns1__Alarm(struct soap*, struct __ns1__Alarm *, const char*, const char*);

inline int soap_read___ns1__Alarm(struct soap *soap, struct __ns1__Alarm *p)
{
	if (p)
	{	::soap_default___ns1__Alarm(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Alarm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Alarm(struct soap *soap, const char *URL, struct __ns1__Alarm *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Alarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Alarm(struct soap *soap, struct __ns1__Alarm *p)
{
	if (::soap_read___ns1__Alarm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	ns1__LoginSoapHeader *ns1__LoginSoapHeader_)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->ns1__LoginSoapHeader_ = ns1__LoginSoapHeader_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UnBindSFC_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UnBindSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UnBindSFC(struct soap*, _ns1__UnBindSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UnBindSFC(struct soap*, const char *, int, _ns1__UnBindSFC *const*, const char *);
SOAP_FMAC3 _ns1__UnBindSFC ** SOAP_FMAC4 soap_in_PointerTo_ns1__UnBindSFC(struct soap*, const char*, _ns1__UnBindSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UnBindSFC(struct soap*, _ns1__UnBindSFC *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UnBindSFC ** SOAP_FMAC4 soap_get_PointerTo_ns1__UnBindSFC(struct soap*, _ns1__UnBindSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ToolLife_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ToolLife_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ToolLife(struct soap*, _ns1__ToolLife *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ToolLife(struct soap*, const char *, int, _ns1__ToolLife *const*, const char *);
SOAP_FMAC3 _ns1__ToolLife ** SOAP_FMAC4 soap_in_PointerTo_ns1__ToolLife(struct soap*, const char*, _ns1__ToolLife **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ToolLife(struct soap*, _ns1__ToolLife *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ToolLife ** SOAP_FMAC4 soap_get_PointerTo_ns1__ToolLife(struct soap*, _ns1__ToolLife **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ToolBind_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ToolBind_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ToolBind(struct soap*, _ns1__ToolBind *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ToolBind(struct soap*, const char *, int, _ns1__ToolBind *const*, const char *);
SOAP_FMAC3 _ns1__ToolBind ** SOAP_FMAC4 soap_in_PointerTo_ns1__ToolBind(struct soap*, const char*, _ns1__ToolBind **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ToolBind(struct soap*, _ns1__ToolBind *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ToolBind ** SOAP_FMAC4 soap_get_PointerTo_ns1__ToolBind(struct soap*, _ns1__ToolBind **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__State_DEFINED
#define SOAP_TYPE_PointerTo_ns1__State_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__State(struct soap*, _ns1__State *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__State(struct soap*, const char *, int, _ns1__State *const*, const char *);
SOAP_FMAC3 _ns1__State ** SOAP_FMAC4 soap_in_PointerTo_ns1__State(struct soap*, const char*, _ns1__State **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__State(struct soap*, _ns1__State *const*, const char*, const char*);
SOAP_FMAC3 _ns1__State ** SOAP_FMAC4 soap_get_PointerTo_ns1__State(struct soap*, _ns1__State **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RecipeVersionExamine_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RecipeVersionExamine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RecipeVersionExamine(struct soap*, _ns1__RecipeVersionExamine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RecipeVersionExamine(struct soap*, const char *, int, _ns1__RecipeVersionExamine *const*, const char *);
SOAP_FMAC3 _ns1__RecipeVersionExamine ** SOAP_FMAC4 soap_in_PointerTo_ns1__RecipeVersionExamine(struct soap*, const char*, _ns1__RecipeVersionExamine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RecipeVersionExamine(struct soap*, _ns1__RecipeVersionExamine *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RecipeVersionExamine ** SOAP_FMAC4 soap_get_PointerTo_ns1__RecipeVersionExamine(struct soap*, _ns1__RecipeVersionExamine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRecipeList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRecipeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRecipeList(struct soap*, _ns1__GetRecipeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRecipeList(struct soap*, const char *, int, _ns1__GetRecipeList *const*, const char *);
SOAP_FMAC3 _ns1__GetRecipeList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRecipeList(struct soap*, const char*, _ns1__GetRecipeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRecipeList(struct soap*, _ns1__GetRecipeList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRecipeList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRecipeList(struct soap*, _ns1__GetRecipeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRecipe_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRecipe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRecipe(struct soap*, _ns1__GetRecipe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRecipe(struct soap*, const char *, int, _ns1__GetRecipe *const*, const char *);
SOAP_FMAC3 _ns1__GetRecipe ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRecipe(struct soap*, const char*, _ns1__GetRecipe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRecipe(struct soap*, _ns1__GetRecipe *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRecipe ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRecipe(struct soap*, _ns1__GetRecipe **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Recipe_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Recipe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Recipe(struct soap*, _ns1__Recipe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Recipe(struct soap*, const char *, int, _ns1__Recipe *const*, const char *);
SOAP_FMAC3 _ns1__Recipe ** SOAP_FMAC4 soap_in_PointerTo_ns1__Recipe(struct soap*, const char*, _ns1__Recipe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Recipe(struct soap*, _ns1__Recipe *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Recipe ** SOAP_FMAC4 soap_get_PointerTo_ns1__Recipe(struct soap*, _ns1__Recipe **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OutboundMore_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OutboundMore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OutboundMore(struct soap*, _ns1__OutboundMore *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OutboundMore(struct soap*, const char *, int, _ns1__OutboundMore *const*, const char *);
SOAP_FMAC3 _ns1__OutboundMore ** SOAP_FMAC4 soap_in_PointerTo_ns1__OutboundMore(struct soap*, const char*, _ns1__OutboundMore **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OutboundMore(struct soap*, _ns1__OutboundMore *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OutboundMore ** SOAP_FMAC4 soap_get_PointerTo_ns1__OutboundMore(struct soap*, _ns1__OutboundMore **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OutboundInSFCOutputQty_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OutboundInSFCOutputQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OutboundInSFCOutputQty(struct soap*, _ns1__OutboundInSFCOutputQty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OutboundInSFCOutputQty(struct soap*, const char *, int, _ns1__OutboundInSFCOutputQty *const*, const char *);
SOAP_FMAC3 _ns1__OutboundInSFCOutputQty ** SOAP_FMAC4 soap_in_PointerTo_ns1__OutboundInSFCOutputQty(struct soap*, const char*, _ns1__OutboundInSFCOutputQty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OutboundInSFCOutputQty(struct soap*, _ns1__OutboundInSFCOutputQty *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OutboundInSFCOutputQty ** SOAP_FMAC4 soap_get_PointerTo_ns1__OutboundInSFCOutputQty(struct soap*, _ns1__OutboundInSFCOutputQty **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OutboundInLaminating_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OutboundInLaminating_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OutboundInLaminating(struct soap*, _ns1__OutboundInLaminating *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OutboundInLaminating(struct soap*, const char *, int, _ns1__OutboundInLaminating *const*, const char *);
SOAP_FMAC3 _ns1__OutboundInLaminating ** SOAP_FMAC4 soap_in_PointerTo_ns1__OutboundInLaminating(struct soap*, const char*, _ns1__OutboundInLaminating **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OutboundInLaminating(struct soap*, _ns1__OutboundInLaminating *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OutboundInLaminating ** SOAP_FMAC4 soap_get_PointerTo_ns1__OutboundInLaminating(struct soap*, _ns1__OutboundInLaminating **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Outbound_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Outbound_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Outbound(struct soap*, _ns1__Outbound *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Outbound(struct soap*, const char *, int, _ns1__Outbound *const*, const char *);
SOAP_FMAC3 _ns1__Outbound ** SOAP_FMAC4 soap_in_PointerTo_ns1__Outbound(struct soap*, const char*, _ns1__Outbound **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Outbound(struct soap*, _ns1__Outbound *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Outbound ** SOAP_FMAC4 soap_get_PointerTo_ns1__Outbound(struct soap*, _ns1__Outbound **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OperatorLogin_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OperatorLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OperatorLogin(struct soap*, _ns1__OperatorLogin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OperatorLogin(struct soap*, const char *, int, _ns1__OperatorLogin *const*, const char *);
SOAP_FMAC3 _ns1__OperatorLogin ** SOAP_FMAC4 soap_in_PointerTo_ns1__OperatorLogin(struct soap*, const char*, _ns1__OperatorLogin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OperatorLogin(struct soap*, _ns1__OperatorLogin *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OperatorLogin ** SOAP_FMAC4 soap_get_PointerTo_ns1__OperatorLogin(struct soap*, _ns1__OperatorLogin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InboundMore_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InboundMore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InboundMore(struct soap*, _ns1__InboundMore *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InboundMore(struct soap*, const char *, int, _ns1__InboundMore *const*, const char *);
SOAP_FMAC3 _ns1__InboundMore ** SOAP_FMAC4 soap_in_PointerTo_ns1__InboundMore(struct soap*, const char*, _ns1__InboundMore **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InboundMore(struct soap*, _ns1__InboundMore *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InboundMore ** SOAP_FMAC4 soap_get_PointerTo_ns1__InboundMore(struct soap*, _ns1__InboundMore **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InboundInTwoInjection_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InboundInTwoInjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InboundInTwoInjection(struct soap*, _ns1__InboundInTwoInjection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InboundInTwoInjection(struct soap*, const char *, int, _ns1__InboundInTwoInjection *const*, const char *);
SOAP_FMAC3 _ns1__InboundInTwoInjection ** SOAP_FMAC4 soap_in_PointerTo_ns1__InboundInTwoInjection(struct soap*, const char*, _ns1__InboundInTwoInjection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InboundInTwoInjection(struct soap*, _ns1__InboundInTwoInjection *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InboundInTwoInjection ** SOAP_FMAC4 soap_get_PointerTo_ns1__InboundInTwoInjection(struct soap*, _ns1__InboundInTwoInjection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InboundInSFCContainer_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InboundInSFCContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InboundInSFCContainer(struct soap*, _ns1__InboundInSFCContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InboundInSFCContainer(struct soap*, const char *, int, _ns1__InboundInSFCContainer *const*, const char *);
SOAP_FMAC3 _ns1__InboundInSFCContainer ** SOAP_FMAC4 soap_in_PointerTo_ns1__InboundInSFCContainer(struct soap*, const char*, _ns1__InboundInSFCContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InboundInSFCContainer(struct soap*, _ns1__InboundInSFCContainer *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InboundInSFCContainer ** SOAP_FMAC4 soap_get_PointerTo_ns1__InboundInSFCContainer(struct soap*, _ns1__InboundInSFCContainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InboundInContainer_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InboundInContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InboundInContainer(struct soap*, _ns1__InboundInContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InboundInContainer(struct soap*, const char *, int, _ns1__InboundInContainer *const*, const char *);
SOAP_FMAC3 _ns1__InboundInContainer ** SOAP_FMAC4 soap_in_PointerTo_ns1__InboundInContainer(struct soap*, const char*, _ns1__InboundInContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InboundInContainer(struct soap*, _ns1__InboundInContainer *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InboundInContainer ** SOAP_FMAC4 soap_get_PointerTo_ns1__InboundInContainer(struct soap*, _ns1__InboundInContainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Inbound_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Inbound_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Inbound(struct soap*, _ns1__Inbound *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Inbound(struct soap*, const char *, int, _ns1__Inbound *const*, const char *);
SOAP_FMAC3 _ns1__Inbound ** SOAP_FMAC4 soap_in_PointerTo_ns1__Inbound(struct soap*, const char*, _ns1__Inbound **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Inbound(struct soap*, _ns1__Inbound *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Inbound ** SOAP_FMAC4 soap_get_PointerTo_ns1__Inbound(struct soap*, _ns1__Inbound **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Heartbeat_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Heartbeat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Heartbeat(struct soap*, _ns1__Heartbeat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Heartbeat(struct soap*, const char *, int, _ns1__Heartbeat *const*, const char *);
SOAP_FMAC3 _ns1__Heartbeat ** SOAP_FMAC4 soap_in_PointerTo_ns1__Heartbeat(struct soap*, const char*, _ns1__Heartbeat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Heartbeat(struct soap*, _ns1__Heartbeat *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Heartbeat ** SOAP_FMAC4 soap_get_PointerTo_ns1__Heartbeat(struct soap*, _ns1__Heartbeat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GenerateCellSFC_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GenerateCellSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GenerateCellSFC(struct soap*, _ns1__GenerateCellSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GenerateCellSFC(struct soap*, const char *, int, _ns1__GenerateCellSFC *const*, const char *);
SOAP_FMAC3 _ns1__GenerateCellSFC ** SOAP_FMAC4 soap_in_PointerTo_ns1__GenerateCellSFC(struct soap*, const char*, _ns1__GenerateCellSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GenerateCellSFC(struct soap*, _ns1__GenerateCellSFC *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GenerateCellSFC ** SOAP_FMAC4 soap_get_PointerTo_ns1__GenerateCellSFC(struct soap*, _ns1__GenerateCellSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__FillingData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__FillingData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__FillingData(struct soap*, _ns1__FillingData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__FillingData(struct soap*, const char *, int, _ns1__FillingData *const*, const char *);
SOAP_FMAC3 _ns1__FillingData ** SOAP_FMAC4 soap_in_PointerTo_ns1__FillingData(struct soap*, const char*, _ns1__FillingData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__FillingData(struct soap*, _ns1__FillingData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__FillingData ** SOAP_FMAC4 soap_get_PointerTo_ns1__FillingData(struct soap*, _ns1__FillingData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__FeedingDJInLaminating_DEFINED
#define SOAP_TYPE_PointerTo_ns1__FeedingDJInLaminating_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__FeedingDJInLaminating(struct soap*, _ns1__FeedingDJInLaminating *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__FeedingDJInLaminating(struct soap*, const char *, int, _ns1__FeedingDJInLaminating *const*, const char *);
SOAP_FMAC3 _ns1__FeedingDJInLaminating ** SOAP_FMAC4 soap_in_PointerTo_ns1__FeedingDJInLaminating(struct soap*, const char*, _ns1__FeedingDJInLaminating **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__FeedingDJInLaminating(struct soap*, _ns1__FeedingDJInLaminating *const*, const char*, const char*);
SOAP_FMAC3 _ns1__FeedingDJInLaminating ** SOAP_FMAC4 soap_get_PointerTo_ns1__FeedingDJInLaminating(struct soap*, _ns1__FeedingDJInLaminating **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Feeding_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Feeding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Feeding(struct soap*, _ns1__Feeding *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Feeding(struct soap*, const char *, int, _ns1__Feeding *const*, const char *);
SOAP_FMAC3 _ns1__Feeding ** SOAP_FMAC4 soap_in_PointerTo_ns1__Feeding(struct soap*, const char*, _ns1__Feeding **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Feeding(struct soap*, _ns1__Feeding *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Feeding ** SOAP_FMAC4 soap_get_PointerTo_ns1__Feeding(struct soap*, _ns1__Feeding **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ExamineExists_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ExamineExists_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExamineExists(struct soap*, _ns1__ExamineExists *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExamineExists(struct soap*, const char *, int, _ns1__ExamineExists *const*, const char *);
SOAP_FMAC3 _ns1__ExamineExists ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExamineExists(struct soap*, const char*, _ns1__ExamineExists **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExamineExists(struct soap*, _ns1__ExamineExists *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ExamineExists ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExamineExists(struct soap*, _ns1__ExamineExists **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EquipmentProductProcessParam_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EquipmentProductProcessParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EquipmentProductProcessParam(struct soap*, _ns1__EquipmentProductProcessParam *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EquipmentProductProcessParam(struct soap*, const char *, int, _ns1__EquipmentProductProcessParam *const*, const char *);
SOAP_FMAC3 _ns1__EquipmentProductProcessParam ** SOAP_FMAC4 soap_in_PointerTo_ns1__EquipmentProductProcessParam(struct soap*, const char*, _ns1__EquipmentProductProcessParam **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EquipmentProductProcessParam(struct soap*, _ns1__EquipmentProductProcessParam *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EquipmentProductProcessParam ** SOAP_FMAC4 soap_get_PointerTo_ns1__EquipmentProductProcessParam(struct soap*, _ns1__EquipmentProductProcessParam **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EquipmentProcessParam_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EquipmentProcessParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EquipmentProcessParam(struct soap*, _ns1__EquipmentProcessParam *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EquipmentProcessParam(struct soap*, const char *, int, _ns1__EquipmentProcessParam *const*, const char *);
SOAP_FMAC3 _ns1__EquipmentProcessParam ** SOAP_FMAC4 soap_in_PointerTo_ns1__EquipmentProcessParam(struct soap*, const char*, _ns1__EquipmentProcessParam **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EquipmentProcessParam(struct soap*, _ns1__EquipmentProcessParam *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EquipmentProcessParam ** SOAP_FMAC4 soap_get_PointerTo_ns1__EquipmentProcessParam(struct soap*, _ns1__EquipmentProcessParam **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DownReason_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DownReason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DownReason(struct soap*, _ns1__DownReason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DownReason(struct soap*, const char *, int, _ns1__DownReason *const*, const char *);
SOAP_FMAC3 _ns1__DownReason ** SOAP_FMAC4 soap_in_PointerTo_ns1__DownReason(struct soap*, const char*, _ns1__DownReason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DownReason(struct soap*, _ns1__DownReason *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DownReason ** SOAP_FMAC4 soap_get_PointerTo_ns1__DownReason(struct soap*, _ns1__DownReason **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CCDFileUploadComplete_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CCDFileUploadComplete_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CCDFileUploadComplete(struct soap*, _ns1__CCDFileUploadComplete *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CCDFileUploadComplete(struct soap*, const char *, int, _ns1__CCDFileUploadComplete *const*, const char *);
SOAP_FMAC3 _ns1__CCDFileUploadComplete ** SOAP_FMAC4 soap_in_PointerTo_ns1__CCDFileUploadComplete(struct soap*, const char*, _ns1__CCDFileUploadComplete **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CCDFileUploadComplete(struct soap*, _ns1__CCDFileUploadComplete *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CCDFileUploadComplete ** SOAP_FMAC4 soap_get_PointerTo_ns1__CCDFileUploadComplete(struct soap*, _ns1__CCDFileUploadComplete **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BindSFC_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BindSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BindSFC(struct soap*, _ns1__BindSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BindSFC(struct soap*, const char *, int, _ns1__BindSFC *const*, const char *);
SOAP_FMAC3 _ns1__BindSFC ** SOAP_FMAC4 soap_in_PointerTo_ns1__BindSFC(struct soap*, const char*, _ns1__BindSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BindSFC(struct soap*, _ns1__BindSFC *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BindSFC ** SOAP_FMAC4 soap_get_PointerTo_ns1__BindSFC(struct soap*, _ns1__BindSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BindContainer_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BindContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BindContainer(struct soap*, _ns1__BindContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BindContainer(struct soap*, const char *, int, _ns1__BindContainer *const*, const char *);
SOAP_FMAC3 _ns1__BindContainer ** SOAP_FMAC4 soap_in_PointerTo_ns1__BindContainer(struct soap*, const char*, _ns1__BindContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BindContainer(struct soap*, _ns1__BindContainer *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BindContainer ** SOAP_FMAC4 soap_get_PointerTo_ns1__BindContainer(struct soap*, _ns1__BindContainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Alarm_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Alarm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Alarm(struct soap*, _ns1__Alarm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Alarm(struct soap*, const char *, int, _ns1__Alarm *const*, const char *);
SOAP_FMAC3 _ns1__Alarm ** SOAP_FMAC4 soap_in_PointerTo_ns1__Alarm(struct soap*, const char*, _ns1__Alarm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Alarm(struct soap*, _ns1__Alarm *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Alarm ** SOAP_FMAC4 soap_get_PointerTo_ns1__Alarm(struct soap*, _ns1__Alarm **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LoginSoapHeader_DEFINED
#define SOAP_TYPE_PointerTons1__LoginSoapHeader_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LoginSoapHeader(struct soap*, ns1__LoginSoapHeader *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LoginSoapHeader(struct soap*, const char *, int, ns1__LoginSoapHeader *const*, const char *);
SOAP_FMAC3 ns1__LoginSoapHeader ** SOAP_FMAC4 soap_in_PointerTons1__LoginSoapHeader(struct soap*, const char*, ns1__LoginSoapHeader **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LoginSoapHeader(struct soap*, ns1__LoginSoapHeader *const*, const char*, const char*);
SOAP_FMAC3 ns1__LoginSoapHeader ** SOAP_FMAC4 soap_get_PointerTons1__LoginSoapHeader(struct soap*, ns1__LoginSoapHeader **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfRecipeListGetForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfRecipeListGetForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfRecipeListGetForEqu(struct soap*, ns1__ArrayOfRecipeListGetForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfRecipeListGetForEqu(struct soap*, const char *, int, ns1__ArrayOfRecipeListGetForEqu *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfRecipeListGetForEqu ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfRecipeListGetForEqu(struct soap*, const char*, ns1__ArrayOfRecipeListGetForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfRecipeListGetForEqu(struct soap*, ns1__ArrayOfRecipeListGetForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfRecipeListGetForEqu ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfRecipeListGetForEqu(struct soap*, ns1__ArrayOfRecipeListGetForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeGetForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeGetForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeGetForEqu(struct soap*, ns1__RecipeGetForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeGetForEqu(struct soap*, const char *, int, ns1__RecipeGetForEqu *const*, const char *);
SOAP_FMAC3 ns1__RecipeGetForEqu ** SOAP_FMAC4 soap_in_PointerTons1__RecipeGetForEqu(struct soap*, const char*, ns1__RecipeGetForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeGetForEqu(struct soap*, ns1__RecipeGetForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeGetForEqu ** SOAP_FMAC4 soap_get_PointerTons1__RecipeGetForEqu(struct soap*, ns1__RecipeGetForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfRecipeParam_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfRecipeParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfRecipeParam(struct soap*, ns1__ArrayOfRecipeParam *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfRecipeParam(struct soap*, const char *, int, ns1__ArrayOfRecipeParam *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfRecipeParam ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfRecipeParam(struct soap*, const char*, ns1__ArrayOfRecipeParam **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfRecipeParam(struct soap*, ns1__ArrayOfRecipeParam *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfRecipeParam ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfRecipeParam(struct soap*, ns1__ArrayOfRecipeParam **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfOutboundSFC_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfOutboundSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfOutboundSFC(struct soap*, ns1__ArrayOfOutboundSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfOutboundSFC(struct soap*, const char *, int, ns1__ArrayOfOutboundSFC *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfOutboundSFC ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfOutboundSFC(struct soap*, const char*, ns1__ArrayOfOutboundSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfOutboundSFC(struct soap*, ns1__ArrayOfOutboundSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfOutboundSFC ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfOutboundSFC(struct soap*, ns1__ArrayOfOutboundSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InboundInTwoInjectionForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__InboundInTwoInjectionForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InboundInTwoInjectionForEqu(struct soap*, ns1__InboundInTwoInjectionForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InboundInTwoInjectionForEqu(struct soap*, const char *, int, ns1__InboundInTwoInjectionForEqu *const*, const char *);
SOAP_FMAC3 ns1__InboundInTwoInjectionForEqu ** SOAP_FMAC4 soap_in_PointerTons1__InboundInTwoInjectionForEqu(struct soap*, const char*, ns1__InboundInTwoInjectionForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InboundInTwoInjectionForEqu(struct soap*, ns1__InboundInTwoInjectionForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__InboundInTwoInjectionForEqu ** SOAP_FMAC4 soap_get_PointerTons1__InboundInTwoInjectionForEqu(struct soap*, ns1__InboundInTwoInjectionForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::wstring *const*, const char*, const char*);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::wstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfApiResponseSFCForScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfApiResponseSFCForScada(struct soap*, ns1__ArrayOfApiResponseSFCForScada *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfApiResponseSFCForScada(struct soap*, const char *, int, ns1__ArrayOfApiResponseSFCForScada *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfApiResponseSFCForScada ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfApiResponseSFCForScada(struct soap*, const char*, ns1__ArrayOfApiResponseSFCForScada **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfApiResponseSFCForScada(struct soap*, ns1__ArrayOfApiResponseSFCForScada *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfApiResponseSFCForScada ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfApiResponseSFCForScada(struct soap*, ns1__ArrayOfApiResponseSFCForScada **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfEquipmentProductProcessParamSFC_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfEquipmentProductProcessParamSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, ns1__ArrayOfEquipmentProductProcessParamSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, const char *, int, ns1__ArrayOfEquipmentProductProcessParamSFC *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfEquipmentProductProcessParamSFC ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, const char*, ns1__ArrayOfEquipmentProductProcessParamSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, ns1__ArrayOfEquipmentProductProcessParamSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfEquipmentProductProcessParamSFC ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfEquipmentProductProcessParamSFC(struct soap*, ns1__ArrayOfEquipmentProductProcessParamSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfCCDFileUploadCompleteSFC_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfCCDFileUploadCompleteSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, ns1__ArrayOfCCDFileUploadCompleteSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, const char *, int, ns1__ArrayOfCCDFileUploadCompleteSFC *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfCCDFileUploadCompleteSFC ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, const char*, ns1__ArrayOfCCDFileUploadCompleteSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, ns1__ArrayOfCCDFileUploadCompleteSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfCCDFileUploadCompleteSFC ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfCCDFileUploadCompleteSFC(struct soap*, ns1__ArrayOfCCDFileUploadCompleteSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfBindContainerSFC_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfBindContainerSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfBindContainerSFC(struct soap*, ns1__ArrayOfBindContainerSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfBindContainerSFC(struct soap*, const char *, int, ns1__ArrayOfBindContainerSFC *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfBindContainerSFC ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfBindContainerSFC(struct soap*, const char*, ns1__ArrayOfBindContainerSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfBindContainerSFC(struct soap*, ns1__ArrayOfBindContainerSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfBindContainerSFC ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfBindContainerSFC(struct soap*, ns1__ArrayOfBindContainerSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UnBindSFCByScadaDTO_DEFINED
#define SOAP_TYPE_PointerTons1__UnBindSFCByScadaDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UnBindSFCByScadaDTO(struct soap*, ns1__UnBindSFCByScadaDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UnBindSFCByScadaDTO(struct soap*, const char *, int, ns1__UnBindSFCByScadaDTO *const*, const char *);
SOAP_FMAC3 ns1__UnBindSFCByScadaDTO ** SOAP_FMAC4 soap_in_PointerTons1__UnBindSFCByScadaDTO(struct soap*, const char*, ns1__UnBindSFCByScadaDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UnBindSFCByScadaDTO(struct soap*, ns1__UnBindSFCByScadaDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__UnBindSFCByScadaDTO ** SOAP_FMAC4 soap_get_PointerTons1__UnBindSFCByScadaDTO(struct soap*, ns1__UnBindSFCByScadaDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ToolLife_DEFINED
#define SOAP_TYPE_PointerTons1__ToolLife_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ToolLife(struct soap*, ns1__ToolLife *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ToolLife(struct soap*, const char *, int, ns1__ToolLife *const*, const char *);
SOAP_FMAC3 ns1__ToolLife ** SOAP_FMAC4 soap_in_PointerTons1__ToolLife(struct soap*, const char*, ns1__ToolLife **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ToolLife(struct soap*, ns1__ToolLife *const*, const char*, const char*);
SOAP_FMAC3 ns1__ToolLife ** SOAP_FMAC4 soap_get_PointerTons1__ToolLife(struct soap*, ns1__ToolLife **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ToolBind_DEFINED
#define SOAP_TYPE_PointerTons1__ToolBind_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ToolBind(struct soap*, ns1__ToolBind *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ToolBind(struct soap*, const char *, int, ns1__ToolBind *const*, const char *);
SOAP_FMAC3 ns1__ToolBind ** SOAP_FMAC4 soap_in_PointerTons1__ToolBind(struct soap*, const char*, ns1__ToolBind **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ToolBind(struct soap*, ns1__ToolBind *const*, const char*, const char*);
SOAP_FMAC3 ns1__ToolBind ** SOAP_FMAC4 soap_get_PointerTons1__ToolBind(struct soap*, ns1__ToolBind **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__State_DEFINED
#define SOAP_TYPE_PointerTons1__State_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__State(struct soap*, ns1__State *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__State(struct soap*, const char *, int, ns1__State *const*, const char *);
SOAP_FMAC3 ns1__State ** SOAP_FMAC4 soap_in_PointerTons1__State(struct soap*, const char*, ns1__State **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__State(struct soap*, ns1__State *const*, const char*, const char*);
SOAP_FMAC3 ns1__State ** SOAP_FMAC4 soap_get_PointerTons1__State(struct soap*, ns1__State **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeVersionExamine_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeVersionExamine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeVersionExamine(struct soap*, ns1__RecipeVersionExamine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeVersionExamine(struct soap*, const char *, int, ns1__RecipeVersionExamine *const*, const char *);
SOAP_FMAC3 ns1__RecipeVersionExamine ** SOAP_FMAC4 soap_in_PointerTons1__RecipeVersionExamine(struct soap*, const char*, ns1__RecipeVersionExamine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeVersionExamine(struct soap*, ns1__RecipeVersionExamine *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeVersionExamine ** SOAP_FMAC4 soap_get_PointerTons1__RecipeVersionExamine(struct soap*, ns1__RecipeVersionExamine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, const char *, int, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, const char*, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfListOfRecipeListGetForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeListGet_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeListGet(struct soap*, ns1__RecipeListGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeListGet(struct soap*, const char *, int, ns1__RecipeListGet *const*, const char *);
SOAP_FMAC3 ns1__RecipeListGet ** SOAP_FMAC4 soap_in_PointerTons1__RecipeListGet(struct soap*, const char*, ns1__RecipeListGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeListGet(struct soap*, ns1__RecipeListGet *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeListGet ** SOAP_FMAC4 soap_get_PointerTons1__RecipeListGet(struct soap*, ns1__RecipeListGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, const char *, int, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfRecipeGetForEqu ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, const char*, ns1__ApiResponseDataForScadaOfRecipeGetForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfRecipeGetForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfRecipeGetForEqu ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseDataForScadaOfRecipeGetForEqu(struct soap*, ns1__ApiResponseDataForScadaOfRecipeGetForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeGet_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeGet(struct soap*, ns1__RecipeGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeGet(struct soap*, const char *, int, ns1__RecipeGet *const*, const char *);
SOAP_FMAC3 ns1__RecipeGet ** SOAP_FMAC4 soap_in_PointerTons1__RecipeGet(struct soap*, const char*, ns1__RecipeGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeGet(struct soap*, ns1__RecipeGet *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeGet ** SOAP_FMAC4 soap_get_PointerTons1__RecipeGet(struct soap*, ns1__RecipeGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Recipe_DEFINED
#define SOAP_TYPE_PointerTons1__Recipe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Recipe(struct soap*, ns1__Recipe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Recipe(struct soap*, const char *, int, ns1__Recipe *const*, const char *);
SOAP_FMAC3 ns1__Recipe ** SOAP_FMAC4 soap_in_PointerTons1__Recipe(struct soap*, const char*, ns1__Recipe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Recipe(struct soap*, ns1__Recipe *const*, const char*, const char*);
SOAP_FMAC3 ns1__Recipe ** SOAP_FMAC4 soap_get_PointerTons1__Recipe(struct soap*, ns1__Recipe **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OutboundMore_DEFINED
#define SOAP_TYPE_PointerTons1__OutboundMore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OutboundMore(struct soap*, ns1__OutboundMore *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OutboundMore(struct soap*, const char *, int, ns1__OutboundMore *const*, const char *);
SOAP_FMAC3 ns1__OutboundMore ** SOAP_FMAC4 soap_in_PointerTons1__OutboundMore(struct soap*, const char*, ns1__OutboundMore **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OutboundMore(struct soap*, ns1__OutboundMore *const*, const char*, const char*);
SOAP_FMAC3 ns1__OutboundMore ** SOAP_FMAC4 soap_get_PointerTons1__OutboundMore(struct soap*, ns1__OutboundMore **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OutboundInSFCOutputQty_DEFINED
#define SOAP_TYPE_PointerTons1__OutboundInSFCOutputQty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OutboundInSFCOutputQty(struct soap*, ns1__OutboundInSFCOutputQty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OutboundInSFCOutputQty(struct soap*, const char *, int, ns1__OutboundInSFCOutputQty *const*, const char *);
SOAP_FMAC3 ns1__OutboundInSFCOutputQty ** SOAP_FMAC4 soap_in_PointerTons1__OutboundInSFCOutputQty(struct soap*, const char*, ns1__OutboundInSFCOutputQty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OutboundInSFCOutputQty(struct soap*, ns1__OutboundInSFCOutputQty *const*, const char*, const char*);
SOAP_FMAC3 ns1__OutboundInSFCOutputQty ** SOAP_FMAC4 soap_get_PointerTons1__OutboundInSFCOutputQty(struct soap*, ns1__OutboundInSFCOutputQty **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OutboundInLaminating_DEFINED
#define SOAP_TYPE_PointerTons1__OutboundInLaminating_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OutboundInLaminating(struct soap*, ns1__OutboundInLaminating *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OutboundInLaminating(struct soap*, const char *, int, ns1__OutboundInLaminating *const*, const char *);
SOAP_FMAC3 ns1__OutboundInLaminating ** SOAP_FMAC4 soap_in_PointerTons1__OutboundInLaminating(struct soap*, const char*, ns1__OutboundInLaminating **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OutboundInLaminating(struct soap*, ns1__OutboundInLaminating *const*, const char*, const char*);
SOAP_FMAC3 ns1__OutboundInLaminating ** SOAP_FMAC4 soap_get_PointerTons1__OutboundInLaminating(struct soap*, ns1__OutboundInLaminating **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Outbound_DEFINED
#define SOAP_TYPE_PointerTons1__Outbound_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Outbound(struct soap*, ns1__Outbound *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Outbound(struct soap*, const char *, int, ns1__Outbound *const*, const char *);
SOAP_FMAC3 ns1__Outbound ** SOAP_FMAC4 soap_in_PointerTons1__Outbound(struct soap*, const char*, ns1__Outbound **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Outbound(struct soap*, ns1__Outbound *const*, const char*, const char*);
SOAP_FMAC3 ns1__Outbound ** SOAP_FMAC4 soap_get_PointerTons1__Outbound(struct soap*, ns1__Outbound **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OperatorLogin_DEFINED
#define SOAP_TYPE_PointerTons1__OperatorLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OperatorLogin(struct soap*, ns1__OperatorLogin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OperatorLogin(struct soap*, const char *, int, ns1__OperatorLogin *const*, const char *);
SOAP_FMAC3 ns1__OperatorLogin ** SOAP_FMAC4 soap_in_PointerTons1__OperatorLogin(struct soap*, const char*, ns1__OperatorLogin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OperatorLogin(struct soap*, ns1__OperatorLogin *const*, const char*, const char*);
SOAP_FMAC3 ns1__OperatorLogin ** SOAP_FMAC4 soap_get_PointerTons1__OperatorLogin(struct soap*, ns1__OperatorLogin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InboundMore_DEFINED
#define SOAP_TYPE_PointerTons1__InboundMore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InboundMore(struct soap*, ns1__InboundMore *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InboundMore(struct soap*, const char *, int, ns1__InboundMore *const*, const char *);
SOAP_FMAC3 ns1__InboundMore ** SOAP_FMAC4 soap_in_PointerTons1__InboundMore(struct soap*, const char*, ns1__InboundMore **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InboundMore(struct soap*, ns1__InboundMore *const*, const char*, const char*);
SOAP_FMAC3 ns1__InboundMore ** SOAP_FMAC4 soap_get_PointerTons1__InboundMore(struct soap*, ns1__InboundMore **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, const char *, int, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, const char*, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu(struct soap*, ns1__ApiResponseDataForScadaOfInboundInTwoInjectionForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InboundInTwoInjection_DEFINED
#define SOAP_TYPE_PointerTons1__InboundInTwoInjection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InboundInTwoInjection(struct soap*, ns1__InboundInTwoInjection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InboundInTwoInjection(struct soap*, const char *, int, ns1__InboundInTwoInjection *const*, const char *);
SOAP_FMAC3 ns1__InboundInTwoInjection ** SOAP_FMAC4 soap_in_PointerTons1__InboundInTwoInjection(struct soap*, const char*, ns1__InboundInTwoInjection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InboundInTwoInjection(struct soap*, ns1__InboundInTwoInjection *const*, const char*, const char*);
SOAP_FMAC3 ns1__InboundInTwoInjection ** SOAP_FMAC4 soap_get_PointerTons1__InboundInTwoInjection(struct soap*, ns1__InboundInTwoInjection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InboundInSFCContainer_DEFINED
#define SOAP_TYPE_PointerTons1__InboundInSFCContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InboundInSFCContainer(struct soap*, ns1__InboundInSFCContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InboundInSFCContainer(struct soap*, const char *, int, ns1__InboundInSFCContainer *const*, const char *);
SOAP_FMAC3 ns1__InboundInSFCContainer ** SOAP_FMAC4 soap_in_PointerTons1__InboundInSFCContainer(struct soap*, const char*, ns1__InboundInSFCContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InboundInSFCContainer(struct soap*, ns1__InboundInSFCContainer *const*, const char*, const char*);
SOAP_FMAC3 ns1__InboundInSFCContainer ** SOAP_FMAC4 soap_get_PointerTons1__InboundInSFCContainer(struct soap*, ns1__InboundInSFCContainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InboundInContainer_DEFINED
#define SOAP_TYPE_PointerTons1__InboundInContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InboundInContainer(struct soap*, ns1__InboundInContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InboundInContainer(struct soap*, const char *, int, ns1__InboundInContainer *const*, const char *);
SOAP_FMAC3 ns1__InboundInContainer ** SOAP_FMAC4 soap_in_PointerTons1__InboundInContainer(struct soap*, const char*, ns1__InboundInContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InboundInContainer(struct soap*, ns1__InboundInContainer *const*, const char*, const char*);
SOAP_FMAC3 ns1__InboundInContainer ** SOAP_FMAC4 soap_get_PointerTons1__InboundInContainer(struct soap*, ns1__InboundInContainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Inbound_DEFINED
#define SOAP_TYPE_PointerTons1__Inbound_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Inbound(struct soap*, ns1__Inbound *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Inbound(struct soap*, const char *, int, ns1__Inbound *const*, const char *);
SOAP_FMAC3 ns1__Inbound ** SOAP_FMAC4 soap_in_PointerTons1__Inbound(struct soap*, const char*, ns1__Inbound **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Inbound(struct soap*, ns1__Inbound *const*, const char*, const char*);
SOAP_FMAC3 ns1__Inbound ** SOAP_FMAC4 soap_get_PointerTons1__Inbound(struct soap*, ns1__Inbound **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Heartbeat_DEFINED
#define SOAP_TYPE_PointerTons1__Heartbeat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Heartbeat(struct soap*, ns1__Heartbeat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Heartbeat(struct soap*, const char *, int, ns1__Heartbeat *const*, const char *);
SOAP_FMAC3 ns1__Heartbeat ** SOAP_FMAC4 soap_in_PointerTons1__Heartbeat(struct soap*, const char*, ns1__Heartbeat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Heartbeat(struct soap*, ns1__Heartbeat *const*, const char*, const char*);
SOAP_FMAC3 ns1__Heartbeat ** SOAP_FMAC4 soap_get_PointerTons1__Heartbeat(struct soap*, ns1__Heartbeat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfString_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseDataForScadaOfString(struct soap*, ns1__ApiResponseDataForScadaOfString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseDataForScadaOfString(struct soap*, const char *, int, ns1__ApiResponseDataForScadaOfString *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfString ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseDataForScadaOfString(struct soap*, const char*, ns1__ApiResponseDataForScadaOfString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseDataForScadaOfString(struct soap*, ns1__ApiResponseDataForScadaOfString *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfString ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseDataForScadaOfString(struct soap*, ns1__ApiResponseDataForScadaOfString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenerateCellSFC_DEFINED
#define SOAP_TYPE_PointerTons1__GenerateCellSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenerateCellSFC(struct soap*, ns1__GenerateCellSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenerateCellSFC(struct soap*, const char *, int, ns1__GenerateCellSFC *const*, const char *);
SOAP_FMAC3 ns1__GenerateCellSFC ** SOAP_FMAC4 soap_in_PointerTons1__GenerateCellSFC(struct soap*, const char*, ns1__GenerateCellSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenerateCellSFC(struct soap*, ns1__GenerateCellSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenerateCellSFC ** SOAP_FMAC4 soap_get_PointerTons1__GenerateCellSFC(struct soap*, ns1__GenerateCellSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FillingData_DEFINED
#define SOAP_TYPE_PointerTons1__FillingData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FillingData(struct soap*, ns1__FillingData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FillingData(struct soap*, const char *, int, ns1__FillingData *const*, const char *);
SOAP_FMAC3 ns1__FillingData ** SOAP_FMAC4 soap_in_PointerTons1__FillingData(struct soap*, const char*, ns1__FillingData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FillingData(struct soap*, ns1__FillingData *const*, const char*, const char*);
SOAP_FMAC3 ns1__FillingData ** SOAP_FMAC4 soap_get_PointerTons1__FillingData(struct soap*, ns1__FillingData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FeedingDJInLaminatingByScadaDTO_DEFINED
#define SOAP_TYPE_PointerTons1__FeedingDJInLaminatingByScadaDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FeedingDJInLaminatingByScadaDTO(struct soap*, ns1__FeedingDJInLaminatingByScadaDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FeedingDJInLaminatingByScadaDTO(struct soap*, const char *, int, ns1__FeedingDJInLaminatingByScadaDTO *const*, const char *);
SOAP_FMAC3 ns1__FeedingDJInLaminatingByScadaDTO ** SOAP_FMAC4 soap_in_PointerTons1__FeedingDJInLaminatingByScadaDTO(struct soap*, const char*, ns1__FeedingDJInLaminatingByScadaDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FeedingDJInLaminatingByScadaDTO(struct soap*, ns1__FeedingDJInLaminatingByScadaDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__FeedingDJInLaminatingByScadaDTO ** SOAP_FMAC4 soap_get_PointerTons1__FeedingDJInLaminatingByScadaDTO(struct soap*, ns1__FeedingDJInLaminatingByScadaDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FeedingByScadaDTO_DEFINED
#define SOAP_TYPE_PointerTons1__FeedingByScadaDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FeedingByScadaDTO(struct soap*, ns1__FeedingByScadaDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FeedingByScadaDTO(struct soap*, const char *, int, ns1__FeedingByScadaDTO *const*, const char *);
SOAP_FMAC3 ns1__FeedingByScadaDTO ** SOAP_FMAC4 soap_in_PointerTons1__FeedingByScadaDTO(struct soap*, const char*, ns1__FeedingByScadaDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FeedingByScadaDTO(struct soap*, ns1__FeedingByScadaDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__FeedingByScadaDTO ** SOAP_FMAC4 soap_get_PointerTons1__FeedingByScadaDTO(struct soap*, ns1__FeedingByScadaDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExamineExistsByScadaDTO_DEFINED
#define SOAP_TYPE_PointerTons1__ExamineExistsByScadaDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExamineExistsByScadaDTO(struct soap*, ns1__ExamineExistsByScadaDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExamineExistsByScadaDTO(struct soap*, const char *, int, ns1__ExamineExistsByScadaDTO *const*, const char *);
SOAP_FMAC3 ns1__ExamineExistsByScadaDTO ** SOAP_FMAC4 soap_in_PointerTons1__ExamineExistsByScadaDTO(struct soap*, const char*, ns1__ExamineExistsByScadaDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExamineExistsByScadaDTO(struct soap*, ns1__ExamineExistsByScadaDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__ExamineExistsByScadaDTO ** SOAP_FMAC4 soap_get_PointerTons1__ExamineExistsByScadaDTO(struct soap*, ns1__ExamineExistsByScadaDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, const char *, int, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, const char*, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada(struct soap*, ns1__ApiResponseDataForScadaOfListOfApiResponseSFCForScada **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EquipmentProductProcessParam_DEFINED
#define SOAP_TYPE_PointerTons1__EquipmentProductProcessParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EquipmentProductProcessParam(struct soap*, ns1__EquipmentProductProcessParam *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EquipmentProductProcessParam(struct soap*, const char *, int, ns1__EquipmentProductProcessParam *const*, const char *);
SOAP_FMAC3 ns1__EquipmentProductProcessParam ** SOAP_FMAC4 soap_in_PointerTons1__EquipmentProductProcessParam(struct soap*, const char*, ns1__EquipmentProductProcessParam **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EquipmentProductProcessParam(struct soap*, ns1__EquipmentProductProcessParam *const*, const char*, const char*);
SOAP_FMAC3 ns1__EquipmentProductProcessParam ** SOAP_FMAC4 soap_get_PointerTons1__EquipmentProductProcessParam(struct soap*, ns1__EquipmentProductProcessParam **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EquipmentProcessParam_DEFINED
#define SOAP_TYPE_PointerTons1__EquipmentProcessParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EquipmentProcessParam(struct soap*, ns1__EquipmentProcessParam *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EquipmentProcessParam(struct soap*, const char *, int, ns1__EquipmentProcessParam *const*, const char *);
SOAP_FMAC3 ns1__EquipmentProcessParam ** SOAP_FMAC4 soap_in_PointerTons1__EquipmentProcessParam(struct soap*, const char*, ns1__EquipmentProcessParam **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EquipmentProcessParam(struct soap*, ns1__EquipmentProcessParam *const*, const char*, const char*);
SOAP_FMAC3 ns1__EquipmentProcessParam ** SOAP_FMAC4 soap_get_PointerTons1__EquipmentProcessParam(struct soap*, ns1__EquipmentProcessParam **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfDownReason_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfDownReason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfDownReason(struct soap*, ns1__ArrayOfDownReason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfDownReason(struct soap*, const char *, int, ns1__ArrayOfDownReason *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfDownReason ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfDownReason(struct soap*, const char*, ns1__ArrayOfDownReason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfDownReason(struct soap*, ns1__ArrayOfDownReason *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfDownReason ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfDownReason(struct soap*, ns1__ArrayOfDownReason **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CCDFileUploadComplete_DEFINED
#define SOAP_TYPE_PointerTons1__CCDFileUploadComplete_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CCDFileUploadComplete(struct soap*, ns1__CCDFileUploadComplete *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CCDFileUploadComplete(struct soap*, const char *, int, ns1__CCDFileUploadComplete *const*, const char *);
SOAP_FMAC3 ns1__CCDFileUploadComplete ** SOAP_FMAC4 soap_in_PointerTons1__CCDFileUploadComplete(struct soap*, const char*, ns1__CCDFileUploadComplete **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CCDFileUploadComplete(struct soap*, ns1__CCDFileUploadComplete *const*, const char*, const char*);
SOAP_FMAC3 ns1__CCDFileUploadComplete ** SOAP_FMAC4 soap_get_PointerTons1__CCDFileUploadComplete(struct soap*, ns1__CCDFileUploadComplete **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BindSFCByScadaDTO_DEFINED
#define SOAP_TYPE_PointerTons1__BindSFCByScadaDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BindSFCByScadaDTO(struct soap*, ns1__BindSFCByScadaDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BindSFCByScadaDTO(struct soap*, const char *, int, ns1__BindSFCByScadaDTO *const*, const char *);
SOAP_FMAC3 ns1__BindSFCByScadaDTO ** SOAP_FMAC4 soap_in_PointerTons1__BindSFCByScadaDTO(struct soap*, const char*, ns1__BindSFCByScadaDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BindSFCByScadaDTO(struct soap*, ns1__BindSFCByScadaDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__BindSFCByScadaDTO ** SOAP_FMAC4 soap_get_PointerTons1__BindSFCByScadaDTO(struct soap*, ns1__BindSFCByScadaDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BindContainer_DEFINED
#define SOAP_TYPE_PointerTons1__BindContainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BindContainer(struct soap*, ns1__BindContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BindContainer(struct soap*, const char *, int, ns1__BindContainer *const*, const char *);
SOAP_FMAC3 ns1__BindContainer ** SOAP_FMAC4 soap_in_PointerTons1__BindContainer(struct soap*, const char*, ns1__BindContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BindContainer(struct soap*, ns1__BindContainer *const*, const char*, const char*);
SOAP_FMAC3 ns1__BindContainer ** SOAP_FMAC4 soap_get_PointerTons1__BindContainer(struct soap*, ns1__BindContainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseForScada_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseForScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseForScada(struct soap*, ns1__ApiResponseForScada *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseForScada(struct soap*, const char *, int, ns1__ApiResponseForScada *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseForScada ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseForScada(struct soap*, const char*, ns1__ApiResponseForScada **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseForScada(struct soap*, ns1__ApiResponseForScada *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseForScada ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseForScada(struct soap*, ns1__ApiResponseForScada **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfAlarm_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfAlarm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfAlarm(struct soap*, ns1__ArrayOfAlarm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfAlarm(struct soap*, const char *, int, ns1__ArrayOfAlarm *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfAlarm ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfAlarm(struct soap*, const char*, ns1__ArrayOfAlarm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfAlarm(struct soap*, ns1__ArrayOfAlarm *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfAlarm ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfAlarm(struct soap*, ns1__ArrayOfAlarm **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeListGetForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeListGetForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeListGetForEqu(struct soap*, ns1__RecipeListGetForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeListGetForEqu(struct soap*, const char *, int, ns1__RecipeListGetForEqu *const*, const char *);
SOAP_FMAC3 ns1__RecipeListGetForEqu ** SOAP_FMAC4 soap_in_PointerTons1__RecipeListGetForEqu(struct soap*, const char*, ns1__RecipeListGetForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeListGetForEqu(struct soap*, ns1__RecipeListGetForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeListGetForEqu ** SOAP_FMAC4 soap_get_PointerTons1__RecipeListGetForEqu(struct soap*, ns1__RecipeListGetForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeGetParamForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeGetParamForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeGetParamForEqu(struct soap*, ns1__RecipeGetParamForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeGetParamForEqu(struct soap*, const char *, int, ns1__RecipeGetParamForEqu *const*, const char *);
SOAP_FMAC3 ns1__RecipeGetParamForEqu ** SOAP_FMAC4 soap_in_PointerTons1__RecipeGetParamForEqu(struct soap*, const char*, ns1__RecipeGetParamForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeGetParamForEqu(struct soap*, ns1__RecipeGetParamForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeGetParamForEqu ** SOAP_FMAC4 soap_get_PointerTons1__RecipeGetParamForEqu(struct soap*, ns1__RecipeGetParamForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfRecipeGetParamForEqu_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfRecipeGetParamForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfRecipeGetParamForEqu(struct soap*, ns1__ArrayOfRecipeGetParamForEqu *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfRecipeGetParamForEqu(struct soap*, const char *, int, ns1__ArrayOfRecipeGetParamForEqu *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfRecipeGetParamForEqu ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfRecipeGetParamForEqu(struct soap*, const char*, ns1__ArrayOfRecipeGetParamForEqu **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfRecipeGetParamForEqu(struct soap*, ns1__ArrayOfRecipeGetParamForEqu *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfRecipeGetParamForEqu ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfRecipeGetParamForEqu(struct soap*, ns1__ArrayOfRecipeGetParamForEqu **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecipeParam_DEFINED
#define SOAP_TYPE_PointerTons1__RecipeParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecipeParam(struct soap*, ns1__RecipeParam *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecipeParam(struct soap*, const char *, int, ns1__RecipeParam *const*, const char *);
SOAP_FMAC3 ns1__RecipeParam ** SOAP_FMAC4 soap_in_PointerTons1__RecipeParam(struct soap*, const char*, ns1__RecipeParam **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecipeParam(struct soap*, ns1__RecipeParam *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecipeParam ** SOAP_FMAC4 soap_get_PointerTons1__RecipeParam(struct soap*, ns1__RecipeParam **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap*, const char *, int, ns1__ArrayOfString *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OutboundSFC_DEFINED
#define SOAP_TYPE_PointerTons1__OutboundSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OutboundSFC(struct soap*, ns1__OutboundSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OutboundSFC(struct soap*, const char *, int, ns1__OutboundSFC *const*, const char *);
SOAP_FMAC3 ns1__OutboundSFC ** SOAP_FMAC4 soap_in_PointerTons1__OutboundSFC(struct soap*, const char*, ns1__OutboundSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OutboundSFC(struct soap*, ns1__OutboundSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__OutboundSFC ** SOAP_FMAC4 soap_get_PointerTons1__OutboundSFC(struct soap*, ns1__OutboundSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_PointerTons1__ApiResponseSFCForScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ApiResponseSFCForScada(struct soap*, ns1__ApiResponseSFCForScada *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ApiResponseSFCForScada(struct soap*, const char *, int, ns1__ApiResponseSFCForScada *const*, const char *);
SOAP_FMAC3 ns1__ApiResponseSFCForScada ** SOAP_FMAC4 soap_in_PointerTons1__ApiResponseSFCForScada(struct soap*, const char*, ns1__ApiResponseSFCForScada **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ApiResponseSFCForScada(struct soap*, ns1__ApiResponseSFCForScada *const*, const char*, const char*);
SOAP_FMAC3 ns1__ApiResponseSFCForScada ** SOAP_FMAC4 soap_get_PointerTons1__ApiResponseSFCForScada(struct soap*, ns1__ApiResponseSFCForScada **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfParamDTO_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfParamDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfParamDTO(struct soap*, ns1__ArrayOfParamDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfParamDTO(struct soap*, const char *, int, ns1__ArrayOfParamDTO *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfParamDTO ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfParamDTO(struct soap*, const char*, ns1__ArrayOfParamDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfParamDTO(struct soap*, ns1__ArrayOfParamDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfParamDTO ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfParamDTO(struct soap*, ns1__ArrayOfParamDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EquipmentProductProcessParamSFC_DEFINED
#define SOAP_TYPE_PointerTons1__EquipmentProductProcessParamSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EquipmentProductProcessParamSFC(struct soap*, ns1__EquipmentProductProcessParamSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EquipmentProductProcessParamSFC(struct soap*, const char *, int, ns1__EquipmentProductProcessParamSFC *const*, const char *);
SOAP_FMAC3 ns1__EquipmentProductProcessParamSFC ** SOAP_FMAC4 soap_in_PointerTons1__EquipmentProductProcessParamSFC(struct soap*, const char*, ns1__EquipmentProductProcessParamSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EquipmentProductProcessParamSFC(struct soap*, ns1__EquipmentProductProcessParamSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__EquipmentProductProcessParamSFC ** SOAP_FMAC4 soap_get_PointerTons1__EquipmentProductProcessParamSFC(struct soap*, ns1__EquipmentProductProcessParamSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ParamDTO_DEFINED
#define SOAP_TYPE_PointerTons1__ParamDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParamDTO(struct soap*, ns1__ParamDTO *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParamDTO(struct soap*, const char *, int, ns1__ParamDTO *const*, const char *);
SOAP_FMAC3 ns1__ParamDTO ** SOAP_FMAC4 soap_in_PointerTons1__ParamDTO(struct soap*, const char*, ns1__ParamDTO **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParamDTO(struct soap*, ns1__ParamDTO *const*, const char*, const char*);
SOAP_FMAC3 ns1__ParamDTO ** SOAP_FMAC4 soap_get_PointerTons1__ParamDTO(struct soap*, ns1__ParamDTO **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DownReason_DEFINED
#define SOAP_TYPE_PointerTons1__DownReason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DownReason(struct soap*, ns1__DownReason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DownReason(struct soap*, const char *, int, ns1__DownReason *const*, const char *);
SOAP_FMAC3 ns1__DownReason ** SOAP_FMAC4 soap_in_PointerTons1__DownReason(struct soap*, const char*, ns1__DownReason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DownReason(struct soap*, ns1__DownReason *const*, const char*, const char*);
SOAP_FMAC3 ns1__DownReason ** SOAP_FMAC4 soap_get_PointerTons1__DownReason(struct soap*, ns1__DownReason **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CCDFileUploadCompleteSFC_DEFINED
#define SOAP_TYPE_PointerTons1__CCDFileUploadCompleteSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CCDFileUploadCompleteSFC(struct soap*, ns1__CCDFileUploadCompleteSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CCDFileUploadCompleteSFC(struct soap*, const char *, int, ns1__CCDFileUploadCompleteSFC *const*, const char *);
SOAP_FMAC3 ns1__CCDFileUploadCompleteSFC ** SOAP_FMAC4 soap_in_PointerTons1__CCDFileUploadCompleteSFC(struct soap*, const char*, ns1__CCDFileUploadCompleteSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CCDFileUploadCompleteSFC(struct soap*, ns1__CCDFileUploadCompleteSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__CCDFileUploadCompleteSFC ** SOAP_FMAC4 soap_get_PointerTons1__CCDFileUploadCompleteSFC(struct soap*, ns1__CCDFileUploadCompleteSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BindContainerSFC_DEFINED
#define SOAP_TYPE_PointerTons1__BindContainerSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BindContainerSFC(struct soap*, ns1__BindContainerSFC *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BindContainerSFC(struct soap*, const char *, int, ns1__BindContainerSFC *const*, const char *);
SOAP_FMAC3 ns1__BindContainerSFC ** SOAP_FMAC4 soap_in_PointerTons1__BindContainerSFC(struct soap*, const char*, ns1__BindContainerSFC **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BindContainerSFC(struct soap*, ns1__BindContainerSFC *const*, const char*, const char*);
SOAP_FMAC3 ns1__BindContainerSFC ** SOAP_FMAC4 soap_get_PointerTons1__BindContainerSFC(struct soap*, ns1__BindContainerSFC **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wstring_DEFINED
#define SOAP_TYPE_wstring_DEFINED

inline void soap_default_wstring(struct soap *soap, wchar_t **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wstring
	*a = SOAP_DEFAULT_wstring;
#else
	*a = (wchar_t *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);

#define soap_wstring2s(soap, a) soap_wchar2s((soap), (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);

#define soap_s2wstring(soap, s, a) soap_s2wchar((soap), (s), (wchar_t**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

inline int soap_write_wstring(struct soap *soap, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

inline int soap_read_wstring(struct soap *soap, wchar_t **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstring(struct soap *soap, const char *URL, wchar_t **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wstring(struct soap *soap, wchar_t **p)
{
	if (::soap_read_wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTons1__Alarm_DEFINED
#define SOAP_TYPE_PointerTons1__Alarm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Alarm(struct soap*, ns1__Alarm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Alarm(struct soap*, const char *, int, ns1__Alarm *const*, const char *);
SOAP_FMAC3 ns1__Alarm ** SOAP_FMAC4 soap_in_PointerTons1__Alarm(struct soap*, const char*, ns1__Alarm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Alarm(struct soap*, ns1__Alarm *const*, const char*, const char*);
SOAP_FMAC3 ns1__Alarm ** SOAP_FMAC4 soap_get_PointerTons1__Alarm(struct soap*, ns1__Alarm **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(struct soap*, std::vector<ns1__RecipeListGetForEqu *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(struct soap*, const std::vector<ns1__RecipeListGetForEqu *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(struct soap*, const char*, int, const std::vector<ns1__RecipeListGetForEqu *> *, const char*);
SOAP_FMAC3 std::vector<ns1__RecipeListGetForEqu *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(struct soap*, const char*, std::vector<ns1__RecipeListGetForEqu *> *, const char*);
SOAP_FMAC1 std::vector<ns1__RecipeListGetForEqu *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__RecipeListGetForEqu *>  * soap_new_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__RecipeListGetForEqu(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(struct soap*, std::vector<ns1__RecipeGetParamForEqu *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(struct soap*, const std::vector<ns1__RecipeGetParamForEqu *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(struct soap*, const char*, int, const std::vector<ns1__RecipeGetParamForEqu *> *, const char*);
SOAP_FMAC3 std::vector<ns1__RecipeGetParamForEqu *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(struct soap*, const char*, std::vector<ns1__RecipeGetParamForEqu *> *, const char*);
SOAP_FMAC1 std::vector<ns1__RecipeGetParamForEqu *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__RecipeGetParamForEqu *>  * soap_new_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__RecipeGetParamForEqu(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__RecipeParam_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__RecipeParam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RecipeParam(struct soap*, std::vector<ns1__RecipeParam *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RecipeParam(struct soap*, const std::vector<ns1__RecipeParam *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RecipeParam(struct soap*, const char*, int, const std::vector<ns1__RecipeParam *> *, const char*);
SOAP_FMAC3 std::vector<ns1__RecipeParam *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RecipeParam(struct soap*, const char*, std::vector<ns1__RecipeParam *> *, const char*);
SOAP_FMAC1 std::vector<ns1__RecipeParam *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__RecipeParam(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__RecipeParam *>  * soap_new_std__vectorTemplateOfPointerTons1__RecipeParam(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__RecipeParam(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__OutboundSFC_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__OutboundSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__OutboundSFC(struct soap*, std::vector<ns1__OutboundSFC *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__OutboundSFC(struct soap*, const std::vector<ns1__OutboundSFC *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__OutboundSFC(struct soap*, const char*, int, const std::vector<ns1__OutboundSFC *> *, const char*);
SOAP_FMAC3 std::vector<ns1__OutboundSFC *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__OutboundSFC(struct soap*, const char*, std::vector<ns1__OutboundSFC *> *, const char*);
SOAP_FMAC1 std::vector<ns1__OutboundSFC *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__OutboundSFC(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__OutboundSFC *>  * soap_new_std__vectorTemplateOfPointerTons1__OutboundSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__OutboundSFC(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(struct soap*, std::vector<ns1__ApiResponseSFCForScada *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(struct soap*, const std::vector<ns1__ApiResponseSFCForScada *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(struct soap*, const char*, int, const std::vector<ns1__ApiResponseSFCForScada *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ApiResponseSFCForScada *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(struct soap*, const char*, std::vector<ns1__ApiResponseSFCForScada *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ApiResponseSFCForScada *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ApiResponseSFCForScada *>  * soap_new_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ApiResponseSFCForScada(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(struct soap*, std::vector<ns1__EquipmentProductProcessParamSFC *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(struct soap*, const std::vector<ns1__EquipmentProductProcessParamSFC *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(struct soap*, const char*, int, const std::vector<ns1__EquipmentProductProcessParamSFC *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EquipmentProductProcessParamSFC *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(struct soap*, const char*, std::vector<ns1__EquipmentProductProcessParamSFC *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EquipmentProductProcessParamSFC *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EquipmentProductProcessParamSFC *>  * soap_new_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__EquipmentProductProcessParamSFC(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ParamDTO_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ParamDTO_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ParamDTO(struct soap*, std::vector<ns1__ParamDTO *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ParamDTO(struct soap*, const std::vector<ns1__ParamDTO *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ParamDTO(struct soap*, const char*, int, const std::vector<ns1__ParamDTO *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ParamDTO *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ParamDTO(struct soap*, const char*, std::vector<ns1__ParamDTO *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ParamDTO *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ParamDTO(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ParamDTO *>  * soap_new_std__vectorTemplateOfPointerTons1__ParamDTO(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ParamDTO(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DownReason_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DownReason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DownReason(struct soap*, std::vector<ns1__DownReason *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DownReason(struct soap*, const std::vector<ns1__DownReason *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DownReason(struct soap*, const char*, int, const std::vector<ns1__DownReason *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DownReason *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DownReason(struct soap*, const char*, std::vector<ns1__DownReason *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DownReason *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DownReason(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DownReason *>  * soap_new_std__vectorTemplateOfPointerTons1__DownReason(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DownReason(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(struct soap*, std::vector<ns1__CCDFileUploadCompleteSFC *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(struct soap*, const std::vector<ns1__CCDFileUploadCompleteSFC *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(struct soap*, const char*, int, const std::vector<ns1__CCDFileUploadCompleteSFC *> *, const char*);
SOAP_FMAC3 std::vector<ns1__CCDFileUploadCompleteSFC *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(struct soap*, const char*, std::vector<ns1__CCDFileUploadCompleteSFC *> *, const char*);
SOAP_FMAC1 std::vector<ns1__CCDFileUploadCompleteSFC *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__CCDFileUploadCompleteSFC *>  * soap_new_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__CCDFileUploadCompleteSFC(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__wstring_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap*, std::vector<std::wstring> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap*, const std::vector<std::wstring> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap*, const char*, int, const std::vector<std::wstring> *, const char*);
SOAP_FMAC3 std::vector<std::wstring> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap*, const char*, std::vector<std::wstring> *, const char*);
SOAP_FMAC1 std::vector<std::wstring>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::wstring>  * soap_new_std__vectorTemplateOfstd__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__wstring(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__BindContainerSFC_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__BindContainerSFC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__BindContainerSFC(struct soap*, std::vector<ns1__BindContainerSFC *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__BindContainerSFC(struct soap*, const std::vector<ns1__BindContainerSFC *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__BindContainerSFC(struct soap*, const char*, int, const std::vector<ns1__BindContainerSFC *> *, const char*);
SOAP_FMAC3 std::vector<ns1__BindContainerSFC *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__BindContainerSFC(struct soap*, const char*, std::vector<ns1__BindContainerSFC *> *, const char*);
SOAP_FMAC1 std::vector<ns1__BindContainerSFC *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__BindContainerSFC(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__BindContainerSFC *>  * soap_new_std__vectorTemplateOfPointerTons1__BindContainerSFC(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__BindContainerSFC(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Alarm_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Alarm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Alarm(struct soap*, std::vector<ns1__Alarm *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Alarm(struct soap*, const std::vector<ns1__Alarm *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Alarm(struct soap*, const char*, int, const std::vector<ns1__Alarm *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Alarm *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Alarm(struct soap*, const char*, std::vector<ns1__Alarm *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Alarm *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Alarm(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Alarm *>  * soap_new_std__vectorTemplateOfPointerTons1__Alarm(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Alarm(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
